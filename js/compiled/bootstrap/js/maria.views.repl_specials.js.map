{"version":3,"sources":["maria/views/repl_specials.cljs"],"mappings":"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","names":["maria.views.repl-specials/docs-link","namespace","name","cljs.core/re-find","maria.live.ns-utils/cd-encode","chia.view.class/view*","p__42262","map__42263","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","chia.view.props/to-element","props42261","G__42259","chia.view.class/Component","obj42278","obj42280","chia.view.class/populate-initial-state!","p1__42252#","maria.views.repl-specials/doc","doc","meta","arglists","forms","props","standalone?","this","expanded?","vec__42267","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/namespace","cljs.core/name","maria.live.ns-utils/elide-quote","or__4131__auto__","maria.views.cards/card-classes","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/not","cljs.core/seq","maria.views.cards/arrow","cljs.core/deref","clojure.string.join.cljs$core$IFn$_invoke$arity$2","temp__5718__auto__","friendly-doc","maria.friendly.docstrings/clojure-core","p__42300","map__42301","props42294","G__42292","obj42306","obj42307","maria.views.repl-specials/var-source","p__42295","map__42297","state","maria.live.source-lookups/var-source","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/reset!","special-form","map__42304","value","error","result","maria.editors.code/viewer","p__42316","map__42317","props42315","G__42313","obj42322","obj42323","maria.views.repl-specials/dir","c-state","ns","map__42319","defs","maria.live.ns-utils/analyzer-ns","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/second","p1__42312#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","c","cljs.core/count","limit","G__42321","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","maria.views.icons/ExpandMore"],"sourcesContent":["(ns maria.views.repl-specials\n  (:require [chia.view :as v]\n            [maria.live.ns-utils :as ns-utils]\n            [maria.views.icons :as icons]\n            [clojure.string :as str]\n            [maria.live.source-lookups :as reader]\n            [maria.views.cards :as repl-ui]\n            [maria.editors.code :as code]\n            [maria.friendly.docstrings :as docs]))\n\n(defn docs-link [namespace name]\n  (when (re-find #\"^(cljs|clojure)\\.core(\\$macros)?$\" namespace)\n    [:.mv2\n     [:a.f7.black {:href   (str \"https://clojuredocs.org/clojure.core/\" (ns-utils/cd-encode name))\n                   :target \"_blank\"\n                   :rel    \"noopener noreferrer\"} \"clojuredocs \u2197\"]]))\n\n(v/defclass doc\n  {:view/initial-state #(:expanded? %)\n   :key        :name}\n  [{:keys [doc\n           meta\n           arglists\n           forms\n           view/props\n           standalone?] :as this\n    expanded? :view/state}]\n  (let [[namespace name] [(namespace (:name this)) (name (:name this))]\n        arglists (ns-utils/elide-quote (or forms\n                                           (:arglists meta)\n                                           arglists))]\n    [:.ws-normal\n     {:class (when standalone? repl-ui/card-classes)}\n     [:.code.flex.items-center.pointer.mv1.hover-opacity-parent.pl3\n      {:on-click #(swap! expanded? not)}\n      (when standalone?\n        [:span.o-60 namespace \"/\"])\n      name\n      [:.flex-auto]\n      [:span.o-50.hover-opacity-child\n       (when (or doc (seq arglists))\n         (repl-ui/arrow (if @expanded? :down :left)))]]\n     (when @expanded?\n       [:.ph3\n        [:.mv1.blue.f6 (str/join \", \" arglists)]\n        [:.gray.mv2.f6 (if-let [friendly-doc (:docstring (get docs/clojure-core name))]\n                         friendly-doc\n                         doc)]\n        (docs-link namespace name)])]))\n\n(v/defclass var-source\n  {:view/did-mount (fn [{:keys [view/props view/state]}]\n                      (reader/var-source props (partial reset! state)))}\n  [{:keys [view/state special-form name]}]\n  (let [{:keys [value error] :as result} @state]\n    (cond (nil? result) [:.pa2 \"Loading...\"]\n          error [:.ma3 (if special-form\n                         (str \"Source code is not available. (`\" name \"` is a special form, not written in Clojure.)\")\n                         error)]\n          value (code/viewer value))))\n\n(v/defclass dir\n  {:view/initial-state {:expanded? false}}\n  [{:keys [view/state]} c-state ns]\n  (let [defs (->> (:defs (ns-utils/analyzer-ns c-state ns))\n                  (seq)\n                  (sort)\n                  (map second)\n                  (filter #(not (:private (:meta %)))))\n        c (count defs)\n        limit 10\n        {:keys [expanded?]} @state]\n    [:.sans-serif\n     {:class repl-ui/card-classes}\n     [:.b.pv2.ph3.f5 (str ns)]\n     (map doc (cond->> defs\n                       (not expanded?) (take limit)))\n     (when (and (not expanded?) (> c limit))\n       [:.o-50.pv2.flex.items-center.ph3.pointer.bt.b--near-white\n        {:on-click #(swap! state assoc :expanded? true)}\n        [:span \"Show All (\" (- c limit) \" more)\"]\n        [:.flex-auto] icons/ExpandMore])]))\n\n"]}