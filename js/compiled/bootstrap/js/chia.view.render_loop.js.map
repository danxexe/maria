{"version":3,"sources":["chia/view/render_loop.cljs"],"mappings":"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","names":["chia.view.render-loop/-batch","js/module$node_modules$react_dom$index.unstable_batchedUpdates","chia.view.render-loop/-raf","or__4131__auto__","obj65668","k65669","obj65670","applied-science.js-interop.impl/in?*","js/undefined","js/window","obj65675","k65676","obj65677","obj65681","k65682","obj65683","obj65687","k65688","obj65689","obj65693","k65694","obj65695","cb","js/setTimeout","js/chia","js/chia.view","js/chia.view.render-loop","js/chia.view.render-loop.*immediate-updates*","chia.view.render-loop/*immediate-updates*","js/chia.view.render-loop.to-render","chia.view.render-loop/to-render","cljs.core/volatile!","chia.view.render-loop/dequeue!","view","obj65696","obj65697","chia.view.render-loop/flush*","temp__5720__auto__","views","cljs.core/deref","cljs.core/seq","cljs.core/vreset!","seq__65700","chunk__65701","count__65702","i__65703","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","c","and__4120__auto__","obj65727","k65728","js/goog.reflect.objectProperty","obj65729","obj65744","k65745","obj65746","cljs.core/not","obj65734","k65735","obj65736","obj65747","k65748","obj65749","obj__50657__auto__","f__50658__auto__","chia.view.render-loop/flush!","chia.view.render-loop/force-update","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","chia.view.render-loop/schedule-update!","obj65752","obj65753","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","chia.view.render-loop/apply-sync!","f","args","result","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns chia.view.render-loop\n  (:require [\"react\" :as react]\n            [\"react-dom\" :as react-dom]\n            [applied-science.js-interop :as j]\n            [chia.view.fps :as fps]\n            [chia.view.impl :as impl]\n            [chia.util :as u]))\n\n(def -batch react-dom/unstable_batchedUpdates)\n\n(def -raf (or (j/get js/window :requestAnimationFrame)\n              (j/get js/window :webkitRequestAnimationFrame)\n              (j/get js/window :mozRequestAnimationFrame)\n              (j/get js/window :oRequestAnimationFrame)\n              (j/get js/window :msRequestAnimationFrame)\n              (fn [cb]\n                (js/setTimeout cb (/ 1000 60)))))\n\n;; When true, updates will not be queued.\n(defonce ^:dynamic *immediate-updates* false)\n\n(defonce to-render (volatile! #{}))\n\n(defn dequeue! [view]\n  (j/assoc! view .-chia$toUpdate false))\n\n;;;;;;;;;;;;;;;;;;\n;;\n;; Render loop\n\n(defn- flush* []\n  (when-let [views (seq @to-render)]\n    (vreset! to-render #{})\n    (doseq [c views]\n      (when (and ^boolean (j/get c .-chia$toUpdate)\n                 (not ^boolean (j/get c .-chia$unmounted)))\n        (j/call c :forceUpdate)))))\n\n(defn flush!\n  \"Render all queued updates immediately.\"\n  []\n  (-batch flush*))\n\n(defn force-update\n  \"Force-updates `view` immediately.\"\n  [view]\n  (vswap! to-render disj view)\n  (j/call view :forceUpdate))\n\n(defn schedule-update!\n  [view]\n  \"Queues a force-update for `component`\"\n  (if (true? *immediate-updates*)\n    (force-update view)\n    (do\n      (j/assoc! view .-chia$toUpdate true)\n      (vswap! to-render conj view)\n      (-raf flush!))))\n\n(defn apply-sync!\n  \"Wraps function `f` to flush the render loop before returning.\"\n  [f]\n  (fn [& args]\n    (let [result (apply f args)]\n      (flush!)\n      result)))"]}