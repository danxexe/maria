{
"version":3,
"file":"goog.dom.browserrange.operarange.js",
"lineCount":39,
"mappings":"AAuBAA,IAAAC,QAAA,CAAa,kCAAb,CAAA;AAEAD,IAAAE,QAAA,CAAa,gCAAb,CAAA;AAWA;;;;;;AAAAF,IAAAG,IAAAC,aAAAC,WAAA,GAAmCC,QAAQ,CAACC,KAAD,CAAQ;AACjDP,MAAAG,IAAAC,aAAAI,SAAAC,KAAA,CAAoC,IAApC,EAA0CF,KAA1C,CAAA;AADiD,CAAnD;AAGAP,IAAAU,SAAA,CAAcV,IAAAG,IAAAC,aAAAC,WAAd,EAAgDL,IAAAG,IAAAC,aAAAI,SAAhD,CAAA;AAQA;;;;AAAAR,IAAAG,IAAAC,aAAAC,WAAAM,uBAAA,GAA0DC,QAAQ,CAACC,IAAD,CAAO;AACvE,SAAO,IAAIb,IAAAG,IAAAC,aAAAC,WAAJ,CACHL,IAAAG,IAAAC,aAAAI,SAAAM,uBAAA,CAAsDD,IAAtD,CADG,CAAP;AADuE,CAAzE;AAcA;;;;;;;AAAAb,IAAAG,IAAAC,aAAAC,WAAAU,gBAAA,GAAmDC,QAAQ,CACvDC,SADuD,EAC5CC,WAD4C,EAC/BC,OAD+B,EACtBC,SADsB,CACX;AAC9C,SAAO,IAAIpB,IAAAG,IAAAC,aAAAC,WAAJ,CACHL,IAAAG,IAAAC,aAAAI,SAAAa,wBAAA,CACIJ,SADJ,EACeC,WADf,EAC4BC,OAD5B,EACqCC,SADrC,CADG,CAAP;AAD8C,CADhD;AASA,iBAAApB,IAAAG,IAAAC,aAAAC,WAAAiB,UAAAC,eAAA,GAA4DC,QAAQ,CAChEC,SADgE,EACrDC,QADqD,CAC3C;AAGvBD,WAAAE,SAAA,CAAmB,IAAAC,aAAA,EAAnB,EAAwC,IAAAC,eAAA,EAAxC,CAAA;AACA,MAAI,IAAAC,WAAA,EAAJ,IAAyB,IAAAF,aAAA,EAAzB,IACI,IAAAG,aAAA,EADJ,IAC2B,IAAAF,eAAA,EAD3B;AAEEJ,aAAAO,OAAA,CAAiB,IAAAF,WAAA,EAAjB,EAAoC,IAAAC,aAAA,EAApC,CAAA;AAFF;AAKA,MAAIN,SAAAQ,WAAJ,IAA4B,CAA5B;AACER,aAAAS,SAAA,CAAmB,IAAAC,OAAnB,CAAA;AADF;AATuB,CADzB;;",
"sources":["goog/dom/browserrange/operarange.js"],
"sourcesContent":["// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Definition of the Opera specific range wrapper.  Inherits most\n * functionality from W3CRange, but adds exceptions as necessary.\n *\n * DO NOT USE THIS FILE DIRECTLY.  Use goog.dom.Range instead.\n *\n */\n\n\ngoog.provide('goog.dom.browserrange.OperaRange');\n\ngoog.require('goog.dom.browserrange.W3cRange');\n\n\n\n/**\n * The constructor for Opera specific browser ranges.\n * @param {Range} range The range object.\n * @constructor\n * @extends {goog.dom.browserrange.W3cRange}\n * @final\n */\ngoog.dom.browserrange.OperaRange = function(range) {\n  goog.dom.browserrange.W3cRange.call(this, range);\n};\ngoog.inherits(goog.dom.browserrange.OperaRange, goog.dom.browserrange.W3cRange);\n\n\n/**\n * Creates a range object that selects the given node's text.\n * @param {Node} node The node to select.\n * @return {!goog.dom.browserrange.OperaRange} A Opera range wrapper object.\n */\ngoog.dom.browserrange.OperaRange.createFromNodeContents = function(node) {\n  return new goog.dom.browserrange.OperaRange(\n      goog.dom.browserrange.W3cRange.getBrowserRangeForNode(node));\n};\n\n\n/**\n * Creates a range object that selects between the given nodes.\n * @param {Node} startNode The node to start with.\n * @param {number} startOffset The offset within the node to start.\n * @param {Node} endNode The node to end with.\n * @param {number} endOffset The offset within the node to end.\n * @return {!goog.dom.browserrange.OperaRange} A wrapper object.\n */\ngoog.dom.browserrange.OperaRange.createFromNodes = function(\n    startNode, startOffset, endNode, endOffset) {\n  return new goog.dom.browserrange.OperaRange(\n      goog.dom.browserrange.W3cRange.getBrowserRangeForNodes(\n          startNode, startOffset, endNode, endOffset));\n};\n\n\n/** @override */\ngoog.dom.browserrange.OperaRange.prototype.selectInternal = function(\n    selection, reversed) {\n  // Avoid using addRange as we have to removeAllRanges first, which\n  // blurs editable fields in Opera.\n  selection.collapse(this.getStartNode(), this.getStartOffset());\n  if (this.getEndNode() != this.getStartNode() ||\n      this.getEndOffset() != this.getStartOffset()) {\n    selection.extend(this.getEndNode(), this.getEndOffset());\n  }\n  // This can happen if the range isn't in an editable field.\n  if (selection.rangeCount == 0) {\n    selection.addRange(this.range_);\n  }\n};\n"],
"names":["goog","provide","require","dom","browserrange","OperaRange","goog.dom.browserrange.OperaRange","range","W3cRange","call","inherits","createFromNodeContents","goog.dom.browserrange.OperaRange.createFromNodeContents","node","getBrowserRangeForNode","createFromNodes","goog.dom.browserrange.OperaRange.createFromNodes","startNode","startOffset","endNode","endOffset","getBrowserRangeForNodes","prototype","selectInternal","goog.dom.browserrange.OperaRange.prototype.selectInternal","selection","reversed","collapse","getStartNode","getStartOffset","getEndNode","getEndOffset","extend","rangeCount","addRange","range_"]
}
