{"version":3,"sources":["lark/eval.cljs"],"mappings":"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","names":["lark.eval/*cljs-warnings*","js/lark","js/lark.eval","js/lark.eval.c-state","lark.eval/c-state","cljs.js.empty_state.cljs$core$IFn$_invoke$arity$0","js/lark.eval.c-env","lark.eval/c-env","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","js/lark.eval.repl-specials","lark.eval/repl-specials","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","lark.eval/swap-repl-specials!","seq65218","G__65219","cljs.core/first","cljs.core/next","self__4717__auto__","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","lark.eval/c-opts","c-state","env","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","shadow.cljs.bootstrap.browser/load","cljs.js/js-eval","cljs.core/deref","lark.eval/get-ns","ns","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","lark.eval/toggle-macros-ns","sym","s","clojure.string/ends-with?","clojure.string/replace","G__65238","lark.eval/resolve-var","js/Error","lark.eval.resolve_var.cljs$core$IFn$_invoke$arity$3","c-env","*compiler*-orig-val__65243","*compiler*-temp-val__65244","cljs.env/*compiler*","cljs.analyzer.resolve_var.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","or__4131__auto__","lark.eval/var-value","the-var","clojure.string.split.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/munge","cljs.core/to-array","goog.object/getValueByKeys","js/window","G__65246","lark.eval/resolve-symbol","lark.eval.resolve_symbol.cljs$core$IFn$_invoke$arity$3","lark.eval/ensure-ns!","cljs.core/contains?","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__65248","G__65249","G__65250","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/List","lark.eval/eval","lark.eval/->macro-sym","ns?","cljs.core/namespace","cljs.core/name","name","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","lark.eval/elide-quote","x","G__65251","cljs.core/seq?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/second","cljs.core/with-meta","c-state__65195__auto__","c-env__65196__auto__","source__65197__auto__","p__65252","vec__65253","seq__65254","first__65255","_","args__65198__auto__","&source","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","lark.eval.swap_repl_specials_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","lark.eval/in-ns","namespace","cljs.core/Symbol","G__65256","G__65257","G__65258","p__65259","vec__65260","seq__65261","first__65262","lark.eval/ns","body","G__65264","G__65265","G__65266","cljs.core/cons","lark.eval/repl-special","special-sym","special-source","temp__5720__auto__","source","cljs.core/meta","clojure.string/replace-first","cljs.core/re-pattern","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/count","e65267","e","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","js/console","p__65268","map__65269","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","lark.eval/dec-pos","line","column","pos","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p__65272","p__65273","map__65275","map__65276","lark.eval/relative-pos","target-line","target-column","target","start-line","start-col","cljs.core/not","G__65283","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/+","lark.eval/warning-handler","form","warning-type","extra","cljs.analyzer/*cljs-warnings*","G__65289","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","cljs.core/select-keys","cljs.core/native-satisfies?","cljs.core/IMeta","G__65293","lark.eval/stack-error-position","error","vec__65295","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","G__65298","obj65299","k65300","obj65301","applied-science.js-interop.impl/in?*","js/undefined","cljs.core/re-find","cljs.core/rest","js/parseInt","p__65304","map__65305","lark.eval/mapped-cljs-position","source-map","e65309","G__65310","goog.crypt.base64/decodeString","js/JSON.parse","cljs.source_map.decode.cljs$core$IFn$_invoke$arity$1","G__65313","cljs.core.subseq.cljs$core$IFn$_invoke$arity$3","cljs.core/<=","cljs.core/last","clojure.set/rename-keys","p__65321","map__65323","lark.eval/add-error-position","position","kind","start-position","result","G__65339","and__4120__auto__","G__65340","cljs.core/Keyword","G__65341","cljs.core/ex-cause","cljs.core/ex-data","G__65353","js/lark.eval.cljs-cache","lark.eval/cljs-cache","G__65364","lark.eval/compile-str","p__65373","map__65378","lark.eval.compile_str.cljs$core$IFn$_invoke$arity$4","file-name","opts","the-ns","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","*cljs-warning-handlers*-orig-val__65380","*data-readers*-orig-val__65381","*cljs-warning-handlers*-temp-val__65382","*data-readers*-temp-val__65383","cljs.analyzer/*cljs-warning-handlers*","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","cljs.tools.reader/*data-readers*","cljs.tagged-literals/*cljs-data-readers*","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.js.compile_str.cljs$core$IFn$_invoke$arity$5","p__65384","map__65385","compiled-js-with-source-map","vec__65387","compiled-js","cljs.core/reset!","G__65401","lark.eval.eval.cljs$core$IFn$_invoke$arity$3","lark.eval.eval.cljs$core$IFn$_invoke$arity$4","map__65419","map__65420","repl-special?","start-ns","G__65426","*cljs-warning-handlers*-orig-val__65428","*data-readers*-orig-val__65429","*cljs-warning-handlers*-temp-val__65430","*data-readers*-temp-val__65431","map__65436","G__65439","e65441","*ns*-orig-val__65442","*ns*-temp-val__65443","cljs.core/*ns*","js/eval","p1__65392#","cljs.js.eval.cljs$core$IFn$_invoke$arity$4","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","lark.eval/read-string-indexed","reader","cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$1","forms","cljs.tools.reader.read.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","lark.eval/eval-forms","*cljs-warnings*-orig-val__65452","*cljs-warnings*-temp-val__65453","intermediate-values","map__65459","remaining","cljs.core/empty?","lark.eval/read-src","src","resolve-symbol-orig-val__65465","*data-readers*-orig-val__65466","*alias-map*-orig-val__65467","*ns*-orig-val__65468","resolve-symbol-temp-val__65469","p1__65464#","*data-readers*-temp-val__65470","*alias-map*-temp-val__65471","*ns*-temp-val__65472","cljs.tools.reader/resolve-symbol","cljs.tools.reader/*alias-map*","e65473","G__65477","lark.eval/eval-str","lark.eval.eval_str.cljs$core$IFn$_invoke$arity$4","map__65478","value"],"sourcesContent":["(ns lark.eval\n  (:refer-clojure :exclude [eval])\n  (:require [cljs.js :as cljs]\n            [cljs.tagged-literals :as tagged-literals]\n            [cljs.tools.reader :as r]\n            [cljs.tools.reader.reader-types :as rt]\n            [cljs.analyzer :as ana :refer [*cljs-warning-handlers*]]\n            [shadow.cljs.bootstrap.browser :as boot]\n            [goog.object :as gobj]\n            [clojure.string :as string]\n            [goog.crypt.base64 :as base64]\n            [cljs.source-map :as sm]\n            [clojure.string :as str]\n            [cljs.env :as env]\n            [clojure.set :as set]\n            [applied-science.js-interop :as j])\n  (:require-macros [lark.eval :refer [defspecial]]))\n\n(def ^:dynamic *cljs-warnings* nil)\n\n(defonce c-state (cljs/empty-state))\n(defonce c-env (atom {:ns (symbol \"cljs.user\")}))\n\n(defonce repl-specials {})\n\n(defn swap-repl-specials!\n  \"Mutate repl specials available to the eval fns in this namespace.\"\n  [f & args]\n  (set! repl-specials (apply f repl-specials args)))\n\n(defn c-opts\n  [c-state env]\n  {:load          (partial boot/load c-state)\n   :eval          cljs/js-eval\n   :ns            (:ns @env)\n   :context       :expr\n   :source-map    true\n   :def-emits-var true})\n\n(defn get-ns [c-state ns] (get-in @c-state [:cljs.analyzer/namespaces ns]))\n\n(defn toggle-macros-ns [sym]\n  (let [s (str sym)]\n    (symbol\n     (if (string/ends-with? s \"$macros\")\n       (string/replace s \"$macros\" \"\")\n       (str s \"$macros\")))))\n\n(defn resolve-var\n  ([sym]\n   (resolve-var c-state c-env sym))\n  ([c-state c-env sym]\n   (binding [cljs.env/*compiler* c-state]\n     (ana/resolve-var (assoc @cljs.env/*compiler* :ns (get-ns c-state (or (:ns @c-env) 'cljs.user))) sym))))\n\n(defn var-value [the-var]\n  (->> (string/split (:name the-var) #\"[\\./]\")\n       (map munge)\n       (to-array)\n       (apply gobj/getValueByKeys js/window)))\n\n(defn resolve-symbol\n  ([sym] (resolve-symbol c-state c-env sym))\n  ([c-state c-env sym]\n   (:name (resolve-var c-state c-env sym))))\n\n(declare eval eval-forms)\n\n(defn ensure-ns!\n  \"Create namespace if it doesn't exist\"\n  [c-state c-env ns]\n  (when-not (contains? (get @c-state :cljs.analyzer/namespaces) ns)\n    (eval c-state c-env `(~'ns ~ns))))\n\n(defn ->macro-sym [sym]\n  (let [ns? (namespace sym)\n        ns (or ns? (name sym))\n        name (if ns? (name ns) nil)]\n    (if (string/ends-with? ns \"$macros\")\n      ns\n      (if ns? (symbol (str ns \"$macros\") name)\n              (symbol (str ns \"$macros\"))))))\n\n(defn elide-quote [x]\n  (cond-> x\n          (and (seq? x) (= 'quote (first x))) (second)))\n\n(defspecial in-ns\n  \"Switch to namespace\"\n  [c-state c-env namespace]\n  (let [namespace (elide-quote namespace)]\n    (when-not (symbol? namespace) (throw (js/Error. \"`in-ns` must be passed a symbol.\")))\n    (if (contains? (get @c-state :cljs.analyzer/namespaces) namespace)\n      {:ns namespace}\n      (eval c-state c-env `(~'ns ~namespace)))))\n\n(defspecial ns\n  \"Wraps `ns` to return :ns in result map\"\n  [c-state c-env & body]\n  (-> (eval c-state c-env (with-meta (cons 'ns body) {::skip-repl-special true}))\n      (assoc :ns (first body))))\n\n(defn repl-special [c-state c-env body]\n  (let [special-sym (first body)\n        f (get repl-specials special-sym)\n        special-source (when-let [source (:source (meta body))]\n                         (as-> source source\n                               (str/replace-first source (re-pattern (str \"[^]+\" (str special-sym))) \"\")\n                               (subs source 0 (dec (count source)))))]\n    (try (f c-state c-env special-source body)\n         (catch js/Error e\n           (prn \"repl-special error\" body)\n           (.error js/console e)\n           {:error e}))))\n\n(defn dec-pos\n  \"Position information from the ClojureScript reader is 1-indexed - decrement line and column.\"\n  [{:keys [line column] :as pos}]\n  (assoc pos\n    :line (dec line)\n    :column (dec column)))\n\n(defn relative-pos [{target-line   :line\n                     target-column :column\n                     :as           target}\n                    {start-line :line\n                     start-col  :column}]\n  (if-not start-line\n    target\n    (cond-> (update target :line + start-line)\n            (= target-line start-line) (update :column + start-col))))\n\n(defn warning-handler\n  \"Collect warnings in a dynamic var\"\n  [form source warning-type env extra]\n  (when (ana/*cljs-warnings* warning-type)\n    ;; note - not including `env` in warnings maps, because it is so large and can't be printed.\n    ;;        also unsure of memory implications.\n    (some-> *cljs-warnings*\n            (swap! conj {:type             warning-type\n                         :warning-position (relative-pos (-> (select-keys env [:line :column])\n                                                             (dec-pos))\n                                                         (when (satisfies? IMeta form) (some-> (meta form)\n                                                                                               (dec-pos))))\n                         :extra            extra\n                         :source           source\n                         :form             form}))))\n\n(defn stack-error-position [error]\n  (let [[line column] (some->> (j/get error :stack)\n                               (re-find #\"<anonymous>:(\\d+)(?::(\\d+))\")\n                               (rest)\n                               (map js/parseInt))]\n    {:line   line\n     :column column}))\n\n(defn mapped-cljs-position [{:keys [line column]} source-map]\n  (when-let [source-map (try (some-> (base64/decodeString source-map)\n                                     (js/JSON.parse)\n                                     (sm/decode))\n                             (catch :default e nil))]\n    (some-> (get source-map (dec line))\n            (subseq <= column)\n            (last)\n            (second)\n            (last)\n            (select-keys [:line :col])\n            (set/rename-keys {:col :column}))))\n\n(defn add-error-position [{:keys [error error/position error/kind start-position source-map] :as result}]\n  (cond-> result\n          (and error (nil? position)) (assoc :error/position\n                                             (case kind :compile (some-> (ex-cause error)\n                                                                         (ex-data)\n                                                                         (select-keys [:line :column])\n                                                                         (dec-pos)\n                                                                         (relative-pos start-position))\n                                                        :eval (some-> (stack-error-position error)\n                                                                      (mapped-cljs-position source-map)\n                                                                      (relative-pos start-position))\n                                                        nil))))\n(defonce cljs-cache (atom {}))\n\n(defn compile-str\n  ([c-state c-env source] (compile-str c-state c-env source {}))\n  ([c-state c-env source {:keys [form\n                                 file-name\n                                 opts\n                                 start-position]}]\n   (let [the-ns (:ns @c-env)\n         opts (merge (c-opts c-state c-env) opts)\n         file-name (or file-name (str (string/replace (str the-ns) \".\" \"/\") \"/\" (gensym \"cljs_live_\") (if (string/ends-with? (str the-ns) \"$macros\")\n                                                                                                        \".clj\"\n                                                                                                        \".cljs\")))\n         result (atom nil)]\n     (binding [*cljs-warning-handlers* [(partial warning-handler form source)]\n               r/*data-readers* (merge r/*data-readers*\n                                       tagged-literals/*cljs-data-readers*)]\n       (swap! cljs-cache assoc file-name source)\n       (cljs/compile-str c-state source file-name opts\n                         (fn [{error                       :error\n                               compiled-js-with-source-map :value}]\n                           (let [[compiled-js source-map] (clojure.string/split compiled-js-with-source-map #\"\\n//#\\ssourceURL[^;]+;base64,\")]\n\n                             (->> {:source         source\n                                   :form           form\n                                   :start-position start-position}\n                                  (merge (if error\n                                           {:error      error\n                                            :error/kind :compile}\n                                           {:compiled-js compiled-js\n                                            :source-map  source-map\n                                            :env         @c-env}))\n                                  (add-error-position)\n                                  (reset! result)))))\n       @result))))\n\n(defn eval\n  \"Eval a single form. Arguments:\n   c-state - a cljs compiler state atom\n   c-env   - an atom for tracking the compiler environment;\n             must contain an :ns key with the current namespace (as a symbol)\n\n  Updates the `c-env` atom if the current namespace changes during eval.\n\n  Eval returns a map containing:\n\n  :value or :error - depending on the result of evaluation\n  :error/position  - the 0-indexed position of the error, if present\n  :compiled-js     - the javascript source emitted by the compiler\n  :source          - the source code string that was evaluated\n  :source-map      - the base64-encoded source-map string\n  :env             - the compile environment, a map containing :ns (current namespace)\"\n  ([form] (eval c-state c-env form))\n  ([c-state c-env form] (eval c-state c-env form {}))\n  ([c-state c-env form opts]\n   (let [repl-special? (and (seq? form)\n                            (contains? repl-specials (first form))\n                            (not (::skip-repl-special (meta form))))\n         opts (merge (c-opts c-state c-env) opts)\n         start-ns (:ns opts)\n         {:keys [source] :as start-position} (when (satisfies? IMeta form)\n                                               (some-> (meta form) (dec-pos)))\n         {:keys [ns] :as result}\n         (if repl-special?\n           (repl-special c-state c-env form)\n           (binding [*cljs-warning-handlers* [(partial warning-handler form source)]\n                     r/*data-readers* (merge r/*data-readers*\n                                             tagged-literals/*cljs-data-readers*)]\n             (if source\n               (let [{:keys [compiled-js\n                             error] :as result} (compile-str c-state c-env source {:form           form\n                                                                                   :opts           opts\n                                                                                   :start-position start-position})]\n                 (cond-> result\n                         (not error) (-> (merge (try {:value (binding [*ns* start-ns]\n                                                               (js/eval compiled-js))}\n                                                     (catch js/Error e {:error      e\n                                                                        :error/kind :eval})))\n                                         (add-error-position))))\n               (let [result (atom nil)]\n\n                 (cljs/eval c-state form opts #(reset! result %))\n                 @result))))]\n     (when (and (some? ns) (not= ns (:ns @c-env)))\n       (swap! c-env assoc :ns ns))\n     result)))\n\n(defn read-string-indexed\n  \"Read string using indexing-push-back-reader, for errors with location information.\"\n  [s]\n  (when (and s (not= \"\" s))\n    (let [reader (rt/source-logging-push-back-reader s)]\n      (loop [forms []]\n        (let [form (r/read {:eof ::eof} reader)]\n          (if (= form ::eof)\n            forms\n            (recur (conj forms form))))))))\n\n(defn eval-forms\n  \"Eval a list of forms. Stops at the first error.\n\n  Returns the result of the last form. A vector of earlier results is returned in\n  the :intermediate-values key.\"\n  [c-state c-env forms opts]\n  (binding [*cljs-warnings* (or *cljs-warnings* (atom []))]\n    (loop [forms forms\n           intermediate-values []]\n      (let [{:keys [error] :as result} (eval c-state c-env (first forms) opts)\n            remaining (rest forms)]\n        (if (or error (empty? remaining))\n          (assoc result :warnings @*cljs-warnings*\n                        :intermediate-values intermediate-values)\n          (recur remaining (conj intermediate-values result)))))))\n\n(defn read-src\n  \"Read src using indexed reader.\"\n  [c-state c-env src]\n  (binding [r/resolve-symbol #(resolve-symbol c-state c-env %)\n            r/*data-readers* (merge r/*data-readers*\n                                    tagged-literals/*cljs-data-readers*)\n            r/*alias-map* (get-in @c-state [:cljs.analyzer/namespaces (:ns @c-env) :requires])\n            *ns* (:ns @c-env)]\n    (try {:value (read-string-indexed src)}\n         (catch js/Error e\n           {:error      e\n            :error/kind :reader}))))\n\n(defn eval-str\n  \"Eval string by first reading all top-level forms, then eval'ing them one at a time.\n  Stops at the first error.\"\n  ([src] (eval-str c-state c-env src {}))\n  ([c-state c-env src] (eval-str c-state c-env src {}))\n  ([c-state c-env src opts]\n   (let [{:keys [error value] :as result} (read-src c-state c-env src)]\n     (merge (if error\n              result\n              (eval-forms c-state c-env value opts))\n            {:source src}))))\n\n"]}