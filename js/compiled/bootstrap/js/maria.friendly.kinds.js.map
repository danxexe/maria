{"version":3,"sources":["maria/friendly/kinds.cljs"],"mappings":";;AAEA,AAAA;AAAA;;;AAAA,AAAaM;;AAAb;;;AAAA,AACGJ,AAAKK;AADR,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACQA,AAAAA;AADR,AACQA,AAAAA;;AADR,AAAAP,AAAA,AAAA,AAAA,AAAA,AACQO,AAAAA;AADRN,AAAA,AAAAC,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACQM,AAAAA;;AADR,AAAAH,AAAA,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AACQG,AAAAA;;AADR,AAAA,AAAAF,AAAA,AACQE;;;;;;AADR,AAGA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAuBL,AAAA,AAAMC,AAAMC;AAAZ,AACE,AAAI,AAAK,AAAAC,AAAUD,AAAO,AAACE,AAAUJ,AAAME;AACzCA;;AACA,AACE,AAACG,AAAMH;AADT;;AAAA,AAEE,AAAQA;AAFV;;AAAA,AAGE,AAAAC,AAAUD;AAHZ;;AAAA,AAIE,AAACI,AAAKJ;AAJR;;AAAA,AAKE,AAACK,AAAML;AALT;;AAAA,AAME,AAACM,AAAKN;AANR;;AAAA,AAOE,AAACO,AAAKP;AAPR;;AAAA,AAQE,AAACQ,AAAIR;AARP;;AAAA,AASE,AAAA,AAAMA;AATR;;AAAA,AAUE,AAASA;AAVX;;AAAA,AAWE,AAACS,AAAKT;AAXR;;AAAA,AAYE,AAASA;AAZX;;AAAA,AAaE,AAAAU,AAASV;AAbX;;AAAA,AAcE,AAAOA;AAdT;;AAAA,AAeE,AAACW,AAAQX;AAfX;;AAAA,AAgBE,AAACY,AAAQZ;AAhBX;;AAAA,AAiBE,AAAWa,AAAKb;AAjBlB;;AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;AAoBJ;;;AAAA,AAAMc,AAEHd;AAFH,AAGE,AAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAe,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAYpB,AAAAA,AAAKI,AAAAA,AAAAA,AAAAA,AAAAA;AACnB,AAACR,AAAIQ;;AACL,AAAA,AAAA,AAACiB,AAAOnB,AAAO,AAACC,AAAKC,AAAa,AAACkB,AAAKlB","names":["x__4433__auto__","m__4434__auto__","maria.friendly.kinds/doc","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","maria.friendly.kinds/IDoc","this","maria.friendly.kinds/kinds","maria.friendly.kinds/kind","thing","cljs.core/Keyword","cljs.core/contains?","cljs.core/char?","cljs.core/seq?","cljs.core/list?","cljs.core/map?","cljs.core/var?","cljs.core/fn?","cljs.core/set?","cljs.core/Symbol","cljs.core/vector?","cljs.core/object?","cljs.core/Atom","maria.friendly.kinds/what-is","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","cljs.core/type"],"sourcesContent":["(ns maria.friendly.kinds)\n\n(defprotocol IDoc\n  (doc [this] \"Return a docstring for type\"))\n\n(def kinds\n  {:maria.kinds/character    {:doc \"a character: a unit of writing (letter, emoji, and so on)\"}\n   :maria.kinds/false        {:doc \"false: the Boolean value 'false'\"}\n   :maria.kinds/function     {:doc \"a function: something you call with input that returns output\"}\n   :maria.kinds/macro        {:doc \"a macro: a function that transforms source code before it is evaluated.\"}\n   :maria.kinds/keyword      {:doc \"a keyword: a special symbolic identifier\"}\n   :maria.kinds/list         {:doc \"a list: a sequence, possibly 'lazy'\"}\n   :maria.kinds/map          {:doc \"a map: a collection of key/value pairs, where each key 'maps' to its corresponding value\"}\n   :maria.kinds/nil          {:doc \"nil: a special value meaning nothing\"}\n   :maria.kinds/number       {:doc \"a number: it can be whole, a decimal, or even a ratio\"}\n   :maria.kinds/sequence     {:doc \"a sequence: a sequence of values, each followed by the next\"}\n   :maria.kinds/set          {:doc \"a set: a collection of unique values\"}\n   :maria.kinds/string       {:doc \"a string: a run of characters that can make up a text\"}\n   :maria.kinds/symbol       {:doc \"a symbol: a name that usually refers to something\"}\n   :maria.kinds/true         {:doc \"true: the Boolean value 'true'\"}\n   :maria.kinds/vector       {:doc \"a vector: a collection of values, indexable by number\"}\n   :maria.kinds/object       {:doc \"a javascript object: a collection of key/value pairs\"}\n   :maria.kinds/special-form {:doc \"a special form: a primitive which is evaluated in a special way\"}\n   :maria.kinds/atom         {:doc \"an Clojure atom, a way to manage data that can change\"}\n   :maria.kinds/var          {:doc \"a Clojure var\"}\n   :maria.kinds/comment      {:doc \"a comment: any text beginning with `;` is ignored by the computer, useful for explaining or annotating code.\"}\n   :maria.kinds/uneval       {:doc \"uneval: adding `#_` in front of any expression will cause it to be completely ignored by the computer, like a comment.\"}})\n\n(defn kind [thing]\n  (if (and (keyword? thing) (contains? kinds thing))\n    thing\n    (cond\n      (char? thing) :maria.kinds/character\n      (false? thing) :maria.kinds/false\n      (keyword? thing) :maria.kinds/keyword\n      (seq? thing) :maria.kinds/sequence\n      (list? thing) :maria.kinds/list\n      (map? thing) :maria.kinds/map\n      (var? thing) :maria.kinds/var\n      (fn? thing) :maria.kinds/function\n      (nil? thing) :maria.kinds/nil\n      (number? thing) :maria.kinds/number\n      (set? thing) :maria.kinds/set\n      (string? thing) :maria.kinds/string\n      (symbol? thing) :maria.kinds/symbol\n      (true? thing) :maria.kinds/true\n      (vector? thing) :maria.kinds/vector\n      (object? thing) :maria.kinds/object\n      (instance? Atom thing) :maria.kinds/atom\n      :else nil)))\n\n(defn what-is\n  \"Returns a string describing what kind of thing `thing` is.\"\n  [thing]\n  (if (satisfies? IDoc thing)\n    (doc thing)\n    (get-in kinds [(kind thing) :doc] (type thing))))"]}