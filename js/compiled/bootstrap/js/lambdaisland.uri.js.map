{"version":3,"sources":["lambdaisland/uri.cljc"],"mappings":"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","names":["lambdaisland.uri/uri-regex","lambdaisland.uri/authority-regex","this__4385__auto__","k__4386__auto__","this__4387__auto__","k66401","else__4388__auto__","G__66423","cljs.core/Keyword","scheme","user","password","host","port","path","query","fragment","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__66425","vec__66427","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__66400","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__66489","coll__4382__auto__","cljs.core/hash-unordered-coll","this66402","other66403","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__66529","cljs.core/keyword-identical?","expr__66530","G__66533","G__66534","G__66535","G__66536","G__66537","G__66538","G__66540","G__66541","G__66543","G__66544","G__66546","G__66547","G__66551","G__66552","G__66554","G__66555","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","self__","args66410","cljs.core/aclone","lambdaisland.uri/URI","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__66407","extmap__4424__auto__","G__66569","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","lambdaisland.uri/->URI","lambdaisland.uri/map->URI","this","kw","cljs.core.get.cljs$core$IFn$_invoke$arity$2","authority-string","G__66414","and__4120__auto__","authority","G__66418","lambdaisland.uri/match-uri","uri","vec__66570","matches","cljs.core/re-matches","_","lambdaisland.uri/match-authority","vec__66573","lambdaisland.uri/parse","vec__66576","vec__66581","lambdaisland.uri/uri","uri-like","lambdaisland.uri/absolute-path?","cljs.core/first","lambdaisland.uri/remove-dot-segments","in","clojure.string.split.cljs$core$IFn$_invoke$arity$2","out","G__66603","cljs.core/next","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","cljs.core/butlast","clojure.string.join.cljs$core$IFn$_invoke$arity$1","lambdaisland.uri/merge-paths","a","b","cljs.core/some","cljs.core/re-find","lambdaisland.uri/join*","base","ref","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","lambdaisland.uri/join","seq66625","self__4718__auto__","uris","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","lambdaisland.uri/relative?","lambdaisland.uri/absolute?","cljs.core/complement","lambdaisland.uri/edn-tag","cljs.core/PROTOCOL_SENTINEL","writer","_opts","cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic","cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic","lambdaisland.uri/edn-readers"],"sourcesContent":["(ns lambdaisland.uri\n  (:require [clojure.string :as str])\n  #?(:clj (:import clojure.lang.IFn)))\n\n\n(def uri-regex #?(:clj #\"\\A(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)?(\\?([^#]*))?(#(.*))?\\z\"\n                  :cljs #\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)?(\\?([^#]*))?(#(.*))?$\"))\n(def authority-regex #?(:clj #\"\\A(([^:]*)(:(.*))?@)?([^:]*)(:(\\d*))?\\z\"\n                        :cljs #\"^(([^:]*)(:(.*))?@)?([^:]*)(:(\\d*))?$\"))\n\n(defrecord URI [scheme user password host port path query fragment]\n  IFn\n  (#?(:clj invoke :cljs -invoke) [this kw]\n    (get this kw))\n  Object\n  (toString [this]\n    (let [authority-string (fn [user password host port]\n                             (when host\n                               (cond-> user\n                                 (and user password) (str \":\" password)\n                                 user                (str \"@\")\n                                 true                (str host)\n                                 port                (str \":\" port))))\n          authority (authority-string user password host port)]\n      (cond-> \"\"\n        scheme    (str scheme \":\")\n        authority (str \"//\" authority)\n        true      (str path)\n        query     (str \"?\" query)\n        fragment  (str \"#\" fragment)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; parse\n\n(defn- match-uri [uri]\n  (let [matches (re-matches uri-regex uri)\n        [_ _ scheme _ authority path _ query _ fragment] matches]\n    [scheme authority (when (seq path) path) query fragment]))\n\n(defn- match-authority [authority]\n  (let [matches (re-matches authority-regex authority)\n        [_ _ user _ password host _ port] matches]\n    [user password host port]))\n\n(defn parse\n  \"Parse a URI string into a lambadisland.uri.URI record.\"\n  [uri]\n  (let [[scheme authority path query fragment] (match-uri uri)]\n    (if authority\n      (let [[user password host port] (match-authority authority)]\n        (URI. scheme user password host port path query fragment))\n      (URI. scheme nil nil nil nil path query fragment))))\n\n(defn uri\n  \"Turn the given value into a lambdaisland.uri.URI record, if it isn't one\n  already. Supports String, java.net.URI.\"\n  [uri-like]\n  (if (instance? URI uri-like)\n    uri-like\n    (parse (str uri-like))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; join / resolve\n\n;; This section is based on RFC 3986\n\n(defn- absolute-path? [path]\n  (= (first path) \\/))\n\n(defn- remove-dot-segments\n  \"As per RFC 3986 section 5.2.4\"\n  [path]\n  (when path\n    (loop [in (str/split path #\"(?=/)\")\n           out []]\n      (case (first in)\n        \"/.\" (if (next in)\n               (recur (next in) out)\n               (recur nil (conj out \"/\")))\n        \"/..\" (if (next in)\n                (recur (next in) (vec (butlast out)))\n                (recur nil (conj (vec (butlast out)) \"/\")))\n        nil (str/join out)\n        (recur (next in) (conj out (first in)))))))\n\n(defn- merge-paths [a b]\n  (if (some #{\\/} a)\n    (str (re-find #?(:clj #\"\\A.*/\"\n                     :cljs #\"^.*/\") a) b)\n    (if (absolute-path? b)\n      b\n      (str \"/\" b))))\n\n(defn join*\n  \"Join two URI records as per RFC 3986. Handles relative URIs.\"\n  [base ref]\n  (if (:scheme ref)\n    (update ref :path remove-dot-segments)\n    (-> (if (:host ref)\n          (assoc ref\n                 :scheme (:scheme base)\n                 :query  (:query ref))\n          (if (nil? (:path ref))\n            (assoc base :query (some :query [ref base]))\n            (assoc base :path\n                   (remove-dot-segments\n                    (if (absolute-path? (:path ref))\n                      (:path ref)\n                      (merge-paths (:path base) (:path ref))))\n                   :query (:query ref))))\n        (assoc :fragment (:fragment ref)))))\n\n(defn join\n  \"Joins any number of URIs as per RFC3986. Arguments can be strings, they will\n  be coerced to URI records.\"\n  [& uris]\n  (reduce join* (map uri uris)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Predicates\n\n(defn relative?\n  \"Is the URI relative? Returns true if the URI does not have a scheme (protocol).\"\n  [uri]\n  (nil? (:scheme uri)))\n\n(def\n  ^{:doc\n    \"Is the URI absolute? Returns true if the URI has a scheme (protocol), and hence also an origin.\"}\n  absolute? (complement relative?))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; EDN\n\n(def edn-tag 'lambdaisland/uri)\n\n#?(:clj\n   (defmethod print-method URI [this writer]\n     (.write writer \"#\")\n     (.write writer (str edn-tag))\n     (.write writer \" \")\n     (.write writer (prn-str (.toString this))))\n\n   :cljs\n   (extend-type URI\n     IPrintWithWriter\n     (-pr-writer [this writer _opts]\n       (write-all writer \"#\" (str edn-tag) \" \" (prn-str (.toString this))))))\n\n(def\n  ^{:doc\n    \"A map that can be passed to clojure.edn/read, so tagged URI literals are\n     read back correctly.\"}\n  edn-readers {edn-tag parse})\n"]}