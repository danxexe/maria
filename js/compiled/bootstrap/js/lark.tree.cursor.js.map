{"version":3,"sources":["lark/tree/cursor.cljs"],"mappings":"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","names":["p__67179","p__67180","map__67181","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__67182","lark.tree.cursor/pos-offset","node-line","node-col","pos-line","pos-col","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","var_args","G__67200","lark.tree.cursor/path","js/Error","zipper","pos","lark.tree.cursor.path.cljs$core$IFn$_invoke$arity$3","cursor-loc","vec__67201","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","loc-at-pos","lark.tree.nav/navigate","node","fast-zip.core/node","i","loc","sticky","data","or__4131__auto__","temp__5720__auto__","inner-range","and__4120__auto__","lark.tree.node/has-edges?","lark.tree.range/inner-range","lark.tree.range/pos=","lark.tree.range/end","adjacent-loc","fast-zip.core/left","fast-zip.core/right","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","lark.tree.nav/path-node-pred","cljs.core/first","adjacent-node","G__67223","fast-zip.core/up","lark.tree.node/whitespace?","lark.tree.node/terminal-node?","lark.tree.range/within?","G__67234","lark.tree.util/guard->","lark.tree.nav/right-locs","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core/complement","lark.tree.node/newline?","G__67246","lark.tree.nav/left-locs","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","p1__67190#","cljs.core.comp.cljs$core$IFn$_invoke$arity$3","lark.tree.nav/get-path","p__67248","p__67249","vec__67250","map__67253","lark.tree.cursor/resolve-offset","line-offset","column-offset","p__67258","vec__67259","lark.tree.cursor/position","path","G__67262","cljs.core/Keyword","space-loc","cljs.core/last","lark.tree.nav/get-loc","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1","fast-zip.core/down","cljs.core/vec","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/count","cljs.core/dec","cljs.core/seq","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","G__67265","lark.tree.range.bounds.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns lark.tree.cursor\n  (:require [lark.tree.nav :as nav]\n            [fast-zip.core :as z]\n            [lark.tree.node :as n]\n            [lark.tree.range :as range]\n            [lark.tree.reader :as r]\n            [lark.tree.util :as util]))\n\n(defn pos-offset [{node-line :line\n                   node-col :column} {pos-line :line\n                                      pos-col :column}]\n  [(- pos-line node-line)\n   (if (= node-line pos-line)\n     (- pos-col node-col)\n     pos-col)])\n\n(defn path\n  ([zipper pos] (path zipper pos nil))\n  ([zipper pos cursor-loc]\n   (let [loc-at-pos (nav/navigate zipper pos)\n         node (z/node loc-at-pos)\n         [i loc sticky data] (or\n\n                              (when cursor-loc\n                                [0 cursor-loc :cursor-space (-> (pos-offset (z/node cursor-loc) pos)\n                                                                #_(update 1 (partial min 2)))])\n\n                              (when-let [inner-range (and (n/has-edges? node)\n                                                          (range/inner-range node))]\n                                (cond (range/pos= pos inner-range)\n                                      [1 loc-at-pos :inner-left]\n                                      (range/pos= pos (range/end inner-range))\n                                      [2 loc-at-pos :inner-right]))\n                              (when-let [adjacent-loc (->> [loc-at-pos (z/left loc-at-pos) (z/right loc-at-pos)]\n                                                           (remove nil?)\n                                                           (filter (comp nav/path-node-pred z/node))\n                                                           (first))]\n                                (let [adjacent-node (z/node adjacent-loc)]\n                                  (cond (range/pos= pos adjacent-node)\n                                        [3 adjacent-loc :outer-left]\n                                        (range/pos= pos (range/end adjacent-node))\n                                        [4 adjacent-loc :outer-right])))\n                              (when (some-> (z/up loc-at-pos)\n                                            (z/node)\n                                            (range/inner-range)\n                                            (range/pos= pos))\n                                [5 (z/up loc-at-pos) :inner-left])\n                              (when (and (not (n/whitespace? node))\n                                         (n/terminal-node? node)\n                                         (range/within? node pos))\n                                [6 loc-at-pos :terminal-offset (pos-offset node pos)])\n                              (when (and (nil? (z/right loc-at-pos))\n                                         (z/up loc-at-pos))\n                                [7 (z/up loc-at-pos) :inner-right])\n\n                              (when (some-> (z/left loc-at-pos)\n                                            (z/node)\n                                            (util/guard-> nav/path-node-pred)\n                                            (range/end)\n                                            (= pos))\n                                [8 (z/left loc-at-pos) :outer-right])\n\n                              (when-let [loc (first (->> (nav/right-locs loc-at-pos)\n                                                         (take-while (comp (complement n/newline?) z/node))\n                                                         (filter (comp (complement n/whitespace?) z/node))))]\n                                [9 loc :outer-left])\n                              (when-let [loc (or (some-> loc-at-pos\n                                                         (util/guard-> (comp n/newline? z/node)))\n                                                 (first (->> (nav/left-locs loc-at-pos)\n                                                             (take-while (comp (complement n/newline?) z/node))\n                                                             (filter (comp (complement n/whitespace?) z/node)))))]\n                                [10 loc :outer-right])\n                              (when-let [loc (->> [loc-at-pos (z/up loc-at-pos)]\n                                                  (keep identity)\n                                                  (filter (comp #(range/pos= node %)\n                                                                range/inner-range\n                                                                z/node))\n                                                  (first))]\n                                [11 loc :inner-left])\n                              [12 loc-at-pos :not-found])]\n     [(nav/get-path loc)\n      sticky\n      data])))\n\n(defn resolve-offset [[line-offset column-offset] {node-line :line node-col :column}]\n  {:line (+ line-offset node-line)\n   :column (if (zero? line-offset)\n             (+ node-col column-offset)\n             column-offset)})\n\n\n(defn position [zipper [path sticky data]]\n  (case sticky\n    :cursor-space\n    (let [space-loc (if (= 0 (last path))\n                      (-> (nav/get-loc zipper (drop-last path))\n                          (z/down))\n                      (-> (nav/get-loc zipper (-> (vec path)\n                                                  (update (dec (count path)) dec)\n                                                  (seq)))\n                          (z/right)))]\n      (resolve-offset data (z/node space-loc)))\n    (let [loc (nav/get-loc zipper path)\n          node (z/node loc)]\n      (assoc (case sticky\n               :outer-right (range/bounds node :right)\n               :outer-left (range/bounds node :left)\n               :inner-right (-> (range/inner-range node)\n                                (range/bounds :right))\n               :inner-left (-> (range/inner-range node)\n                               (range/bounds :left))\n               :terminal-offset (resolve-offset data node))\n        :node node))))"]}