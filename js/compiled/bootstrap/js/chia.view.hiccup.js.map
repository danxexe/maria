{"version":3,"sources":["chia/view/hiccup.cljs"],"mappings":"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","names":["chia.view.hiccup/-react-element","js/module$node_modules$react$index.createElement","chia.view.hiccup/-react-fragment","js/module$node_modules$react$index.Fragment","chia.view.hiccup/-react-element?","js/module$node_modules$react$index.isValidElement","x__4433__auto__","m__4434__auto__","chia.view.hiccup/-to-element","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","chia.view.hiccup/IElement","this","js/chia","js/chia.view","js/chia.view.hiccup","js/chia.view.hiccup.sentinel","chia.view.hiccup/sentinel","chia.view.hiccup/make-element","tag","js-props","form","start","form-count","cljs.core/count","G__57174","first-child","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core/seq?","G__57176","G__57177","G__57178","G__57179","cljs.core/vec","G__57180","G__57181","G__57182","chia.view.hiccup/to-element","out","i","G__57184","chia.view.hiccup/props?","props","%","js/Error","chia.view.hiccup/get-props","or__4131__auto__","fexpr__57188","chia.util/nilable","cljs.core/map?","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","G__57189","cljs.core/fn?","props?","chia.view.hiccup.impl.props__GT_js.cljs$core$IFn$_invoke$arity$1","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/Keyword","parsed-key","G__57190","chia.view.hiccup.impl/parse-key-memo","cljs.core/name","chia.view.hiccup.impl.props__GT_js.cljs$core$IFn$_invoke$arity$2","G__57191","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/rest","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","G__57193","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","chia.view.hiccup/update-props","seq57195","G__57196","cljs.core/first","cljs.core/next","G__57197","self__4717__auto__","el","f","args","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","G__57202","chia.view.hiccup/element","p__57203","map__57204","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","wrap-props","*wrap-props*-orig-val__57206","*wrap-props*-temp-val__57207","chia.view.hiccup.impl/*wrap-props*","js/Symbol","sym","writer","_","cljs.core/-write"],"sourcesContent":["(ns chia.view.hiccup\n  (:require [\"react\" :as react]\n            [applied-science.js-interop :as j]\n            [chia.view.hiccup.impl :as hiccup]\n            [chia.util.perf :as perf]\n            [chia.util :as u]))\n\n(def -react-element react/createElement)\n(def -react-fragment react/Fragment)\n(def -react-element? react/isValidElement)\n\n(defprotocol IElement\n  (-to-element [this] \"Returns a React element representing `this`\"))\n\n(declare to-element)\n\n(defonce ^:private sentinel #js{})\n\n(defn make-element\n  \"Returns a React element. `tag` may be a string or a React component (a class or a function).\n   Children will be read from `form` beginning at index `start`.\"\n  [tag js-props form start]\n  (let [form-count (count form)]\n    (case (- form-count start)                              ;; fast cases for small numbers of children\n      0 (-react-element tag js-props)\n      1 (let [first-child (nth form start)]\n          (if (seq? first-child)\n            ;; a single seq child should not create intermediate fragment\n            (make-element tag js-props (vec first-child) 0)\n            (-react-element tag js-props (to-element first-child))))\n      (let [out #js[tag js-props]]\n        (loop [i start]\n          (if (== i form-count)\n            (.apply -react-element nil out)\n            (do\n              (.push out (to-element (nth form i)))\n              (recur (inc i)))))))))\n\n(defonce sentinel #js{})\n\n(defn props? [props]\n  (not (identical? props sentinel)))\n\n(defn get-props\n  \"Returns props at index `i` in `form`, or a sentinel value if props were not found.\n   Props can be `nil` or a Clojure map.\n   Call `props?` on the result to determine if props were found.\n   Props can be nil or a Clojure map.\"\n  [form i]\n  {:post [(or (identical? % sentinel) ((u/nilable map?) %))]}\n  (let [props (nth form i sentinel)]\n    (if (identical? props sentinel)\n      sentinel\n      (if (and (or (nil? props) (map? props))\n               (not (satisfies? IElement props)))\n        props\n        sentinel))))\n\n(defn to-element [form]\n  (case (goog/typeOf form)\n    \"array\" (if (fn? (aget form 0))\n              (let [props (get-props form 1)\n                    props? (props? props)]\n                (make-element (aget form 0)\n                              (when props? (hiccup/props->js props))\n                              form\n                              (if props? 2 1)))\n              (make-element -react-fragment nil form 0))\n    \"object\" (cond (not (identical? \"object\" (goog/typeOf form))) form\n\n                   (vector? form) (let [tag (-nth form 0)]\n                                    (cond (keyword? tag)\n                                          (if (perf/identical? :<> tag)\n                                            (make-element -react-fragment nil form 1)\n                                            (let [parsed-key (hiccup/parse-key-memo (name tag))\n                                                  props (get-props form 1)\n                                                  props? (props? props)]\n                                              (make-element (.-tag parsed-key)\n                                                            (hiccup/props->js parsed-key (when props? props))\n                                                            form\n                                                            (if props? 2 1))))\n                                          (fn? tag) (to-element (apply tag (rest form)))\n                                          :else (throw (ex-info \"Invalid hiccup vector\" {:form form}))))\n\n                   (seq? form) (make-element -react-fragment nil form 0)\n\n                   (satisfies? IElement form) (-to-element form)\n\n                   :else (do (assert (and (not (keyword? form)) (not (map? form))))\n                             form))\n    (cond-> form\n            (satisfies? IElement form) (-to-element))))\n\n(defn update-props [el f & args]\n  {:pre [(vector? el)]}\n  (let [props (get-props el 1)\n        props? (props? props)]\n    (if props?\n      (assoc el 1 (apply f props args))\n      (into [(el 0) (apply f {} args)] (subvec el 1)))))\n\n(defn element\n  \"Converts Hiccup form into a React element. If a non-vector form\n   is supplied, it is returned untouched. Attribute and style keys\n   are converted from `dashed-names` to `camelCase` as spec'd by React.\n\n   - optional -\n   :wrap-props (fn) is applied to all props maps during parsing.\n   :create-element (fn) overrides React.createElement.\"\n  ([form]\n   (to-element form))\n  ([{:keys [wrap-props]} form]\n   (binding [hiccup/*wrap-props* wrap-props]\n     (to-element form))))\n\n\n\n;; patch IPrintWithWriter to print javascript symbols without throwing errors\n(when (exists? js/Symbol)\n  (extend-protocol IPrintWithWriter\n    js/Symbol\n    (-pr-writer [sym writer _]\n      (-write writer (str \"\\\"\" (.toString sym) \"\\\"\")))))"]}