{"version":3,"sources":["maria/eval.cljs"],"mappings":"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","names":["maria.eval/bootstrap-path","js/maria","js/maria.eval","js/maria.eval.c-state","maria.eval/c-state","lark.eval/c-state","js/maria.eval.c-env","maria.eval/c-env","lark.eval/c-env","js/maria.eval.resolve-var","maria.eval/resolve-var","lark.eval/resolve-var","js/maria.eval.-block-eval-log","maria.eval/-block-eval-log","cljs.core/volatile!","maria.eval/add-error-position","lark.eval/add-error-position","maria.eval/handle-block-error","block-id","error","eval-log","cljs.core/deref","cljs.core.get.cljs$core$IFn$_invoke$arity$2","result","cljs.core/first","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","or__4131__auto__","js/Error","p1__65490#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/cons","cljs.core/rest","js/maria.eval.eval-log","maria.eval/eval-log","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","maria.eval/eval-log-wrap","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","maria.eval/eval-form*","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","lark.eval/eval","maria.eval/eval-str*","lark.eval/eval-str","maria.eval/compile-str","lark.eval/compile-str","maria.eval/log-eval-result!","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","chia.db/unique-id","G__65502","chia.db/transact!","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","maria.eval/eval-str","source","maria.eval/eval-form","form","maria.eval/eval*","js/maria.eval.compiler-ready","maria.eval/compiler-ready","cljs.core/Delay","p__62430__auto__","kitchen-async.promise/promise-impl","resolve","reject","shadow.cljs.bootstrap.browser/init","G__65521","seq__65524","cljs.core/seq","chunk__65525","count__65526","i__65527","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","cljs.core/*eval*","cljs.core/List"],"sourcesContent":["(ns maria.eval\n  (:refer-clojure :exclude [macroexpand eval])\n  (:require [lark.eval :as e :refer [defspecial]]\n            [shadow.cljs.bootstrap.browser :as boot]\n            [chia.db :as d]\n            [kitchen-async.promise :as p]))\n\n(def bootstrap-path \"/js/compiled/bootstrap\")\n\n;;;;;;;;;;;;;\n;;\n;; Compiler state\n\n(defonce c-state e/c-state)\n(defonce c-env e/c-env)\n(defonce resolve-var e/resolve-var)\n\n;;;;;;;;;;;;;\n;;\n;; Block error handling\n\n(defonce -block-eval-log (volatile! {}))\n\n(def add-error-position e/add-error-position)\n\n(defn handle-block-error [block-id error]\n  (let [eval-log (get @-block-eval-log block-id)\n        result (-> (first eval-log)\n                   (assoc :error (or error (js/Error. \"Unknown error\"))\n                          :error/kind :eval)\n                   (e/add-error-position))]\n    (vswap! -block-eval-log update block-id #(cons result (rest %)))\n    nil))\n\n(defonce eval-log (atom (list)))\n\n(defn eval-log-wrap [f]\n  (fn [& args]\n    (let [result (apply f args)]\n      (swap! eval-log conj result)\n      result)))\n\n(def eval-form*\n  (eval-log-wrap (partial e/eval c-state c-env)))\n(def eval-str*\n  (eval-log-wrap (partial e/eval-str c-state c-env)))\n(def compile-str\n  (partial e/compile-str c-state c-env))\n\n#_(defn macroexpand-n\n    ([form] (macroexpand-n 1000 form))\n    ([depth-limit form]\n     (loop [form form\n            n 0]\n       (if (>= n depth-limit)\n         form\n         (let [expanded (ana/macroexpand-1 c-state form)]\n           (if (= form expanded)\n             expanded\n             (recur expanded (inc n))))))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;\n;; Logged eval fns\n\n(defn log-eval-result! [result]\n  (let [result (assoc result :id (d/unique-id))]\n    (d/transact! [[:db/update-attr :repl/state :eval-log (fnil conj []) result]])\n    result))\n\n(defn eval-str [source]\n  (log-eval-result! (eval-str* source)))\n\n(defn eval-form [form]\n  (log-eval-result! (eval-form* form)))\n\n(defn eval* [form]\n  (get (eval-form* form) :value))\n\n(defonce compiler-ready\n         (delay\n          (p/promise [resolve reject]\n            (boot/init\n             c-state\n             {:path         bootstrap-path\n              :load-on-init '#{maria.user\n                               cljs.spec.alpha\n                               cljs.spec.test.alpha}}\n             (fn []\n               (eval-form* '(inject 'cljs.core '{what-is   maria.friendly.kinds/what-is\n                                                 load-gist maria.user.loaders/load-gist\n                                                 load-js   maria.user.loaders/load-js\n                                                 load-npm  maria.user.loaders/load-npm\n                                                 html      chia.view.hiccup/element\n                                                 #_#_macroexpand-n maria.eval/macroexpand-n}))\n               (doseq [form ['(in-ns cljs.spec.test.alpha$macros)\n                             '(in-ns maria.user)]]\n                 (eval-form* form))\n               (resolve))))))\n\n(set! cljs.core/*eval* eval*)\n"]}