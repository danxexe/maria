{"version":3,"sources":["chia/view/impl.cljs"],"mappings":";;;;;;;AAUA,AAAA,AAAOA,AAAaC;AAApB,AACE;AAAA,AACE,AAAMC,AAAQ,AAACD,AAAAA,AAAAA;AAAf,AACE,AAAI,AAACE,AAAID;AACPA;;AACAE;;;;AAIR,AAAKC,AAAQC;AACb,AAAKC,AAA2BC;AAEhC,AAAA,AAAMC,AAAcC;AAApB,AACE,AAAAC,AAASD;AAAT,AAAA,AACS,AAASA;AACT,AAAAC,AAAiBC;;AAF1BD;;;AAOF,AAAeE,AACb,AAACC,AAAQ,AAAKC;AAAL,AAAQ,AAACC;;AAEpB,AAAA,AAAME,AAAgBH;AAAtB,AAAA,AACS,AAAI,AAACI,AAAQJ,AAAG,AAACK,AAAmBL;AAD7C;AAAA,AAAA,AAAA,AAAAE,AAAA;;;AAEE,AAAI,AAACE,AAAQJ;AAAGA;;AAAE,AAACF,AAAAA,AAAAA,AAAiBE,AAAAA;;;AAKtC,AAAA,AAAOM,AAAWC,AAAEC;AAApB,AACE,AAACC,AAAK,AAAAC,AAAOH;AAAPI,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAC,AAAAF,AAAAC;;AAAA,AAAAF,AAAAC;;AAAAtB;;AACA,AAAAyB,AAAON;AAAPO,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAH,AAAAE,AAAAC;;AAAA,AAAAF,AAAAC;;AAAA1B;;;;AAER,AAAe4B,AAAc,AAAI,AAAC7B,AAAI8B,AAAYA,AAAWC;AAE7D,AAAA;;;;;;;AAAA,AAAAC,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAApB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMoB,AAMFpC;AANJ,AAOG,AAACqC,AAAarC,AAAEoB;;;AAPnB,AAAA,AAAA,AAAMgB,AAQFpC,AAAEsC;AARN,AASG,AAAAC,AAAevC;AAAfwC,AACe;AAAqBnB,AAAEC;AAAvB,AACE,AAAImB;AAAJ;;AAEE,AAACC,AAAI,AAAAC,AAAgB,AAAAE,AAAOxB;AAAPyB,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAApB,AAAAmB,AAAAC;;AAAA,AAAAF,AAAAC;;AAAA3C;;;AAAhByC,AACgB,AAAAI,AAAO1B;AAAP2B,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAvB,AAAAsB,AAAAC;;AAAA,AAAAF,AAAAC;;AAAA9C;;;AADhB,AAAA,AAAAwC,AAAAC,AAAAD,AAAAC,AAACN,AAAAA,AAAAA;;;;;AAJzB,AAAA,AAAAC,AAAAC,AAAAD,AAAAC,AAACT,AAAAA,AAAAA;;;AATJ,AAAA,AAAA,AAAMK;;AAAN","names":["chia.view.impl/wrap-effect","f","destroy","cljs.core/fn?","js/undefined","chia.view.impl/-render","js/module$node_modules$react_dom$index.render","chia.view.impl/-unmount-component-at-node","js/module$node_modules$react_dom$index.unmountComponentAtNode","chia.view.impl/resolve-node","node-or-id","G__65637","js/document","chia.view.impl/kw-context-cache","cljs.core/memoize","k","js/module$node_modules$react$index.createContext","js/Error","chia.view.impl/lookup-context","cljs.core/object?","cljs.core/qualified-keyword?","chia.view.impl/args-not=","x","y","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","obj65646","k65647","obj65648","applied-science.js-interop.impl/in?*","obj65649","k65650","obj65651","chia.view.impl/-memoize-view","js/module$node_modules$react$index.memo","cljs.core/identity","var_args","G__65654","chia.view.impl/memoize-view","chia.view.impl.memoize_view.cljs$core$IFn$_invoke$arity$2","should-update?","G__65655","G__65656","chia.view.registry/*reload*","cljs.core/not","G__65657","G__65658","obj65659","k65660","obj65661","obj65662","k65663","obj65664"],"sourcesContent":["(ns chia.view.impl\n  (:require [\"react\" :as react]\n            [\"react-dom\" :as react-dom]\n            [applied-science.js-interop :as j]\n            [chia.reactive :as r]\n            [chia.view.registry :as registry]))\n\n\n;; Hook utils\n\n(defn- wrap-effect [f]\n  (fn []\n    (let [destroy (f)]\n      (if (fn? destroy)\n        destroy\n        js/undefined))))\n\n;; ReactDOM\n\n(def -render react-dom/render)\n(def -unmount-component-at-node react-dom/unmountComponentAtNode)\n\n(defn resolve-node [node-or-id]\n  (cond->> node-or-id\n           (string? node-or-id)\n           (.getElementById js/document)))\n\n\n;; Context\n\n(def ^:private kw-context-cache\n  (memoize (fn [k] (react/createContext))))\n\n(defn lookup-context [k]\n  {:pre [(or (object? k) (qualified-keyword? k))]}\n  (if (object? k) k (kw-context-cache k)))\n\n\n;; View memoization\n\n(defn- args-not= [x y]\n  (not= (j/get x :children)\n        (j/get y :children)))\n\n(def ^:private -memoize-view (if (fn? react/memo) react/memo identity))\n\n(defn memoize-view\n  \"Returns a memoized version of view `f` with optional `should-update?` function.\n\n  - By default, arguments are compared with cljs equality.\n  - During dev reload, all components re-render.\n  - A no-op in node.js\"\n  ([f]\n   (memoize-view f args-not=))\n  ([f should-update?]\n   (-memoize-view f\n                  (fn use-last-value? [x y]\n                    (if registry/*reload*\n                      false\n                      (not (should-update? (j/get x :children)\n                                           (j/get y :children))))))))\n\n\n"]}