{
"version":3,
"file":"goog.dom.savedcaretrange.js",
"lineCount":111,
"mappings":"AAqBAA,IAAAC,QAAA,CAAa,0BAAb,CAAA;AAEAD,IAAAE,QAAA,CAAa,YAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,UAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,qBAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,kBAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,aAAb,CAAA;AAEAF,IAAAG,eAAA,CAAoB,wBAApB,CAAA;AACAH,IAAAG,eAAA,CAAoB,gBAApB,CAAA;AAeA;;;;;AAAAH,IAAAI,IAAAC,gBAAA,GAA2BC,QAAQ,CAACC,KAAD,CAAQ;AACzCP,MAAAI,IAAAI,WAAAC,KAAA,CAAyB,IAAzB,CAAA;AAOA,iCAAA,IAAAC,cAAA,GAAqBV,IAAAW,OAAAC,mBAAA,EAArB;AAOA,iCAAA,IAAAC,YAAA,GAAmBb,IAAAW,OAAAC,mBAAA,EAAnB;AAMA,kCAAA,IAAAE,UAAA,GAAiBP,KAAAQ,WAAA,EAAjB;AAOA,6CAAA,IAAAC,KAAA,GAAYhB,IAAAI,IAAAa,aAAA,CAAsBV,KAAAW,YAAA,EAAtB,CAAZ;AAEAX,OAAAY,kBAAA,CAAwB,IAAAC,aAAA,CAAkB,IAAlB,CAAxB,EAAiD,IAAAA,aAAA,CAAkB,KAAlB,CAAjD,CAAA;AA9ByC,CAA3C;AAgCApB,IAAAqB,SAAA,CAAcrB,IAAAI,IAAAC,gBAAd,EAAwCL,IAAAI,IAAAI,WAAxC,CAAA;AASA;;;;AAAAR,IAAAI,IAAAC,gBAAAiB,UAAAC,gBAAA,GAAqDC,QAAQ,EAAG;AAC9D,MAAIjB,QAAQ,IAAZ;AACA,MAAIkB,aAAa,IAAAC,SAAA,CAAc,IAAd,CAAjB;AACA,MAAIC,WAAW,IAAAD,SAAA,CAAc,KAAd,CAAf;AACA,MAAID,UAAJ,IAAkBE,QAAlB;AACEpB,SAAA,GAAQP,IAAAI,IAAAwB,MAAAC,gBAAA,CAA+BJ,UAA/B,EAA2C,CAA3C,EAA8CE,QAA9C,EAAwD,CAAxD,CAAR;AADF;AAGA,SAAOpB,KAAP;AAP8D,CAAhE;AAiBA;;;;AAAAP,IAAAI,IAAAC,gBAAAiB,UAAAI,SAAA,GAA8CI,QAAQ,CAACC,KAAD,CAAQ;AAC5D,SAAO,IAAAf,KAAAgB,WAAA,CAAqBD,KAAA,GAAQ,IAAArB,cAAR,GAA6B,IAAAG,YAAlD,CAAP;AAD4D,CAA9D;AAaA;;;;AAAAb,IAAAI,IAAAC,gBAAAiB,UAAAW,aAAA,GAAkDC,QAAQ,CAACC,SAAD,CAAY;AACpEnC,MAAAI,IAAAgC,WAAA,CAAoB,IAAAV,SAAA,CAAc,IAAd,CAApB,CAAA;AACA1B,MAAAI,IAAAgC,WAAA,CAAoB,IAAAV,SAAA,CAAc,KAAd,CAApB,CAAA;AACA,SAAOS,SAAP;AAHoE,CAAtE;AAWA;;;AAAAnC,IAAAI,IAAAC,gBAAAiB,UAAAe,uBAAA,GAA4DC,QAAQ,CAACC,GAAD,CAAM;AACxE,MAAAvB,KAAAwB,YAAA,CAAsBD,GAAtB,CAAA;AADwE,CAA1E;AAcA;;;;;AAAAvC,IAAAI,IAAAC,gBAAAiB,UAAAmB,gBAAA,GAAqDC,QAAQ,EAAG;AAC9D,MAAInC,QAAQ,IAAZ;AACA,MAAIoC,cAAc,IAAAjB,SAAA,CAAc,CAAC,IAAAZ,UAAf,CAAlB;AACA,MAAI8B,aAAa,IAAAlB,SAAA,CAAc,IAAAZ,UAAd,CAAjB;AACA,MAAI6B,WAAJ,IAAmBC,UAAnB,CAA+B;AAC7B,QAAIC,aAAaF,WAAAG,WAAjB;AACA,QAAIC,eAAe/C,IAAAgD,MAAAC,QAAA,CAAmBJ,UAAAK,WAAnB,EAA0CP,WAA1C,CAAnB;AACA,QAAIQ,YAAYP,UAAAE,WAAhB;AACA,QAAIM,cAAcpD,IAAAgD,MAAAC,QAAA,CAAmBE,SAAAD,WAAnB,EAAyCN,UAAzC,CAAlB;AACA,QAAIO,SAAJ,IAAiBN,UAAjB;AAEE,UAAI,IAAA/B,UAAJ;AACEiC,oBAAA,EAAA;AADF;AAGEK,mBAAA,EAAA;AAHF;AAFF;AASA;;;AAAA7C,SAAA,GAAQP,IAAAI,IAAAwB,MAAAC,gBAAA,CACJgB,UADI,EACQE,YADR,EACsBI,SADtB,EACiCC,WADjC,CAAR;AAEA7C,SAAA,GAAQ,IAAA0B,aAAA,CAAkB1B,KAAlB,CAAR;AACAA,SAAA8C,OAAA,EAAA;AAjB6B,GAA/B;AAoBE,QAAApB,aAAA,EAAA;AApBF;AAsBA,SAAO1B,KAAP;AA1B8D,CAAhE;AAmCA,4BAAAP,IAAAI,IAAAC,gBAAAiB,UAAAgC,gBAAA,GAAqDC,QAAQ,EAAG;AAC9D,MAAAtB,aAAA,EAAA;AACA,MAAAjB,KAAA,GAAY,IAAZ;AAF8D,CAAhE;AAaA;;;;;AAAAhB,IAAAI,IAAAC,gBAAAiB,UAAAF,aAAA,GAAkDoC,QAAQ,CAACzB,KAAD,CAAQ;AAChE,SAAO,IAAAf,KAAAyC,UAAA,CACHzD,IAAAI,IAAAsD,QAAAC,KADG,EAEH,CAAC,KAAM5B,KAAA,GAAQ,IAAArB,cAAR,GAA6B,IAAAG,YAApC,CAFG,CAAP;AADgE,CAAlE;AAWA,sBAAAb,IAAAI,IAAAC,gBAAAuD,YAAA,GAAuC,oCAAvC;AAaA;;;;;AAAA5D,IAAAI,IAAAC,gBAAAwD,UAAA,GAAqCC,QAAQ,CAACC,IAAD,EAAOC,IAAP,CAAa;AACxD,SAAOD,IAAP,IAAeC,IAAf,IACID,IAAAE,QAAA,CAAajE,IAAAI,IAAAC,gBAAAuD,YAAb,EAAmD,EAAnD,CADJ,IAEII,IAAAC,QAAA,CAAajE,IAAAI,IAAAC,gBAAAuD,YAAb,EAAmD,EAAnD,CAFJ;AADwD,CAA1D;;",
"sources":["goog/dom/savedcaretrange.js"],
"sourcesContent":["// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview An API for saving and restoring ranges as HTML carets.\n *\n * @author nicksantos@google.com (Nick Santos)\n */\n\n\ngoog.provide('goog.dom.SavedCaretRange');\n\ngoog.require('goog.array');\ngoog.require('goog.dom');\ngoog.require('goog.dom.SavedRange');\ngoog.require('goog.dom.TagName');\ngoog.require('goog.string');\n\ngoog.forwardDeclare('goog.dom.AbstractRange');\ngoog.forwardDeclare('goog.dom.Range');\n\n\n/**\n * A struct for holding context about saved selections.\n * This can be used to preserve the selection and restore while the DOM is\n * manipulated, or through an asynchronous call. Use goog.dom.Range factory\n * methods to obtain an {@see goog.dom.AbstractRange} instance, and use\n * {@see goog.dom.AbstractRange#saveUsingCarets} to obtain a SavedCaretRange.\n * For editor ranges under content-editable elements or design-mode iframes,\n * prefer using {@see goog.editor.range.saveUsingNormalizedCarets}.\n * @param {goog.dom.AbstractRange} range The range being saved.\n * @constructor\n * @extends {goog.dom.SavedRange}\n */\ngoog.dom.SavedCaretRange = function(range) {\n  goog.dom.SavedRange.call(this);\n\n  /**\n   * The DOM id of the caret at the start of the range.\n   * @type {string}\n   * @private\n   */\n  this.startCaretId_ = goog.string.createUniqueString();\n\n  /**\n   * The DOM id of the caret at the end of the range.\n   * @type {string}\n   * @private\n   */\n  this.endCaretId_ = goog.string.createUniqueString();\n\n  /**\n   * Whether the range is reversed (anchor at the end).\n   * @private {boolean}\n   */\n  this.reversed_ = range.isReversed();\n\n  /**\n   * A DOM helper for storing the current document context.\n   * @type {goog.dom.DomHelper}\n   * @private\n   */\n  this.dom_ = goog.dom.getDomHelper(range.getDocument());\n\n  range.surroundWithNodes(this.createCaret_(true), this.createCaret_(false));\n};\ngoog.inherits(goog.dom.SavedCaretRange, goog.dom.SavedRange);\n\n\n/**\n * Gets the range that this SavedCaretRage represents, without selecting it\n * or removing the carets from the DOM.\n * @return {goog.dom.AbstractRange?} An abstract range.\n * @suppress {missingRequire,undefinedNames} circular dependency\n */\ngoog.dom.SavedCaretRange.prototype.toAbstractRange = function() {\n  var range = null;\n  var startCaret = this.getCaret(true);\n  var endCaret = this.getCaret(false);\n  if (startCaret && endCaret) {\n    range = goog.dom.Range.createFromNodes(startCaret, 0, endCaret, 0);\n  }\n  return range;\n};\n\n\n/**\n * Gets carets.\n * @param {boolean} start If true, returns the start caret. Otherwise, get the\n *     end caret.\n * @return {Element} The start or end caret in the given document.\n */\ngoog.dom.SavedCaretRange.prototype.getCaret = function(start) {\n  return this.dom_.getElement(start ? this.startCaretId_ : this.endCaretId_);\n};\n\n\n/**\n * Removes the carets from the current restoration document.\n * @param {goog.dom.AbstractRange=} opt_range A range whose offsets have already\n *     been adjusted for caret removal; it will be adjusted if it is also\n *     affected by post-removal operations, such as text node normalization.\n * @return {goog.dom.AbstractRange|undefined} The adjusted range, if opt_range\n *     was provided.\n */\ngoog.dom.SavedCaretRange.prototype.removeCarets = function(opt_range) {\n  goog.dom.removeNode(this.getCaret(true));\n  goog.dom.removeNode(this.getCaret(false));\n  return opt_range;\n};\n\n\n/**\n * Sets the document where the range will be restored.\n * @param {!Document} doc An HTML document.\n */\ngoog.dom.SavedCaretRange.prototype.setRestorationDocument = function(doc) {\n  this.dom_.setDocument(doc);\n};\n\n\n/**\n * Reconstruct the selection from the given saved range. Removes carets after\n * restoring the selection. If restore does not dispose this saved range, it may\n * only be restored a second time if innerHTML or some other mechanism is used\n * to restore the carets to the dom.\n * @return {goog.dom.AbstractRange?} Restored selection.\n * @override\n * @protected\n */\ngoog.dom.SavedCaretRange.prototype.restoreInternal = function() {\n  var range = null;\n  var anchorCaret = this.getCaret(!this.reversed_);\n  var focusCaret = this.getCaret(this.reversed_);\n  if (anchorCaret && focusCaret) {\n    var anchorNode = anchorCaret.parentNode;\n    var anchorOffset = goog.array.indexOf(anchorNode.childNodes, anchorCaret);\n    var focusNode = focusCaret.parentNode;\n    var focusOffset = goog.array.indexOf(focusNode.childNodes, focusCaret);\n    if (focusNode == anchorNode) {\n      // Compensate for the start caret being removed.\n      if (this.reversed_) {\n        anchorOffset--;\n      } else {\n        focusOffset--;\n      }\n    }\n    /** @suppress {missingRequire,undefinedNames} circular dependency */\n    range = goog.dom.Range.createFromNodes(\n        anchorNode, anchorOffset, focusNode, focusOffset);\n    range = this.removeCarets(range);\n    range.select();\n  } else {\n    // If only one caret was found, remove it.\n    this.removeCarets();\n  }\n  return range;\n};\n\n\n/**\n * Dispose the saved range and remove the carets from the DOM.\n * @override\n * @protected\n */\ngoog.dom.SavedCaretRange.prototype.disposeInternal = function() {\n  this.removeCarets();\n  this.dom_ = null;\n};\n\n\n/**\n * Creates a caret element.\n * @param {boolean} start If true, creates the start caret. Otherwise,\n *     creates the end caret.\n * @return {!Element} The new caret element.\n * @private\n */\ngoog.dom.SavedCaretRange.prototype.createCaret_ = function(start) {\n  return this.dom_.createDom(\n      goog.dom.TagName.SPAN,\n      {'id': start ? this.startCaretId_ : this.endCaretId_});\n};\n\n\n/**\n * A regex that will match all saved range carets in a string.\n * @type {RegExp}\n */\ngoog.dom.SavedCaretRange.CARET_REGEX = /<span\\s+id=\"?goog_\\d+\"?><\\/span>/ig;\n\n\n/**\n * Returns whether two strings of html are equal, ignoring any saved carets.\n * Thus two strings of html whose only difference is the id of their saved\n * carets will be considered equal, since they represent html with the\n * same selection.\n * @param {string} str1 The first string.\n * @param {string} str2 The second string.\n * @return {boolean} Whether two strings of html are equal, ignoring any\n *     saved carets.\n */\ngoog.dom.SavedCaretRange.htmlEqual = function(str1, str2) {\n  return str1 == str2 ||\n      str1.replace(goog.dom.SavedCaretRange.CARET_REGEX, '') ==\n      str2.replace(goog.dom.SavedCaretRange.CARET_REGEX, '');\n};\n"],
"names":["goog","provide","require","forwardDeclare","dom","SavedCaretRange","goog.dom.SavedCaretRange","range","SavedRange","call","startCaretId_","string","createUniqueString","endCaretId_","reversed_","isReversed","dom_","getDomHelper","getDocument","surroundWithNodes","createCaret_","inherits","prototype","toAbstractRange","goog.dom.SavedCaretRange.prototype.toAbstractRange","startCaret","getCaret","endCaret","Range","createFromNodes","goog.dom.SavedCaretRange.prototype.getCaret","start","getElement","removeCarets","goog.dom.SavedCaretRange.prototype.removeCarets","opt_range","removeNode","setRestorationDocument","goog.dom.SavedCaretRange.prototype.setRestorationDocument","doc","setDocument","restoreInternal","goog.dom.SavedCaretRange.prototype.restoreInternal","anchorCaret","focusCaret","anchorNode","parentNode","anchorOffset","array","indexOf","childNodes","focusNode","focusOffset","select","disposeInternal","goog.dom.SavedCaretRange.prototype.disposeInternal","goog.dom.SavedCaretRange.prototype.createCaret_","createDom","TagName","SPAN","CARET_REGEX","htmlEqual","goog.dom.SavedCaretRange.htmlEqual","str1","str2","replace"]
}
