{"version":3,"sources":["chia/db/core.cljs"],"mappings":";;;;;;;;AAWA,AAACA;AAED,AAAA,AAAeC;AACf,AAAA,AAAeC;AAEf,AAAKC,AAAS,AAAA,AAACC,AAAKC;AACpB,AAAKC,AAAS,AAAA,AAACF,AAAKG;AAEpB;;;AAAA,AAAMC,AAEHC,AAAGC;AAFN,AAGE,AAAA,AAACC,AAAMF,AAAGG,AAAeC,AAAMH;;AAEjC,AAAA,AAAMI,AAAYC,AAAQC;AAA1B,AACE,AAAAC,AAAA,AAAAA,AAAA,AAAWF,AAAiBC;;AAE9B,AAAA;;;AAAA,AAAAE,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAEFV;AAFJ,AAGG,AAAA,AAACY,AAAeZ;;;AAHnB,AAAA,AAAA,AAAMU,AAIFL,AAAQC;AAJZ,AAKG,AAACO,AAAO,AAACT,AAAWC,AAAQC;;;AAL/B,AAAA,AAAA,AAAMI;;AAAN,AAOA,AAAA;;;AAAA,AAAAF,AAAMO;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMI,AAEFf;AAFJ,AAGG,AAAA,AAAAgB,AAAA,AAAA,AAAA,AAAA,AAAsC,AAAA,AAAA,AAAA,AAACT,AAAAA,AAASP,AAAAA;;;AAHnD,AAAA,AAAA,AAAMe,AAIFV,AAAQC;AAJZ,AAKG,AAACW,AAAM,AAACb,AAAWC,AAAQC;;;AAL9B,AAAA,AAAA,AAAMS;;AAAN,AAOA,AAAA;;;AAAA,AAAAP,AAAMW;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAR,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMQ,AAEFnB;AAFJ,AAGG,AAAA,AAAAgB,AAAA,AAAA,AAAA,AAAA,AAAkC,AAAA,AAAA,AAAA,AAACT,AAAAA,AAASP,AAAAA;;;AAH/C,AAAA,AAAA,AAAMmB,AAIFd,AAAQC;AAJZ,AAKG,AAACc,AAAQ,AAAChB,AAAWC,AAAQC;;;AALhC,AAAA,AAAA,AAAMa;;AAAN,AAOA,AAAA,AAAME,AACHrB;AADH,AAEE,AAAA,AAAAgB,AAAA,AAAA,AAAA,AAAA,AAA8B,AAAA,AAAA,AAAA,AAACT,AAAAA,AAASP,AAAAA;;AAE1C;;;;AAAA,AAAMsB,AAGHjB,AAAQkB;AAHX,AAIE,AAAI,AAAUC,AAAQD;AACpB,AAACE,AAAM,AAAAC,AAAWrB,AAAQ,AAAA,AAAA,AAACsB,AAAYJ;;AACvCA;;;AAEJ;;;;;AAAA,AAAMK,AAIH7B,AAAGwB;AAJN,AAKE,AAAM,AAAUC,AAAQD;AAAxB,AACE,AAAA,AAACM,AAAkB9B,AAAQwB;;AAD7B;;AAEA,AAAA,AAAAO,AAACR,AAAavB,AAAGwB;;AAEnB;;;AAAA,AAAMQ,AAEHhC,AAAGwB;AAFN,AAGE,AAAMA,AAAG,AAACK,AAAW7B,AAAGwB;AAAxB,AACE,AAAU,AAAA,AAAeA;AAAzB;AAAA,AAA6B,AAAA,AAACM,AAAkB9B,AAAQwB;;;AACxD,AAAO,AAACX,AAAe,AAAA,AAAAkB,AAAA,AAACvB,AAAUR,AAASwB;;AAE/C,AAAA;AAAA,AAEA,AAAA,AAAMS,AAAS3B,AAAQkB;AAAvB,AACE,AAAAU,AAAQ,AAAA1B,AAAA,AAAAA,AAAA,AAAWF,AAAckB;AAAjC,AAAA,AAAA,AAAAU,AAAA;AAAA;;AACQ,AAAAA,AAAA,AAACC,AAAaX;;;AAExB;;;AAAA,AAAMY,AAEHpC,AAAGwB;AAFN,AAGE,AAAAa,AAAc,AAACR,AAAW7B,AAAGwB;AAA7B,AAAA,AAAAa;AAAA,AAAA,AAAAA,AAAWb;AAAX,AACE,AAAA,AAACM,AAAkB9B,AAAQwB;;AAC3B,AAAA,AAAAO,AAACE,AAASjC,AAAGwB;;AAFf;;;AAIF,AAAA;;;AAAA,AAAAf,AAAM8B;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA3B,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAM2B,AAEFvC,AAAGwB,AAAGgB;AAFV,AAGG,AAAA,AAACC,AAAIzC,AAAGwB,AAAGgB;;;AAHd,AAAA,AAAA,AAAMD,AAIFvC,AAAGwB,AAAGgB,AAAKE;AAJf,AAKG,AAAAL,AAAc,AAACR,AAAW7B,AAAGwB;AAA7B,AAAA,AAAAa;AAAA,AAAA,AAAAA,AAAWb;AAAX,AACE,AAAA,AAAA,AAACM,AAAkB9B,AAASwB,AAAGgB;;AAC/B,AAAAG,AAAA,AAAAnC,AAAA,AAAAA,AAAA,AAAAuB,AAAA,AAAY/B,AAASwB,AAAGgB,AAAME;;AAFhC;;;;AALH,AAAA,AAAA,AAAMH;;AAAN,AASA,AAAA;;;AAAA,AAAA9B,AAAMoC;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAjC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMiC,AAEF7C,AAAGwB,AAAGsB;AAFV,AAGG,AAAA,AAACC,AAAO/C,AAAGwB,AAAGsB;;;AAHjB,AAAA,AAAA,AAAMD,AAIF7C,AAAGwB,AAAGsB,AAAGJ;AAJb,AAKG,AAAAL,AAAc,AAACR,AAAW7B,AAAGwB;AAA7B,AAAA,AAAAa;AAAA,AAAA,AAAAA,AAAWb;AAAX,AACE,AAAA,AAAA,AAACM,AAAkB9B,AAASwB,AAAG,AAACE,AAAMoB;;AACtC,AAAAE,AAAA,AAAAjB,AAAY/B,AAAG,AAAA,AAAA,AAAC4B,AAAWJ,AAAIsB,AAAIJ;;AAFrC;;;;AALH,AAAA,AAAA,AAAMG;;AAAN,AASA;;;AAAA,AAAMI,AAEHjD,AAAGwB,AAAGsB;AAFT,AAGE,AAAAT,AAAc,AAACR,AAAW7B,AAAGwB;AAA7B,AAAA,AAAAa;AAAA,AAAA,AAAAA,AAAWb;AAAX,AACE,AAAA,AAAC0B,AAAkBlD,AAAQ,AAAA,AAACoD;AAADD;AAAA,AAAO,AAAA,AAAAA,AAAK3B;;AAAvC,AAA8CsB;;AAC1C,AAAAtC,AAAA,AAAAA,AAAA,AAAAuB,AAAA,AAAY/B,AAASwB,AACrB,AAAA,AAACW,AAAaX,AACd,AAAC6B,AAAiBP;;AAJxB;;;AAMF;;;AAAA,AAAAQ,AAAMK,AAEH3D;AAFH,AAAA,AAAAuD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAEyBK;AAFzB,AAAApD,AAAA+C,AAAA,AAEc/B;AAFd,AAGE,AAACqC,AACA;AAAKC,AAAEtB,AAAKuB;AAAZ,AACE,AAAC5B,AAAM2B,AAAE,AAACE,AAAQ,AAACC,AAAezB,AAAM,AAAA,AAAS,AAAC0B,AAAK1B,AAC9CuB;;AACXH,AACA,AAAApD,AAAA,AAAAA,AAAA,AAAAuB,AAAA,AAAY/B,AAASwB;;AAExB,AAAA,AAAO2C,AAAmB7D,AAAQkB,AAAGgB,AAAK4B;AAA1C,AACE,AAAU,AAACC,AAAO,AAAA7D,AAAA,AAAAA,AAAA,AAAAA,AAAA,AAAWF,AAAckC,AAAK4B;AAAhD;;AAAA,AACE,AAAO,AAAAxD,AAAW,AAAA,AAAA,AAAA,AAAA,AAAwB4B,AAA6C4B,AAAc5C;;;AAEzG,AAAA,AAAO8C,AAAWhE,AAAQkB,AAAGjB,AAAEgE,AAAEtE;AAAjC,AACE,AAAMuE,AAAM,AAAA,AAAChE,AAASP;AAAtB,AACE,AAAM,AAAA,AAAAgB,AAAA,AAAA,AAAA,AAAA,AAAkCuD,AAAAA;AAAxC,AACE,AAACL,AAAkB7D,AAAQkB,AAAGjB,AAAEgE;;AADlC;;AAEA,AAAAE,AAAQnE;AAARmE,AAAA,AAAAA,AACQ,AAAK,AAAA,AAAMD,AAAQ,AAAAC,AAAA,AAAA,AAACC,AAAgBnE,AAAEgE,AAAG7E,AAAS8B;AAD1D,AAAA,AAEQ,AAACF,AAAKrB;AAAQ,AAAAwE,AAAA,AAAA,AAACC,AAAgBH,AAAEhE,AAAGb,AAAS8B;;AAFrDiD;;;AAIJ,AAAA,AAAOE,AAAgBrE,AAAQkB,AAAGgB,AAAKoC,AAAM3E;AAA7C,AACE,AAAC4E,AAAO,AAAKC,AAAMP;AAAX,AACE,AAACD,AAAUQ,AAAMtD,AAAGgB,AAAK+B,AAAEtE;AAASK,AAAQsE;;AAExD,AAAA,AAAOG,AAAczE,AAAQkB,AAAGgB,AAAKwC,AAAQ/E;AAA7C,AACE,AAAAgF,AAAQ3E;AAAR2E,AAAA,AAAAA,AACQ,AAACnE,AAAOb,AAAQ,AAAAgF,AAAA,AAAA,AAACP,AAAgBlC,AAAKwC,AAASE,AAAK1D;AAD5D,AAAA,AAEQ,AAACF,AAAKrB;AAAQ,AAAAgF,AAAA,AAAA,AAACP,AAAgBM,AAAQxC,AAAM0C,AAAK1D;;AAF1DyD;;;AAIF,AAAA,AAAOE,AAAmB7E,AAAQkB,AAAGgB,AAAK4C,AAASnF;AAAnD,AACE,AAAC4E,AAAO,AAAKvE,AAAQiE;AAAb,AACE,AAACQ,AAAazE,AAAQkB,AAAGgB,AAAK+B,AAAEtE;AAClCK,AACA8E;;AAEV,AAAA,AAAOC,AAAc/E,AAAQkB,AAAGgB,AAAKoC,AAAMI,AAAQ/E;AAAnD,AACE,AAAI,AAACiB,AAAMjB;AACT,AAAAqF,AAAQhF;AAARgF,AAAA,AAAAA,AACQV,AAAM,AAAAU,AAACX,AAAenD,AAAGgB,AAAKoC,AAAM3E;AAD5C,AAAA,AAEQ+E;AAAQ,AAAAM,AAACH,AAAkB3D,AAAGgB,AAAKwC,AAAQ/E;;AAFnDqF;;;AAGA,AAAAC,AAAQjF;AAARiF,AAAA,AAAAA,AACQX,AAAM,AAAAW,AAACjB,AAAU9C,AAAGgB,AAAKoC,AAAM3E;AADvC,AAAA,AAEQ+E;AAAQ,AAAAO,AAACR,AAAavD,AAAGgB,AAAKoC,AAAM3E;;AAF5CsF;;;;AAIJ,AAAA,AAAOC,AAAiBlF,AAAQkB;AAAhC,AACE,AAAAiE,AAAQnF;AAAR,AAAA,AACQ,AAAAoF,AAAmB,AAAAlF,AAAA,AAAAA,AAAA,AAAWF,AAAckB;AAA5CmE,AAAA,AAAA,AAAA,AAAA,AAAWnE;AAAX,AAAA,AAAAmE,AAAAA,AAAAD,AAAAC,AAAAD;;AAAkD,AAAAD,AAAA,AAACG,AAAYC,AAAOrE;;AAD9EiE;;;AAGF,AAAA,AAEA,AAAA,AAAAK,AAAOG,AAA8CzE,AAAGgB,AAAK2D,AAAMlG;AAAnE,AAAA,AAAA8F,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAA2BzF;AAA3B,AAAA0F,AAAAD,AAAA,AAAA,AAAmCG;AAAnCH,AAA8CjB;AAA9C,AACE,AAAMsB,AAAS,AAAA5F,AAAA,AAAAA,AAAA,AAAAA,AAAA,AAAWF,AAAckB,AAAGgB;AAA3C,AACE,AAAM4C,AAAS,AAAI,AAAA,AAAMe,AAAOC,AAAS,AAACC,AAAiBF,AAAMC;AAC3DE,AAAM,AAACC,AAAEnB,AAASgB;AADxB,AAEE,AAAI,AAAC/B,AAAOe;AACVN;;AADF,AAEO,AAAIwB,AAAM,AAAA,AAAA,AAAC5B,AAAUpE,AAAckB,AAAIqE,AAAOrD,AACpC,AAAA,AAAA,AAACkC,AAAUpE,AAAckB,AAAGgB,AAAMgE,AAAepB,AAC3D,AAAA,AAACC,AAAa7D,AAAGgB,AAAS4C,AAASnF,AACnC,AAACuF,AAAgBhE,AACrB,AAAAiF,AAAQP;AAAR,AAAA,AACQ,AAAO1G;AAAU,AAAAiH,AAAA,AAAA,AAACC,AAAOlF,AAAGgB,AAAS4C;;AAD7CqB;;;;;AAGT,AAAA,AAAA,AAAAhG,AAAOmG;AAAP,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAhG,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAOgG,AACH9B,AAAMtD,AAAGgB;AADb,AACmB,AAACuE,AAAajC,AAAMtD,AAAGgB,AAAK,AAAAhC,AAAA,AAAAA,AAAA,AAAAA,AAAA,AAAW,AAAA,AAAA,AAACsE,AAAAA,AAAAA,AAAetD,AAAGgB;;;AAD7E,AAAA,AAAA,AAAAqE,AAAOD,AAEwBpF,AAAGgB,AAAK2D;AAFvC,AAAA,AAAAW,AAAAD;AAAA,AAAAb,AAAAc,AAAA,AAAA,AAEKxG;AAFL,AAAA0F,AAAAc,AAAA,AAAA,AAEaZ;AAFbY,AAEwBhC;AAFxB,AAGG,AAAM7E,AAAO,AAACI,AAAWC,AAAQkC;AAAjC,AACE,AAAI,AAACtB,AAAMjB;AACT,AAACgG,AAAkBnB,AAAMtD,AAAGgB,AAAK2D,AAAMlG;;AACvC,AAAMmG,AAAS,AAAA,AAAQ,AAAA,AAAMD,AAAOA,AAAM,AAAA3F,AAAA,AAAAA,AAAA,AAAAA,AAAA,AAAWF,AAAckB,AAAGgB;AAAtE,AACE,AAAA,AAAQ,AAAA,AAAM4D;AAAd,AACO,AAAA,AAAA,AAAC1B,AAAUpE,AAAckB,AAAIqE,AAAOrD,AACpC,AAAA,AAAC6C,AAAa7D,AAAGgB,AAAS4D,AAAS,AAAC/F,AAAWC,AAAQkC,AACvD,AAACgD,AAAgBhE,AACrB,AAAAwF,AAAQd;AAAR,AAAA,AACQ,AAAO1G;AAAU,AAAAwH,AAAA,AAAA,AAACN,AAAOlF,AAAGgB,AAAS4D;;AAD7CY;;;;AAEDlC;;;;;AAbX,AAAA,AAAA,AAAO8B;;AAAP,AAeA,AAAA,AAAOK,AAAgBnC,AAAMtD;AAA7B,AACE,AAACqD,AAAO,AAAAqC,AAAKpC;AAAL,AAAA,AAAAqC,AAAAD;AAAA,AAAAlB,AAAAmB,AAAA,AAAA,AAAY5G;AAAZ,AAAAyF,AAAAmB,AAAA,AAAA,AAAc5C;AAAd,AACE,AAACwC,AAAajC,AAAMtD,AAAGjB,AAAEgE;AAC3BO,AACA,AAAC7C,AAAQ,AAAA,AAAA,AAAC6C,AAAAA,AAAAA,AAAStD;;AAE7B,AAAA,AAAA4F,AAAOE,AACuB9F,AAAGgB,AAAK4B;AADtC,AAAA,AAAAiD,AAAAD;AAAA,AAAApB,AAAAqB,AAAA,AAAA,AACI/G;AADJ,AAAA0F,AAAAqB,AAAA,AAAA,AACYnB;AADZmB,AACuBvC;AADvB,AAAA,AAES,AAAK,AAAA,AAAA7D,AAAA,AAAA,AAAA,AAAA,AAAwBuB,AAAAA;AAFtC;AAAA,AAAA,AAAA,AAAA5B,AAAA;;;AAGE,AAAMX,AAAO,AAACI,AAAWC,AAAQkC;AAC3B4D,AAAS,AAAA5F,AAAA,AAAAA,AAAA,AAAAA,AAAA,AAAWF,AAAckB,AAAGgB;AAD3C,AAEE,AAAI,AAACtB,AAAMjB;AACT,AAAMsH,AAAU,AAACC,AAAepD,AAAIgC;AAApC,AACE,AAAI,AAAC/B,AAAOkD;AACVzC;;AADF,AAEO,AAAA,AAAA,AAACJ,AAAUpE,AAAckB,AAAGgB,AAAM3C,AAAS0H,AAC3C,AAAA,AAAClC,AAAa7D,AAAGgB,AAAK+E,AAActH,AACxC,AAAAwH,AAAQvB;AAAR,AAAA,AACQ,AAAO1G;AAAU,AAAAiI,AAAA,AAAA,AAACf,AAAOlF,AAAGgB,AAAK+E;;AADzCE;;;;;AAEL,AAAI,AAAClB,AAAEH,AAAShC;AACdU;;AADF,AAEO,AAAA,AAAA,AAAC4C,AAASpH,AAAckB,AAAGgB,AAAM4B,AACjC,AAACiB,AAAa7D,AAAGgB,AAAK4B,AAAIgC,AAASnG,AACvC,AAAA0H,AAAQzB;AAAR,AAAA,AACQ,AAAO1G;AAAU,AAAAmI,AAAA,AAACjB,AAAOlF,AAAGgB,AAAK4B,AAAIgC;;AAD7CuB;;;;;;AAGT,AAAA,AAAMC,AAAiBtH,AAAQkB,AAAGsC,AAAE+D;AAApC,AACE,AAAChE,AACA,AAAKvD,AAAQkC,AAAK4B;AAAlB,AACE,AAAMnE,AAAO,AAACI,AAAWC,AAAQkC;AAC3B4D,AAAS,AAAC5F,AAASqH,AAAOrF;AADhC,AAEE,AAAM,AAACtB,AAAMjB;AACP,AAACoF,AAAa/E,AAAQkB,AAAGgB,AACX,AAACgF,AAAepD,AAAIgC,AACpB,AAACoB,AAAepB,AAAShC,AACzBnE;;AAJpB,AAKM,AAAC6H,AAAK1D,AAAIgC;AACV,AAACf,AAAa/E,AAAQkB,AAAGgB,AAAK4B,AAAIgC,AAASnG;;AANjD,AAOYK;;;;AAChBA,AAAQwD;;AAEX,AAAA,AAAMiE,AAAgB7B,AAAO1E,AAAGsC,AAAE+D,AAAOvH;AAAzC,AACE,AAACuD,AACA,AAAKqC,AAAO1D,AAAK4B;AAAjB,AACE,AAAMgC,AAAS,AAAC5F,AAASqH,AAAOrF;AAAhC,AACE,AAAAwF,AAAQ9B;AAAR,AAAA,AACQ,AAAC4B,AAAK1D,AAAIgC;AAAU,AAAA4B,AAACtB,AAAM,AAAA,AAAA,AAAI,AAACuB,AAAM3H,AAAQkC,AAChBhB,AAAGgB,AACH,AAACgF,AAAepD,AAAIgC,AACpB,AAACoB,AAAepB,AAAShC,AACzB5C,AAAGgB,AAAK4B,AAAIgC;;AALlD4B;;AAMJ9B,AAAOpC;;AAEV,AAAA,AAAOoE,AAAapE;AAApB,AACE,AAACD,AAAU,AAAKC,AAAEqE,AAAE5D;AAAT,AACE,AAAA6D,AAAQtE;AAAR,AAAA,AACQ,AAAA,AAAMS;AAAG,AAAA6D,AAACC,AAAOF;;AADzBC;;AAC8BtE,AAAEA;;AAE/C,AAAA,AAAAwE,AAAOE,AACa1E;AADpB,AAAA,AAAAyE,AAAAD;AAAA,AAAAtC,AAAAuC,AAAA,AAAA,AACIjI;AADJ,AAAA0F,AAAAuC,AAAA,AAAA,AACYrC;AADZ,AAEE,AAAM1E,AAAG,AAAA,AAAChB,AAASsD;AACbA,AAAE,AAAA,AAACuE,AAAOvE;AACV+D,AAAO,AAAArH,AAAA,AAAAA,AAAA,AAAWF,AAAckB;AAFtC,AAAA,AAGO,AAAA,AAAA,AAACkG,AAASpH,AAAckB,AAAI,AAAC0G,AAAY,AAACO,AAAMZ,AAAO/D,AACvD,AAAC8D,AAAgBpG,AAAGsC,AAAE+D,AACtB,AAACrC,AAAgBhE,AACrB,AAAAkH,AAAQxC;AAAR,AAAA,AACQ,AAAO1G;AAAU,AAAAkJ,AAACX,AAAevG,AAAGsC,AAAE+D,AAAOvH;;AADrDoI;;;;AAGL,AAAA,AAAA,AAAAjI,AAAOuI;AAAP,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAOD,AAAwCxH,AAAGgB,AAAKkH,AAAIC;AAA3D,AAAA,AAAAT,AAAAD;AAAA,AAAAjD,AAAAkD,AAAA,AAAA,AAAqB5I;AAArB,AAAA0F,AAAAkD,AAAA,AAAA,AAA6BhD;AAA7BgD,AAAwCpE;AAAxC,AACE,AAAMsB,AAAS,AAAA5F,AAAA,AAAAA,AAAA,AAAAA,AAAA,AAAWF,AAAckB,AAAGgB;AACrCoH,AAAQ,AAACC,AAAMH,AAAEtD,AAASuD;AADhC,AAEE,AAAI,AAAC1B,AAAM3H,AAAQkC;AACjB,AAAM+E,AAAU,AAACC,AAAeoC,AAAQxD;AAClChB,AAAS,AAACoC,AAAepB,AAASwD;AADxC,AAEE,AAAAE,AAAQhF;AAARgF,AAAA,AAAAA,AACQ,AAAK,AAACzF,AAAOkD,AAAY,AAAAuC,AAACxC,AAAI9F,AAAGgB,AAAK+E;AAD9C,AAAA,AAEQ,AAAK,AAAClD,AAAOe;AAAW,AAAA0E,AAACxC,AAAI9F,AAAGgB,AAAK4C;;AAF7C0E;;;AAGF,AAAA,AAACxC,AAAKhH,AAAQ4F,AAAQ1E,AAAGgB,AAAKoH;;;;AATpC,AAAA,AAAA,AAAOZ;;AAAP;AAAA,AAAA,AAAA,AAAAG,AAAOH;AAAP,AAAA,AAAAI,AAAA,AAAA1H,AAAAyH;AAAAA,AAAA,AAAAE,AAAAF;AAAAG,AAAA,AAAA5H,AAAAyH;AAAAA,AAAA,AAAAE,AAAAF;AAAAI,AAAA,AAAA7H,AAAAyH;AAAAA,AAAA,AAAAE,AAAAF;AAAAK,AAAA,AAAA9H,AAAAyH;AAAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAM,AAAA;AAAA,AAAA,AAAAA,AAAAL,AAAAE,AAAAC,AAAAC,AAAAL;;;AAAA,AAWA,AAAA,AAAAY,AAAOE,AAAgCzI,AAAGgB,AAAK0H,AAAKN;AAApD,AAAA,AAAAI,AAAAD;AAAA,AAAA/D,AAAAgE,AAAA,AAAA,AAAuB1J;AAAvB,AAAA0F,AAAAgE,AAAA,AAAA,AAA+B9D;AAA/B,AACE,AAAA,AAACiE,AAAa7J,AAAQ4F,AAAQ1E,AAAGgB,AAAKkF,AAASwC,AAAKN;;AAEtD;;;AAAA,AAAOQ,AAEJnK;AAFH,AAGE,AAAC4D,AAAU,AAAKwG,AAAE7H,AAAK8H;AAAZ,AACE,AAAAC,AAAQF;AAAR,AAAA,AACQ,AAACnJ,AAAMoJ;AAAU,AAAAC,AAACC,AAAKhI;;AAD/B+H;;AADb,AAEwDtK;;AAG1D,AAAA;;;AAAA,AAAAQ,AAAMiK;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA9J,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAM8J,AAEF1K,AAAG2K;AAFP,AAGG,AAAAC,AAAM5K;AAAN,AAAA,AAAA4K,AAAA,AACG1K,AAAMC,AAAqB+E,AAAKyF;;AADnCC;;;AAHH,AAAA,AAAA,AAAMF,AAKF1K,AAAG2K,AAAOE;AALd,AAMG,AAACC,AAAkB9K,AAAG6K,AAASF;;;AANlC,AAAA,AAAA,AAAMD;;AAAN,AAQA,AAAA;;;;;;;;;;AAAA,AAAAjK,AAAMuK;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAApK,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMoK,AASFhL,AAAG2K;AATP,AAUG,AAAA,AAACzK,AAAMF,AAAGG,AAAqBT,AAASiL;;AAV3C;AAAA,AAWI,AAACM,AAASjL,AAAG2K;;;;AAXjB,AAAA,AAAA,AAAMK,AAYFhL,AAAG2K,AAAOE;AAZd,AAaG,AAACK,AAAgBlL,AAAG6K,AAASF;;AAbhC;AAAA,AAcI,AAACQ,AAASnL,AAAG6K,AAASF;;;;AAd1B,AAAA,AAAA,AAAMK;;AAAN,AAgBA;;;;;AAAA,AAAAI,AAAOG;AAAP,AAAA,AAAAF,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7H,AAAA,AAAA6H,AAAA,AAAA,AAAA,AAAA,AAAA5H,AAAAC,AAAA2H,AAAAA;AAAAA,AAIoCG;AAJpCF,AAAA,AAAA9K,AAAA6K,AAAA;AAAAnF,AAAA,AAAA1F,AAAA6K,AAAA;AAAA,AAKE,AAAAhJ,AAA6B,AAAA,AAAC7B,AAAS8K;AAAvC,AAAA,AAAAjJ;AAAA,AAAA,AAAAA,AAAWoJ;AAAX,AACE,AAAAC,AAAA,AAAAC,AAAe,AAACS,AAAsBX,AAAkBvF,AAAO,AAACkE,AAAW,AAAA,AAASkB;AAApFM,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQnB;AAAR,AAAA,AACE,AAAC0B,AAAc1B,AAAOa;;AADxB;AAAA,AAAAE;AAAAE;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAzJ,AAAA,AAAAsJ,AAAAD;AAAA,AAAA,AAAArJ;AAAA,AAAA,AAAAqJ,AAAArJ;AAAA,AAAA,AAAA,AAAA0J,AAAAL;AAAA,AAAAM,AAAA,AAAAC,AAAAP;AAAA,AAAA,AAAA,AAAAQ,AAAAR;AAAAM;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAtK,AAAAgK,AAAQf;AAAR,AAAA,AACE,AAAC0B,AAAc1B,AAAOa;;AADxB;AAAA,AAAA,AAAAnC,AAAAqC;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;AADF;;AAGA,AAAAY,AAAA,AAAAX,AAAe,AAAA,AAACnL,AAAS8K;AAAzBiB,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQ9B;AAAR,AAAA,AACE,AAAC0B,AAAc1B,AAAOa;;AADxB;AAAA,AAAAc;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAApK,AAAA,AAAAsJ,AAAAW;AAAA,AAAA,AAAAjK;AAAA,AAAA,AAAAiK,AAAAjK;AAAA,AAAA,AAAA,AAAA0J,AAAAO;AAAA,AAAAN,AAAA,AAAAC,AAAAK;AAAA,AAAA,AAAA,AAAAJ,AAAAI;AAAAN;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAAtK,AAAA4K,AAAQ3B;AAAR,AAAA,AACE,AAAC0B,AAAc1B,AAAOa;;AADxB;AAAA,AAAA,AAAAnC,AAAAiD;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAGF,AAAA,AAAOI,AAAW5H,AAAM6H;AAAxB,AACE,AAAClJ,AAAM,AAAAmJ,AAAM,AAAA,AAAA,AAACD,AAAAA,AAAAA;AAAPC,AAAA,AAAA,AAAAA,AAAA3L,AAAA,AAAA2L,AAAA;AAAA,AAAA,AAAAA;AAAA;AACUtF;;;AADV;AAEckB;;;AAFd;AAGkBQ;;;AAHlB;AAIoBiB;;;AAJpB;AAKqBhD;;;AALrB;AAMmBL;;;;AANnB;;AAAA,AAOG,AAAO,AAAChG,AAAS,AAAA,AAAuB,AAAA,AAAA,AAAC+L,AAAAA,AAAAA;;;;;AAC5C,AAAA,AAACxK,AAAMwK,AAAK7H;;AAErB,AAAA,AAAO+H,AAAaC,AAAUC;AAA9B,AACE,AAAA,AAAAC,AAAME;AAAN,AAAkB,AAAAF,AAACzL,AAAYuL;;AAA/BG,AACwB,AAACpI,AAAO;AAAKC,AAAM6H;AAAX,AACE,AAAI,AAAClL,AAAQkL;AACX,AAACD,AAAU5H,AAAM,AAAA,AAACqI,AAAOR,AAAKO;;AAC9B,AAAA,AAAA,AAACR,AAAU5H,AAAmB,AAAA,AAACqI,AAAOR,AAAUO;;;AAH5D,AAISJ,AAAU,AAAA,AAACM,AACZL;AANhC,AAAA/G,AAAAiH,AAAA,AAAA,AACO3B;AADP,AAAAtF,AAAAiH,AAAA,AAAA,AACgB/G;AADhB,AAAA,AAAA,AAAA,AAAA,AAOiB4G,AACDxB,AACF,AAAC+B,AAAYnH;;AAE7B,AAAA,AAAeoH;AAEf,AAAA,AAAA,AAAA7M,AAAM+M;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA5M,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAM4M,AACFxN,AAAG2N;AADP,AACY,AAAA,AAACC,AAAU5N,AAAG2N;;;AAD1B,AAAA,AAAA,AAAAF,AAAMD,AAEFxN,AAAG2N;AAFP,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlK,AAAA,AAAAkK,AAAA,AAAA,AAAA,AAAA,AAAAjK,AAAAC,AAAAgK,AAAAA;AAAA,AAAA/K,AAAA+K,AAAA,AAAA,AAEmBG;AAFnB,AAAArN,AAAAkN,AAAA,AAGmBI;AAHnB,AAKG,AAAAC,AAAUvO;AAAVwO,AAAmB,AAAAC,AAAIJ;AAAJ,AAAA,AAAAI;AAAAA;;AAAWH;;;AAA9B,AAAA,AAAAE,AAAUxO;;AAAV,AAAA,AACE,AAAA6C,AAAgD,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAAMsL,AACN,AAAK,AAACQ,AAAKR,AAAK,AAAA,AAAC9M,AAAe8M,AAAeA,AAC/C,AAAI,AAAClM,AAAQkM,AACT,AAACS,AAAMT,AACP,AAACU,AAAKV,AAAM,AAAA,AAAA5L,AAAC8K,AAAa7M,AAAG2N,AAC3B,AAAO,AAAA,AAAC/M;;AALpE,AAAA,AAAAyB;AAAA,AAAA,AAAA6L,AAAA7L;AAAA6L,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1K,AAAA,AAAA0K,AAAA,AAAA,AAAA,AAAA,AAAAzK,AAAAC,AAAAwK,AAAAA;AAAAA,AAA4CvB;AAA5CrB,AAAA,AAAA9K,AAAA0N,AAAA;AAAAhI,AAAA,AAAA1F,AAAA0N,AAAA;AAAA,AAME,AAACI,AAAOtO,AAAGsL;;AACX,AAAU,AAAA,AAAM7L;AAAhB;AAAA,AACE,AAAC6O,AAAO7O,AAAcA,AACD,AAAA,AAAAsC,AAAA,AAACI,AAAiBmJ,AAClB,AAAA,AAAC1F,AAAgB9F,AAAKoG;;;AAE7C,AAAM,AAAAqI,AAAKV;AAAL,AAAA,AAAAU;AAAY,AAAKjB;;AAAjBiB;;;AAAN,AACE,AAAChD,AAAiBoB;;AADpB;;AAEA3M;;AAdF;;AADF,AAAA,AAAA+N,AAAUvO;;;AALb,AAAA,AAAA,AAAMgO;;AAAN,AAsBA,AAAA,AAAMgB,AACHxO,AAAGyO;AADN,AAEE,AAAQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAjL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAkL,AAAA,AAAA,AAAAA,AAAYC,AAAAA,AAAO3O,AAAAA,AAAAA,AAAAA,AAAAA,AAAAA;AAA3B;AAAA,AAAA,AAAA,AAAAY,AAAA;;;AAEK,AAACwC,AAAK,AAAKwL,AAeX,AAACnL,AAAM2L;AAfD,AACE,AAACP,AAAI,AAAM,AAACC,AAAIF,AACL,AAAC/K,AAAU,AAAKwG,AAAE7I,AAAGoC;AAAV,AAAkB,AAAI,AAAUgL,AAAAA,AAAAA,AAAEhL,AAAAA;AAAQ,AAAC4G,AAAKH,AAAE7I;;AAAI6I;;AADvE,AACM,AAAyE,AAAA,AAAAtI,AAAA,AAACvB,AAAUR,AAEpF,AAAAiB,AAAU2N,AACV;AAAI,AAAA,AAAC9M,AAAkB9B,AAAQ4O;;AAC3B,AAAC/K,AAAU,AAAKwG,AAAE7I,AAAGoC;AAAV,AAAkB,AAAI,AAAU/C,AAAe+C,AAAOgL;AAAG,AAACpE,AAAKH,AAAE7I;;AAAI6I;;AAAhF,AAAwF,AAAA,AAAAtI,AAAA,AAACvB,AAAUR;;AAL7G,AAQM,AAAA+O,AAAiBH;AAAjB,AAAA5I,AAAA+I,AAAA,AAAA,AAAOvM;AAAP,AAAAwD,AAAA+I,AAAA,AAAA,AAAY3K;AAAZ,AAAArC,AACMzB,AAASN;AADf,AAEE,AAAA,AAAA,AAAC8B,AAAkB9B,AAASwC,AAAK4B;;AACjC,AAAI,AAAC4K,AAAO1O,AAAQkC;AAClB,AAAAhC,AAAA,AAAAA,AAAA,AAAAA,AAAA,AAAWF,AAAckC,AAAK4B;;AAC9B,AAAA6K,AAAYjP;AAAZkP,AAAA,AAAA;AAAAC;AAAA,AAAiB,AAAC5I,AAAEnC,AAAI,AAAA+K,AAAC3O,AAAWgC;;;AAApC,AAAA,AAAAyM,AAAAC,AAAAD,AAAAC,AAACV,AAAAA,AAAAA;;;;AAfxBC;;AAkBP,AAAA,AAAMY,AACHrP,AAAGyO;AADN,AAEE,AAAQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAjL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAkL,AAAA,AAAA,AAAAA,AAAYC,AAAAA,AAAO3O,AAAAA,AAAAA,AAAAA,AAAAA,AAAAA;AAA3B;AAAA,AAAA,AAAA,AAAAY,AAAA;;;AACA,AAAA,AAAA0O,AAACC;AAAD,AAAM,AAAAD,AAAClN,AAAOpC;AAAM,AAACwO,AAAWxO,AAAGyO;;AAErC;;;AAAA,AAAMe;AAAN,AAGE,AAAK,AAACC;;AAER,AAAA;;;;;;;AAAA,AAAAhP,AAAMkP;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAA/O,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAM+O;AAAN,AAMM,AAAA,AAACC;;;AANP,AAAA,AAAA,AAAMD,AAOF1P;AAPJ,AAQG,AAAA4P,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACE,AAEc9P;AAFrB,AAAA,AAAA6P,AAAAD;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAtM;;AAAA,AAAA,AAAAsM,AAKI;AAAwBE,AAAOrF,AAAOsF,AAAcC;AAApD,AAAA,AAAA,AAAwBF;AAAxB,AAEE,AAAM,AAAClI,AAAKoI,AAAcD;AAA1B,AACE,AAAMC;AAAN,AACE,AAAAC,AAAS,AAACC,AAAwBH,AAAcC;AAAhD,AAAA,AAAA,AAAAC,AAAA;AAAA;AACS,AAAAA,AAACE,AAAOL,AAAOrF;;;AAF1B;;AAIA,AAAMsF;AAAN,AACE,AAAAK,AAAS,AAACC,AAA0BN,AAAcC;AAAlD,AAAA,AAAA,AAAAI,AAAA;AAAA;AACS,AAAAA,AAACnF,AAAS6E,AAAOrF;;;AAF5B;;AALF;;AASAuF;;;;AAhBN,AAAA,AAAAJ,AAAAtM;;AAAA,AAAA,AAAAsM,AAkBI;AAAaU,AAAKC,AAAOC;AAAzB,AAAA,AAAA,AAAaF;AAAb,AACE,AAACG,AAAOF,AAAO;;;;AAnBrBX;AAAAD;;;AARH,AAAA,AAAA,AAAMF;;AAAN","names":["cljs.core/enable-console-print!","chia.db.core/*notify*","chia.db.core/*db-log*","chia.db.core/conj-set","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","chia.db.core/into-set","cljs.core/into","chia.db.core/merge-schema!","db","schema","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","cljs.core/merge","chia.db.core/get-schema","db-snap","a","cljs.core.get.cljs$core$IFn$_invoke$arity$2","var_args","G__61622","chia.db.core/index?","js/Error","cljs.core/contains?","chia.db.core.index_QMARK_.cljs$core$IFn$_invoke$arity$1","G__61627","chia.db.core/many?","cljs.core/Keyword","chia.db.core.many_QMARK_.cljs$core$IFn$_invoke$arity$1","G__61633","chia.db.core/unique?","chia.db.core.unique_QMARK_.cljs$core$IFn$_invoke$arity$1","chia.db.core/ref?","chia.db.core/resolve-id*","id","cljs.core/vector?","cljs.core/first","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$2","chia.db.core/resolve-id","chia.db.patterns.log_read.cljs$core$IFn$_invoke$arity$3","cljs.core/deref","chia.db.core/contains?","chia.db.core/entity*","G__61654","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","chia.db.core/entity","temp__5720__auto__","G__61668","chia.db.core/get","attr","chia.db.core.get.cljs$core$IFn$_invoke$arity$4","not-found","cljs.core.get.cljs$core$IFn$_invoke$arity$3","G__61677","chia.db.core/get-in","ks","chia.db.core.get_in.cljs$core$IFn$_invoke$arity$4","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","chia.db.core/select-keys","chia.db.patterns.log_read.cljs$core$IFn$_invoke$arity$4","p1__61682#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core/select-keys","p__61688","map__61689","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","chia.db.core/touch","entity","cljs.core/reduce-kv","m","ids","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","cljs.core/namespace","cljs.core/name","chia.db.core/assert-uniqueness","val","cljs.core/empty?","chia.db.core/add-index","v","index","G__61707","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","chia.db.core/add-index-many","added","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","state","chia.db.core/remove-index","removed","G__61722","cljs.core/disj","chia.db.core/remove-index-many","removals","chia.db.core/update-index","G__61730","G__61731","chia.db.core/clear-empty-ent","G__61733","G__61735","fexpr__61734","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/dissoc","p__61739","vec__61743","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","chia.db.core/retract-attr-many","datoms","value","prev-val","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","kill?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","clojure.set/difference","G__61746","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","G__61752","chia.db.core/retract-attr","p__61754","vec__61755","chia.db.core.retract_attr.cljs$core$IFn$_invoke$arity$4","G__61761","chia.db.core/retract-entity","p__61766","vec__61767","p__61776","vec__61778","chia.db.core/add","additions","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","G__61783","cljs.core/assoc-in","G__61784","chia.db.core/add-map-indexes","prev-m","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","chia.db.core/add-map-datoms","G__61799","chia.db.core.many_QMARK_.cljs$core$IFn$_invoke$arity$2","chia.db.core/remove-nils","k","G__61801","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","p__61805","vec__61806","chia.db.core/add-map","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__61817","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","chia.db.core/update-attr","p__61829","vec__61830","seq61822","G__61823","cljs.core/next","G__61824","G__61825","G__61826","self__4717__auto__","f","args","new-val","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","G__61835","p__61837","vec__61838","chia.db.core/assoc-in-attr","path","chia.db.core.update_attr.cljs$core$IFn$_invoke$arity$variadic","chia.db.core/many-attrs","s","k-schema","G__61845","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__61852","chia.db.core/unlisten","reader","G__61853","patterns","chia.db.patterns/unlisten","G__61855","chia.db.core/listen","chia.db.core.unlisten.cljs$core$IFn$_invoke$arity$2","chia.db.patterns/listen","chia.db.core.unlisten.cljs$core$IFn$_invoke$arity$3","p__61859","map__61860","db-after","chia.db.core/notify-listeners","tx-report","pattern-value-map","seq__61869","cljs.core/seq","chunk__61870","count__61871","i__61872","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","chia.db.patterns/datom-values","chia.reactive.invalidate_BANG_.cljs$core$IFn$_invoke$arity$2","seq__61881","chunk__61882","count__61883","i__61884","chia.db.core/commit-tx","tx","G__61891","chia.db.core/transaction","db-before","new-txs","p1__61892#","vec__61897","resolve-id","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/transient","cljs.core/persistent!","chia.db.core/*prevent-notify*","G__61910","chia.db.core/transact!","p__61915","map__61916","txs","chia.db.core.transact_BANG_.cljs$core$IFn$_invoke$arity$3","notify","log-datoms","*notify*-orig-val__61919","*notify*-temp-val__61920","or__4131__auto__","map__61928","cljs.core/map?","cljs.core/list?","cljs.core/seq?","cljs.core/reset!","and__4120__auto__","chia.db.core/entity-ids","qs","cljs.core/native-satisfies?","cljs.core/IDeref","q","cljs.core/set","cljs.core/fn?","vec__61940","chia.db.core.index_QMARK_.cljs$core$IFn$_invoke$arity$2","G__61944","G__61945","p1__61934#","clojure.set/intersection","chia.db.core/entities","p1__61947#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","chia.db.core/unique-id","cljs-uuid-utils.core/make-random-uuid","G__61953","chia.db.core/create","chia.db.core.create.cljs$core$IFn$_invoke$arity$1","G__61954","x61957","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","source","prev-patterns","next-patterns","G__61958","chia.db.patterns/added-patterns","chia.db.core.listen.cljs$core$IFn$_invoke$arity$3","G__61959","chia.db.patterns/removed-patterns","this","writer","opts","cljs.core/-write"],"sourcesContent":["(ns chia.db.core\n  (:refer-clojure\n   :exclude [get get-in select-keys set! peek contains? namespace])\n  (:require [cljs-uuid-utils.core :as uuid-utils]\n            [clojure.set :as set]\n            [chia.db.patterns :as patterns]\n            [chia.reactive :as r]\n            [clojure.core :as core]\n            [chia.util.perf :as perf])\n  (:require-macros [chia.db.core :as d]))\n\n(enable-console-print!)\n\n(def ^:dynamic *notify* true)                               ;; if false, datoms are not tracked & listeners are not notified. faster.\n(def ^:dynamic *db-log* nil)                                ;; maintains log of transactions while bound\n\n(def conj-set (fnil conj #{}))\n(def into-set (fnil into #{}))\n\n(defn merge-schema!\n  \"Merge additional schema options into a db. Indexes are not created for existing data.\"\n  [db schema]\n  (swap! db update :schema merge schema))\n\n(defn get-schema [db-snap a]\n  (d/get-in* db-snap [:schema a]))\n\n(defn index?\n  \"Returns true if attribute is indexed.\"\n  ([schema]\n   (core/contains? schema :db/index))\n  ([db-snap a]\n   (index? (get-schema db-snap a))))\n\n(defn many?\n  \"Returns true for attributes with cardinality `many`, which store a set of values for each attribute.\"\n  ([schema]\n   (perf/identical? :db.cardinality/many (core/get schema :db/cardinality)))\n  ([db-snap a]\n   (many? (get-schema db-snap a))))\n\n(defn unique?\n  \"Returns true for attributes where :db/index is :db.index/unique.\"\n  ([schema]\n   (perf/identical? :db.index/unique (core/get schema :db/index)))\n  ([db-snap a]\n   (unique? (get-schema db-snap a))))\n\n(defn ref?\n  [schema]\n  (perf/identical? :db.type/ref (core/get schema :db/type)))\n\n(defn resolve-id*\n  \"Returns id, resolving lookup refs (vectors of the form `[attribute value]`) to ids.\n  Lookup refs are only supported for indexed attributes.\"\n  [db-snap id]\n  (if ^boolean (vector? id)\n    (first (d/get-in* db-snap (into [:ave] id)))\n    id))\n\n(defn resolve-id\n  \"Returns id, resolving lookup refs (vectors of the form `[attribute value]`) to ids.\n  Lookup refs are only supported for indexed attributes.\n  The 3-arity version is for known lookup refs, and does not check for uniqueness.\"\n  [db id]\n  (when ^boolean (vector? id)\n    (patterns/log-read db :_av id))\n  (resolve-id* @db id))\n\n(defn contains?\n  \"Returns true if entity with given id exists in db.\"\n  [db id]\n  (let [id (resolve-id db id)]\n    (when-not ^boolean (nil? id) (patterns/log-read db :e__ id))\n    (true? (core/contains? (core/get @db :eav) id))))\n\n(declare get entity)\n\n(defn entity* [db-snap id]\n  (some-> (d/get-in* db-snap [:eav id])\n          (assoc :db/id id)))\n\n(defn entity\n  \"Returns entity for resolved id.\"\n  [db id]\n  (when-let [id (resolve-id db id)]\n    (patterns/log-read db :e__ id)\n    (entity* @db id)))\n\n(defn get\n  \"Get attribute in entity with given id.\"\n  ([db id attr]\n   (get db id attr nil))\n  ([db id attr not-found]\n   (when-let [id (resolve-id db id)]\n     (patterns/log-read db :ea_ [id attr])\n     (d/get-in* @db [:eav id attr] not-found))))\n\n(defn get-in\n  \"Get-in the entity with given id.\"\n  ([db id ks]\n   (get-in db id ks nil))\n  ([db id ks not-found]\n   (when-let [id (resolve-id db id)]\n     (patterns/log-read db :ea_ [id (first ks)])\n     (d/get-in* @db (into [:eav id] ks) not-found))))\n\n(defn select-keys\n  \"Select keys from entity of id\"\n  [db id ks]\n  (when-let [id (resolve-id db id)]\n    (patterns/log-read db :ea_ (mapv #(do [id %]) ks) true)\n    (-> (d/get-in* @db [:eav id])\n        (assoc :db/id id)\n        (core/select-keys ks))))\n\n(defn touch\n  \"Add refs to entity\"\n  [db {:keys [db/id] :as entity}]\n  (reduce-kv\n   (fn [m attr ids]\n     (assoc m (keyword (core/namespace attr) (str \"_\" (name attr)))\n              ids))\n   entity\n   (d/get-in* @db [:vae id])))\n\n(defn- assert-uniqueness [db-snap id attr val]\n  (when-not (empty? (d/get-in* db-snap [:ave attr val]))\n    (throw (js/Error. (str \"Unique index on \" attr \"; attempted to write duplicate value \" val \" on id \" id \".\")))))\n\n(defn- add-index [db-snap id a v schema]\n  (let [index (core/get schema :db/index)]\n    (when (perf/identical? :db.index/unique index)\n      (assert-uniqueness db-snap id a v))\n    (cond-> db-snap\n            (not (nil? index)) (update-in [:ave a v] conj-set id)\n            (ref? schema) (update-in [:vae v a] conj-set id))))\n\n(defn- add-index-many [db-snap id attr added schema]\n  (reduce (fn [state v]\n            (add-index state id attr v schema)) db-snap added))\n\n(defn- remove-index [db-snap id attr removed schema]\n  (cond-> db-snap\n          (index? schema) (update-in [:ave attr removed] disj id)\n          (ref? schema) (update-in [:vae removed attr] disj id)))\n\n(defn- remove-index-many [db-snap id attr removals schema]\n  (reduce (fn [db-snap v]\n            (remove-index db-snap id attr v schema))\n          db-snap\n          removals))\n\n(defn- update-index [db-snap id attr added removed schema]\n  (if (many? schema)\n    (cond-> db-snap\n            added (add-index-many id attr added schema)\n            removed (remove-index-many id attr removed schema))\n    (cond-> db-snap\n            added (add-index id attr added schema)\n            removed (remove-index id attr added schema))))\n\n(defn- clear-empty-ent [db-snap id]\n  (cond-> db-snap\n          (#{{:db/id id} {}} (d/get-in* db-snap [:eav id])) (update :eav dissoc id)))\n\n(declare retract-attr)\n\n(defn- retract-attr-many [[db-snap datoms :as state] id attr value schema]\n  (let [prev-val (d/get-in* db-snap [:eav id attr])]\n    (let [removals (if (nil? value) prev-val (set/intersection value prev-val))\n          kill? (= removals prev-val)]\n      (if (empty? removals)\n        state\n        [(-> (if kill? (update-in db-snap [:eav id] dissoc attr)\n                       (update-in db-snap [:eav id attr] set/difference removals))\n             (update-index id attr nil removals schema)\n             (clear-empty-ent id))\n         (cond-> datoms\n                 (true? *notify*) (conj! [id attr nil removals]))]))))\n\n(defn- retract-attr\n  ([state id attr] (retract-attr state id attr (d/get-in* (state 0) [:eav id attr])))\n  ([[db-snap datoms :as state] id attr value]\n   (let [schema (get-schema db-snap attr)]\n     (if (many? schema)\n       (retract-attr-many state id attr value schema)\n       (let [prev-val (if-not (nil? value) value (d/get-in* db-snap [:eav id attr]))]\n         (if-not (nil? prev-val)\n           [(-> (update-in db-snap [:eav id] dissoc attr)\n                (update-index id attr nil prev-val (get-schema db-snap attr))\n                (clear-empty-ent id))\n            (cond-> datoms\n                    (true? *notify*) (conj! [id attr nil prev-val]))]\n           state))))))\n\n(defn- retract-entity [state id]\n  (reduce (fn [state [a v]]\n            (retract-attr state id a v))\n          state\n          (entity* (state 0) id)))\n\n(defn- add\n  [[db-snap datoms :as state] id attr val]\n  {:pre [(not (perf/identical? :db/id attr))]}\n  (let [schema (get-schema db-snap attr)\n        prev-val (d/get-in* db-snap [:eav id attr])]\n    (if (many? schema)\n      (let [additions (set/difference val prev-val)]\n        (if (empty? additions)\n          state\n          [(-> (update-in db-snap [:eav id attr] into-set additions)\n               (update-index id attr additions nil schema))\n           (cond-> datoms\n                   (true? *notify*) (conj! [id attr additions nil]))]))\n      (if (= prev-val val)\n        state\n        [(-> (assoc-in db-snap [:eav id attr] val)\n             (update-index id attr val prev-val schema))\n         (cond-> datoms\n                 (true? *notify*) (conj! [id attr val prev-val]))]))))\n\n(defn add-map-indexes [db-snap id m prev-m]\n  (reduce-kv\n   (fn [db-snap attr val]\n     (let [schema (get-schema db-snap attr)\n           prev-val (core/get prev-m attr)]\n       (cond (many? schema)\n             (update-index db-snap id attr\n                           (set/difference val prev-val)\n                           (set/difference prev-val val)\n                           schema)\n             (not= val prev-val)\n             (update-index db-snap id attr val prev-val schema)\n             :else db-snap)))\n   db-snap m))\n\n(defn add-map-datoms [datoms id m prev-m db-snap]\n  (reduce-kv\n   (fn [datoms attr val]\n     (let [prev-val (core/get prev-m attr)]\n       (cond-> datoms\n               (not= val prev-val) (conj! (if (many? db-snap attr)\n                                            [id attr\n                                             (set/difference val prev-val)\n                                             (set/difference prev-val val)]\n                                            [id attr val prev-val])))))\n   datoms m))\n\n(defn- remove-nils [m]\n  (reduce-kv (fn [m k v]\n               (cond-> m\n                       (nil? v) (dissoc k))) m m))\n\n(defn- add-map\n  [[db-snap datoms] m]\n  (let [id (core/get m :db/id)\n        m (dissoc m :db/id)\n        prev-m (d/get-in* db-snap [:eav id])]\n    [(-> (assoc-in db-snap [:eav id] (remove-nils (merge prev-m m)))\n         (add-map-indexes id m prev-m)\n         (clear-empty-ent id))\n     (cond-> datoms\n             (true? *notify*) (add-map-datoms id m prev-m db-snap))]))\n\n(defn- update-attr [[db-snap datoms :as state] id attr f & args]\n  (let [prev-val (d/get-in* db-snap [:eav id attr])\n        new-val (apply f prev-val args)]\n    (if (many? db-snap attr)\n      (let [additions (set/difference new-val prev-val)\n            removals (set/difference prev-val new-val)]\n        (cond-> state\n                (not (empty? additions)) (add id attr additions)\n                (not (empty? removals)) (add id attr removals)))\n      (add [db-snap datoms] id attr new-val))))\n\n(defn- assoc-in-attr [[db-snap datoms] id attr path new-val]\n  (update-attr [db-snap datoms] id attr assoc-in path new-val))\n\n(defn- many-attrs\n  \"Returns set of attribute keys with db.cardinality/schema\"\n  [schema]\n  (reduce-kv (fn [s attr k-schema]\n               (cond-> s\n                       (many? k-schema) (conj attr))) #{} schema))\n\n\n(defn unlisten\n  \"Remove listener from patterns (if provided) or :tx-log.\"\n  ([db reader]\n   (doto db\n     (swap! update :tx-listeners disj reader)))\n  ([db reader patterns]\n   (patterns/unlisten db patterns reader)))\n\n(defn listen\n  \"Adds listener for transactions which contain datom(s) matching the provided pattern. If patterns not provided, matches all transactions.\n\n   Patterns should be a map containing any of the following keys, each containing a collection of patterns:\n\n    :e__      entity                              [id _ _]\n    :ea_      entity-attribute                    [id attr _]\n    :_av      attribute-value                     [_ attr val]\n    :_a_      attribute                           [_ attr _]\"\n  ([db reader]\n   (swap! db update :tx-listeners conj-set reader)\n   #(unlisten db reader))\n  ([db reader patterns]\n   (patterns/listen db patterns reader)\n   #(unlisten db patterns reader)))\n\n(defn- notify-listeners\n  \"Notify listeners for supported patterns matched by datoms in transaction.\n\n  Listeners are called with the complete :tx-report. A listener is called at most once per transaction.\"\n  [{:keys [::db-after ::datoms] :as tx-report}]\n  (when-let [pattern-value-map (core/get db-after :listeners)]\n    (doseq [reader (patterns/datom-values pattern-value-map datoms (many-attrs (:schema db-after)))]\n      (r/invalidate! reader tx-report)))\n  (doseq [reader (core/get db-after :tx-listeners)]\n    (r/invalidate! reader tx-report)))\n\n(defn- commit-tx [state tx]\n  (apply (case (tx 0)\n           :db/add add\n           :db/add-map add-map\n           :db/update-attr update-attr\n           :db/assoc-in-attr assoc-in-attr\n           :db/retract-entity retract-entity\n           :db/retract-attr retract-attr\n           #(throw (js/Error (str \"No chia.db op: \" (tx 0)))))\n         (assoc tx 0 state)))\n\n(defn- transaction [db-before new-txs]\n  (let [resolve-id #(resolve-id* db-before %)\n        [db-after datoms] (reduce (fn [state tx]\n                                    (if (vector? tx)\n                                      (commit-tx state (update tx 1 resolve-id))\n                                      (commit-tx state [:db/add-map (update tx :db/id resolve-id)])))\n                                  [db-before (transient [])]\n                                  new-txs)]\n    #::{:db-before db-before\n        :db-after db-after\n        :datoms (persistent! datoms)}))\n\n(def ^:dynamic *prevent-notify* false)\n\n(defn transact!\n  ([db txs] (transact! db txs {}))\n  ([db txs {:keys [notify\n                   log-datoms]\n            :or {notify true}}]\n   (binding [*notify* (or notify log-datoms)]\n     (when-let [{:keys [::db-after ::datoms] :as tx} (cond (nil? txs) nil\n                                                           (and (map? txs) (core/contains? txs ::datoms)) txs\n                                                           (or (vector? txs)\n                                                               (list? txs)\n                                                               (seq? txs)) (transaction @db txs)\n                                                           :else (throw (js/Error \"Transact! was not passed a valid transaction\")))]\n       (reset! db db-after)\n       (when-not (nil? *db-log*)\n         (reset! *db-log* (-> @*db-log*\n                              (assoc ::db-after db-after)\n                              (update ::datoms into datoms))))\n\n       (when (and notify (not *prevent-notify*))\n         (notify-listeners tx))\n       db))))\n\n(defn entity-ids\n  [db qs]\n  (assert (satisfies? IDeref db))\n  (->> qs\n       (mapv (fn [q]\n               (set (cond (fn? q)\n                          (reduce-kv (fn [s id entity] (if ^boolean (q entity) (conj s id) s)) #{} (core/get @db :eav))\n\n                          (keyword? q)\n                          (do (patterns/log-read db :_a_ q)\n                              (reduce-kv (fn [s id entity] (if ^boolean (core/contains? entity q) (conj s id) s)) #{} (core/get @db :eav)))\n\n                          :else\n                          (let [[attr val] q\n                                db-snap @db]\n                            (patterns/log-read db :_av [attr val])\n                            (if (index? db-snap attr)\n                              (d/get-in* db-snap [:ave attr val])\n                              (entity-ids db [#(= val (core/get % attr))])))))))\n       (apply set/intersection)))\n\n(defn entities\n  [db qs]\n  (assert (satisfies? IDeref db))\n  (map #(entity db %) (entity-ids db qs)))\n\n(defn unique-id\n  \"Returns a unique id (string).\"\n  []\n  (str (uuid-utils/make-random-uuid)))\n\n(defn create\n  \"Create a new db, with optional schema, which should be a mapping of attribute keys to\n  the following options:\n\n    :db/index       [true, :db.index/unique]\n    :db/cardinality [:db.cardinality/many]\"\n  ([] (create {}))\n  ([schema]\n   (doto (atom {:eav {}\n                :ave {}\n                :schema schema})\n     (specify!\n       r/ITransitionPattern\n       (on-transition-pattern [source reader prev-patterns next-patterns]\n\n         (when (not= next-patterns prev-patterns)\n           (when next-patterns\n             (some->> (patterns/added-patterns prev-patterns next-patterns)\n                      (listen source reader)))\n\n           (when prev-patterns\n             (some->> (patterns/removed-patterns prev-patterns next-patterns)\n                      (unlisten source reader))))\n\n         next-patterns)\n       IPrintWithWriter\n       (-pr-writer [this writer opts]\n         (-write writer (str \"db[]\")))))))"]}