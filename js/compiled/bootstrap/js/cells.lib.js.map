{"version":3,"sources":["cells/lib.cljs"],"mappings":"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","names":["var_args","G__68611","cells.lib/-on-frame","js/Error","f","cells.lib._on_frame.cljs$core$IFn$_invoke$arity$2","initial-value","self","cells.cell/*self*","disposed?","cljs.core/volatile!","interval-f","cell__67907__auto__","error-handler__67908__auto__","cells.cell/*error-handler*","args__67909__auto__","*self*-orig-val__68635","*error-handler*-orig-val__68636","*self*-temp-val__68637","*error-handler*-temp-val__68638","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","e68641","e__67910__auto__","cells.cell/error!","cljs.core/deref","cljs.core/reset!","G__68649","js/window","frame-f","cells.cell/on-dispose","cljs.core/vreset!","G__68664","cells.lib/interval","n","cells.lib.interval.cljs$core$IFn$_invoke$arity$3","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","clear-key","_","G__68684","js/clearInterval","*self*-orig-val__68688","*error-handler*-orig-val__68689","*self*-temp-val__68690","*error-handler*-temp-val__68691","e68692","G__68696","js/setInterval","cells.lib/delay","value","G__68701","js/clearTimeout","timeout-f","*self*-orig-val__68702","*error-handler*-orig-val__68703","*self*-temp-val__68704","*error-handler*-temp-val__68705","e68706","js/setTimeout","cells.lib/parse-fns","p1__68713#","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","js/JSON.parse","cljs.core/identity","cells.lib/xhrio-error-message","xhrio","G__68721","goog.net.ErrorCode/getDebugMessage","cells.lib/query-string","query","js/goog.Uri","cljs.core/clj->js","G__68729","cells.lib/fetch","p__68737","map__68742","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core.get.cljs$core$IFn$_invoke$arity$2","url","cells.lib.fetch.cljs$core$IFn$_invoke$arity$2","format","G__68763","parse","cells.cell/loading!","G__68769","G__68770","goog.net.XhrIo/send","*self*-orig-val__68775","*error-handler*-orig-val__68776","*self*-temp-val__68777","*error-handler*-temp-val__68778","e68779","event","obj68782","k68783","obj68784","applied-science.js-interop.impl/in?*","js/undefined","temp__5718__auto__","error-message","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","formatted-value","G__68787","obj__50657__auto__","f__50658__auto__","chia.util/some-str","cells.cell/complete!","cells.lib/geo-location","obj68796","k68797","obj68798","js/navigator","*self*-orig-val__68801","*error-handler*-orig-val__68802","*self*-temp-val__68803","*error-handler*-temp-val__68804","e68805","location","obj68809","k68810","obj68811","obj68806","out68807","k__50565__auto__","obj68824","obj68827","*self*-orig-val__68839","*error-handler*-orig-val__68840","*self*-temp-val__68841","*error-handler*-temp-val__68842","e68851","error","G__68867","cells.lib/-timeout","cells.lib._timeout.cljs$core$IFn$_invoke$arity$3","*self*-orig-val__68874","*error-handler*-orig-val__68875","*self*-temp-val__68876","*error-handler*-temp-val__68877","e68880","G__68882"],"sourcesContent":["(ns cells.lib\n  (:refer-clojure :exclude [delay])\n  (:require [cells.cell :as cell :refer [cell]]\n            [goog.net.XhrIo :as xhr]\n            [goog.net.ErrorCode :as errors]\n            [cells.util]\n            [applied-science.js-interop :as j]\n            [chia.util :as u])\n  (:require-macros [cells.lib])\n  (:import [goog Uri]))\n\n(defn -on-frame\n  ([f] (-on-frame f nil))\n  ([f initial-value]\n   (let [self cell/*self*\n         disposed? (volatile! false)\n         interval-f (cell/bound-fn frame-f []\n                      (when (false? @disposed?)\n                        (reset! self (f @self))\n                        (.requestAnimationFrame js/window frame-f)))]\n     (cell/on-dispose self :on-frame #(vreset! disposed? true))\n     (reset! self initial-value)\n     (.requestAnimationFrame js/window interval-f))))\n\n(defn interval\n  ([n f] (interval n f nil))\n  ([n f initial-value]\n   (if (= n :frame)\n     (-on-frame f initial-value)\n     (let [self cell/*self*\n           clear-key (volatile! nil)\n           _ (cell/on-dispose self :interval #(some-> @clear-key (js/clearInterval)))\n           interval-f (cell/bound-fn [] (reset! self (f @self)))]\n       (vreset! clear-key (js/setInterval interval-f n))\n       (reset! self (f initial-value))))))\n\n(defn delay\n  [n value]\n  (let [self cell/*self*\n        clear-key (volatile! nil)\n        _ (cell/on-dispose self :delay #(some-> @clear-key (js/clearTimeout)))\n        timeout-f (cell/bound-fn [] (reset! self value))]\n    (vreset! clear-key (js/setTimeout timeout-f n))\n    nil))\n\n(def ^:private parse-fns\n  {:json->clj (comp #(js->clj % :keywordize-keys true) js/JSON.parse)\n   :json      js/JSON.parse\n   :text      identity})\n\n(defn- xhrio-error-message [^js xhrio]\n  (when-not (.isSuccess xhrio)\n    (str (-> (.getLastErrorCode xhrio)\n             (errors/getDebugMessage))\n         \\newline\n         \"(check your browser console for more details)\")))\n\n(defn- query-string [query]\n  (-> Uri\n      .-QueryData\n      (.createFromMap (clj->js query)) (.toString)))\n\n(defn fetch\n  \"Fetch a resource from a url. By default, response is parsed as JSON and converted to Clojure via clj->js with :keywordize-keys true.\n  Accepts options :format, which may be :json or :text, and :query, a map which will be\n  appended to url as a query parameter string.\"\n  ([url]\n   (fetch url {}))\n  ([url {:keys [format query]\n         :or   {format :json->clj}}]\n   (let [self cell/*self*\n         url (cond-> url\n                     query (str \"?\" (query-string query)))\n         parse (get parse-fns format)]\n\n     (cell/loading! self)\n\n     (xhr/send url\n               (cell/bound-fn [event]\n                 (let [xhrio (j/get event :target)]\n                   (if-let [error-message (xhrio-error-message xhrio)]\n                     (cell/error! self (ex-info error-message {:cell self}))\n                     (let [formatted-value (some-> (j/call xhrio :getResponseText)\n                                                   u/some-str\n                                                   (parse))]\n                       (cell/complete! self)\n                       (reset! self formatted-value))))))\n     @self)))\n\n(defn geo-location\n  []\n  (let [self cell/*self*]\n    (cell/loading! self)\n    (-> (j/get js/navigator :geolocation)\n        (j/call :getCurrentPosition\n                (cell/bound-fn [location]\n                  (cell/complete! self)\n                  (-> (j/get location :coords)\n                      (j/select-keys [:latitude :longitude])\n                      (js->clj :keywordize-keys true)\n                      (->> (reset! self))))\n                (cell/bound-fn [error]\n                  (cell/error! self (str error)))))))\n\n(defn -timeout\n  ([n f] (-timeout n f nil))\n  ([n f initial-value]\n   (let [self cell/*self*\n         _ (cell/loading! self)\n         clear-key (js/setTimeout (cell/bound-fn []\n                                    (cell/complete! self)\n                                    (reset! self (f @self))) n)]\n     (cell/on-dispose self #js{} #(js/clearTimeout clear-key))\n     initial-value)))"]}