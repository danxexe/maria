{"version":3,"sources":["cells/linked_graph.cljc"],"mappings":"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","names":["x__4433__auto__","m__4434__auto__","cells.linked-graph/add-dependency!","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","cells.linked-graph/remove-dependency!","cells.linked-graph/add-dependent!","cells.linked-graph/remove-dependent!","cells.linked-graph/immediate-dependencies","cells.linked-graph/immediate-dependents","cells.linked-graph/ILinkedGraph","cell","dep","cells.linked-graph/transitive-sorted","f","p__67718","vec__67719","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cells$linked_graph$transitive_sorted_$__transitive_sorted.cljs$core$IFn$_invoke$arity$2","cljs.core/second","seen","results","new","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","-transitive-sorted","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__67722","cljs.core/not","cells.linked-graph/dependencies","cells.linked-graph/dependents","cells.linked-graph/depend!","node","cells.linked-graph/un-depend!","cells.linked-graph/transition-deps!","next-dependencies","prev-dependencies","seq__67737","cljs.core/seq","chunk__67738","count__67739","i__67740","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","added","seq__67747","chunk__67748","count__67749","i__67750","removed"],"sourcesContent":["(ns cells.linked-graph\n  (:require [clojure.set :as set]))\n\n(defprotocol ILinkedGraph\n  \"Protocol for graphs that store relationships directly on nodes.\"\n  (add-dependency! [cell dep])\n  (remove-dependency! [cell dep])\n  (add-dependent! [cell dep])\n  (remove-dependent! [cell dep])\n  (immediate-dependencies [cell])\n  (immediate-dependents [cell]))\n\n(defn transitive-sorted [f]\n  (fn -transitive-sorted\n    ([dep]\n     (->> dep\n          (-transitive-sorted [#{dep} []])\n          (second)))\n    ([[seen results] dep]\n     (let [new (set/difference (f dep) seen)]\n       (reduce -transitive-sorted\n               [(into (conj seen dep) new)\n                (-> results\n                    (cond-> (not (seen dep)) (conj dep))\n                    (into new))]\n               new)))))\n\n(def dependencies (transitive-sorted immediate-dependencies))\n(def dependents (transitive-sorted immediate-dependents))\n\n(defn depend! [node dep]\n  (add-dependency! node dep)\n  (add-dependent! dep node))\n\n(defn un-depend! [node dep]\n  (remove-dependency! node dep)\n  (remove-dependent! dep node))\n\n(defn transition-deps! [node next-dependencies]\n  (let [prev-dependencies (immediate-dependencies node)]\n    (doseq [added (set/difference next-dependencies prev-dependencies)]\n      (depend! node added))\n    (doseq [removed (set/difference prev-dependencies next-dependencies)]\n      (un-depend! node removed))\n    nil))"]}