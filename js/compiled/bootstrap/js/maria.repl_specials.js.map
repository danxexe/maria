{"version":3,"sources":["maria/repl_specials.cljs"],"mappings":"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","names":["cljs.core/with-meta","c-state__41339__auto__","c-env__41340__auto__","source__41341__auto__","p__42342","vec__42343","seq__42344","cljs.core/seq","first__42345","cljs.core/first","cljs.core/next","_","args__41342__auto__","&source","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","lark.eval.swap_repl_specials_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","maria.repl-specials/dir","c-state","c-env","ns","or__4131__auto__","cljs.core/deref","maria.views.repl-specials/dir","p__42346","vec__42347","seq__42348","first__42349","maria.repl-specials/what-is","thing","lark.eval.eval_str.cljs$core$IFn$_invoke$arity$3","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/List","and__4120__auto__","cljs.core/Symbol","maria.live.ns-utils/special-doc-map","maria.live.ns_utils.resolve_var.cljs$core$IFn$_invoke$arity$3","cljs.core/contains?","lark.eval/repl-specials","p__42350","vec__42351","seq__42352","first__42353","maria.repl-specials/doc","name","temp__5718__auto__","the-var","maria.live.ns_utils.resolve_var_or_special.cljs$core$IFn$_invoke$arity$3","G__42356","maria.views.repl-specials/doc","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","js/Error","clojure.string/trim-newline","sb__4661__auto__","goog.string/StringBuffer","*print-newline*-orig-val__42366","cljs.core/*print-newline*","*print-fn*-orig-val__42367","cljs.core/*print-fn*","*print-newline*-temp-val__42368","*print-fn*-temp-val__42369","x__4662__auto__","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","cljs.core/name","maria.friendly.kinds/kind","p__42370","vec__42371","seq__42372","first__42373","maria.repl-specials/source","chia.view.hiccup.element.cljs$core$IFn$_invoke$arity$1","maria.views.cards/card-classes","maria.views.repl-specials/var-source","*print-newline*-orig-val__42381","*print-fn*-orig-val__42382","*print-newline*-temp-val__42383","*print-fn*-temp-val__42384","p__42390","vec__42391","seq__42392","first__42393","maria.repl-specials/js-source","form","map__42394","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","compiled-js","error","result","lark.eval.compile_str.cljs$core$IFn$_invoke$arity$3","p__42396","vec__42397","seq__42398","first__42399","maria.repl-specials/inject","mappings","maria.live.ns-utils/elide-quote","seq__42400","chunk__42401","count__42402","i__42403","vec__42414","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__42417","inject-as","sym","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","lark.eval.eval.cljs$core$IFn$_invoke$arity$4","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","cljs.core/merge","lark.eval.resolve_var.cljs$core$IFn$_invoke$arity$3"],"sourcesContent":["(ns maria.repl-specials\n  \"Special forms that exist only in the REPL.\"\n  (:require [lark.eval :as e :refer [defspecial]]\n            [maria.views.repl-specials :as special-views]\n            [maria.friendly.kinds :as kinds]\n            [maria.live.ns-utils :as ns-utils]\n            [clojure.string :as str]\n            [maria.editors.code :as code]\n            [maria.views.cards :as repl-ui]\n            [maria.util :as util]\n            [chia.view.hiccup :as hiccup]\n            [chia.view :as v]))\n\n(defspecial dir\n  \"Display public vars in namespace\"\n  [c-state c-env ns]\n  (let [ns (or ns (:ns @c-env))]\n    {:value (special-views/dir c-state ns)}))\n\n(defspecial what-is\n  \"Defers to maria.messages/what-is; this is only here to handle the edge case of repl-special functions.\"\n  [c-state c-env thing]\n  (e/eval-str c-state c-env (str `(maria.friendly.kinds/what-is ~(cond (and (symbol? thing) (ns-utils/special-doc-map thing))\n                                                                       :maria.kinds/special-form\n\n                                                                       (and (symbol? thing) (:macro (ns-utils/resolve-var c-state c-env thing)))\n                                                                       :maria.kinds/macro\n\n                                                                       (contains? e/repl-specials thing)\n                                                                       :maria.kinds/function\n\n                                                                       :else thing)))))\n\n(defspecial doc\n  \"Show documentation for given symbol\"\n  [c-state c-env name]\n  (if-let [the-var (ns-utils/resolve-var-or-special c-state c-env name)]\n    {:value (special-views/doc (merge {:expanded?   true\n                                       :standalone? true}\n                                      the-var))}\n    {:error (js/Error. (if (symbol? name) (str \"Could not resolve the symbol `\" (str/trim-newline (with-out-str (prn name))) \"`. Maybe it has not been defined?\")\n                                          (str (str \"`doc` requires a symbol, but a \" (cljs.core/name (kinds/kind name)) \" was passed.\"))))}))\n\n\n(defspecial source\n  \"Show source code for given symbol\"\n  [c-state c-env name]\n  (if-let [the-var (and (symbol? name) (ns-utils/resolve-var-or-special c-state c-env name))]\n    {:value (hiccup/element [:div {:class (str repl-ui/card-classes\n                                               \" ph3\")}\n                             (special-views/var-source the-var)])}\n    {:error (js/Error. (str \"Could not resolve the symbol `\" (str/trim-newline (with-out-str (prn name))) \"`\"))}))\n\n(defspecial js-source\n  \"Show compiled javascript for `form`\"\n  [c-state c-env form]\n  (let [{:keys [compiled-js\n                error]\n         :as result} (e/compile-str c-state c-env &source)]\n    (if error result\n              {:value (hiccup/element [:span compiled-js])})))\n\n(defspecial inject\n  \"Inject vars into a namespace, preserving all metadata (inc. name)\"\n  [c-state c-env ns mappings]\n  (let [ns (ns-utils/elide-quote ns)]\n    (doseq [[inject-as sym] (seq (ns-utils/elide-quote mappings))]\n      (e/eval c-state c-env `(def ~inject-as ~sym) {:ns ns})\n      (swap! c-state update-in [:cljs.analyzer/namespaces ns :defs inject-as] merge (e/resolve-var c-state c-env sym)))))"]}