{"version":3,"sources":["lark/editors/codemirror.cljs"],"mappings":"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","names":["lark.editors.codemirror/*get-ns*","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","lark.editors.codemirror/Pos","js/module$node_modules$codemirror$lib$codemirror.Pos","lark.editors.codemirror/changeEnd","js/module$node_modules$codemirror$lib$codemirror.changeEnd","cljs.core/PROTOCOL_SENTINEL","x","y","js/module$node_modules$codemirror$lib$codemirror.cmpPos","and__4120__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$2","pos","writer","_","cljs.core/-write","o","k","v","G__66585","cljs.core/Keyword","js/Error","G__66587","G__66588","G__66590","G__66591","G__66592","obj66598","k66599","applied-science.js-interop.impl/wrap-key","obj66601","applied-science.js-interop.impl/in?*","js/undefined","not-found","G__66604","obj66609","k66610","obj66611","p__66615","map__66616","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","lark.editors.codemirror/range->Pos","line","column","lark.editors.codemirror/Pos->range","cursor","lark.editors.codemirror/cursor-bookmark","G__66623","G__66624","goog.dom/createDom","var_args","G__66628","lark.editors.codemirror/sexp-near","p__66632","map__66638","cljs.core.get.cljs$core$IFn$_invoke$arity$3","loc","lark.editors.codemirror.sexp_near.cljs$core$IFn$_invoke$arity$3","direction","ignore?","lark.tree.node/whitespace?","nav","G__66640","fast-zip.core/left","fast-zip.core/right","the-loc","cljs.core/not","G__66643","fast-zip.core/node","cljs.core/select-keys","G__66644","lark.tree.nav/include-prefix-parents","lark.editors.codemirror/set-temp-marker!","cm","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","lark.editors.codemirror/unset-temp-marker!","vec__66651","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","kind","marker","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","lark.editors.codemirror/temp-marker-cursor-pos","vec__66660","lark.editors.codemirror/temp-marker-selections","vec__66668","lark.editors.codemirror/return-to-temp-marker!","editor","temp__5720__auto__","vec__66674","data","G__66677","sels","lark.editors.codemirror/get-cursor","or__4131__auto__","lark.editors.codemirror/selection?","lark.editors.codemirror/selection-text","lark.editors.codemirror/set-cursor!","G__66711","cljs.core/map?","lark.editors.codemirror/set-preserve-cursor!","value","cursor-pos","p__66717","map__66746","lark.editors.codemirror/range->positions","end-line","end-column","node","G__66754","G__66755","lark.editors.codemirror/mark-range!","range","payload","vec__66763","from","to","lark.editors.codemirror/mark-ranges!","ranges","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__66772","vec__66773","out","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","lark.editors.codemirror/range-text","vec__66781","lark.editors.codemirror/select-range","vec__66787","G__66794","lark.editors.codemirror/replace-range!","p__66800","map__66801","p__66803","map__66804","s","lark.editors.codemirror.replace_range_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__66806","G__66807","lark.editors.codemirror/temp-select-node!","lark.tree.range.bounds.cljs$core$IFn$_invoke$arity$1","G__66809","lark.editors.codemirror/pos->boundary","side","G__66813","lark.editors.codemirror/selection-bounds","sel","lark.editors.codemirror.pos__GT_boundary.cljs$core$IFn$_invoke$arity$2","lark.editors.codemirror/current-selection-bounds","cljs.core/first","cur","lark.editors.codemirror.pos__GT_boundary.cljs$core$IFn$_invoke$arity$1","lark.editors.codemirror/highlight-range","lark.tree.node/has-edges?","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","lark.tree.range/within-inner?","G__66825","lark.tree.nav/prefix-parents","lark.tree.range/inner-range","p__66827","map__66829","map__66830","lark.editors.codemirror/select-at-cursor","top-loc?","cursor-loc","lark.tree.nav/top-loc","lark.editors.codemirror/mac?","platform","js/navigator","clojure.string/starts-with?","lark.editors.codemirror/keyup-selection-update!","e","lark.editors.codemirror/clear-brackets!","seq__66854","cljs.core/seq","chunk__66855","count__66856","i__66857","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","handle","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","lark.editors.codemirror/match-brackets!","G__66861","lark.tree.node/may-contain-children?","cljs.core/assoc-in","lark.tree.range/node-highlights","lark.editors.codemirror/clear-parse-errors!","seq__66862","chunk__66863","count__66864","i__66865","lark.editors.codemirror/highlight-parse-errors!","error-ranges","handles","cljs.core.into.cljs$core$IFn$_invoke$arity$2","iter__4523__auto__","s__66896","cljs.core/LazySeq","c__4521__auto__","size__4522__auto__","b__66898","cljs.core/chunk-buffer","i__66897","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__66895","cljs.core/cons","cljs.core/rest","tag","G__66907","G__66913","cljs.core/name","lark.editors.codemirror/set-value-and-refresh!","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","lark.editors.codemirror/set-zipper!","p__66948","vec__66949","map__66952","seq66932","G__66934","G__66935","self__4717__auto__","zipper","decorate?","ast","cljs.core/merge","on-ast","p__66968","map__66970","map__66972","lark.editors.codemirror/update-ast!","ast-source","map__66985","invalid-nodes","next-ast","e66989","lark.tree.core/ast","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","js/console.log","lark.editors.codemirror.set_zipper_BANG_.cljs$core$IFn$_invoke$arity$variadic","lark.tree.core/ast-zip","lark.editors.codemirror/update-cursor!","p__67018","p__67019","map__67020","map__67021","vec__67022","seq67007","G__67008","brackets?","prev-pos","prev-zipper","force?","G__67043","lark.tree.nav/navigate","bracket-loc","p1__67001#","bracket-node","lark.editors.codemirror/require-opts","opts","seq__67055","chunk__67056","count__67057","i__67058","opt","x67076","js/module$node_modules$codemirror$lib$codemirror","this","obj67083","k67084","obj67085","obj67167","k67168","obj67169","key","f","oldval","newval","seq__67155","chunk__67156","count__67157","i__67158","watcher","cljs.core/vals","cljs.core/deref","old-val","obj67099","obj67100","cljs.core/-notify-watches","cljs.core/-reset!","G__67116","a","G__67119","G__67120","b","G__67121","G__67122","G__67123","xs","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/List","val","temp__5718__auto__","root-cursor","selections","coords","G__67128","G__67129","G__67130","G__67137","G__67138","lark.editor/scroll-into-view","lark.editor/cursor-coords","position","client-x","client-y","js/window","G__67144","G__67145","on?","G__67204","G__67205","G__67206","goog.events/listen","G__67207","G__67208","G__67209"],"sourcesContent":["(ns lark.editors.codemirror\n  (:require\n   [\"codemirror\" :as CM]\n   [fast-zip.core :as z]\n   [goog.events :as events]\n   [lark.tree.core :as tree]\n   [goog.dom :as gdom]\n\n   ;; for protocols:\n   [lark.editor :as Editor]\n   [clojure.string :as string]\n   [lark.tree.range :as range]\n   [lark.tree.node :as node]\n   [lark.tree.nav :as nav]\n   [applied-science.js-interop :as j]))\n\n(def ^:dynamic *get-ns* (fn [] (symbol \"cljs.user\")))\n\n(def Pos CM/Pos)\n(def changeEnd CM/changeEnd)\n\n(extend-type CM/Pos\n  IComparable\n  (-compare [x y]\n    (CM/cmpPos x y))\n  IEquiv\n  (-equiv [x y]\n    (and y\n         (= (.-ch x) (get y :column))\n         (= (.-line x) (get y :line))))\n  IPrintWithWriter\n  (-pr-writer [pos writer _]\n    (-write writer (str \"#Pos[\" (.-line pos) \", \" (.-ch pos) \"]\")))\n  IAssociative\n  (-assoc [o k v]\n    (case k\n      :line (CM/Pos v (.-ch o))\n      :column (CM/Pos (.-line o) v)))\n  ILookup\n  (-lookup\n    ([o k]\n     (case k :line (.-line o)\n             :column (.-ch o)\n             (j/get o k)))\n    ([o k not-found]\n     (case k :line (.-line o)\n             :column (.-column o)\n             (j/get o k not-found)))))\n\n(defn range->Pos\n  \"Coerces Clojure maps to CodeMirror positions.\"\n  [{:keys [line column]}]\n  (CM/Pos line column))\n\n(defn Pos->range [cursor]\n  {:line (.-line cursor)\n   :column (.-ch cursor)\n   :end-line (.-line cursor)\n   :end-column (.-ch cursor)})\n\n(defn- cursor-bookmark []\n  (gdom/createDom \"div\" #js {\"className\" \"cursor-marker\"}))\n\n(defn sexp-near\n  \"Current sexp, or nearest sexp to the left, or parent.\"\n  ([pos loc] (sexp-near pos loc nil))\n  ([pos loc {:keys [direction ignore?]\n             :or {direction :left\n                  ignore? node/whitespace?}}]\n   (let [nav (case direction :left z/left :right z/right)\n         the-loc (if-not (ignore? (z/node loc))\n                   loc\n                   (if (and (= pos (select-keys (z/node loc) [:line :column]))\n                            (nav loc)\n                            (not (ignore? (z/node (nav loc)))))\n                     (nav loc)\n                     loc))]\n     (nav/include-prefix-parents the-loc))))\n\n\n(defn set-temp-marker! [cm]\n  (when-not (::temp-marker cm)\n    (swap! cm assoc ::temp-marker (if (.somethingSelected cm)\n                                    [:selections (.listSelections cm)]\n                                    [:cursor (.setBookmark cm\n                                                           (.getCursor cm)\n                                                           #js {:widget (cursor-bookmark)})]))))\n\n(defn unset-temp-marker! [cm]\n  (let [[kind marker] (::temp-marker cm)]\n    (when (= kind :cursor)\n      (.clear marker)))\n  (swap! cm dissoc ::temp-marker))\n\n(defn temp-marker-cursor-pos [cm]\n  (let [[kind marker] (::temp-marker cm)]\n    (when (= kind :cursor)\n      (.find marker))))\n\n(defn temp-marker-selections [cm]\n  (let [[kind marker] (::temp-marker cm)]\n    (when (= kind :selections)\n      marker)))\n\n(defn return-to-temp-marker! [editor]\n  (when-let [[kind data] (::temp-marker editor)]\n    (case kind :cursor (when-let [pos (.find data)]\n                         (.setCursor editor pos nil #js {:scroll false}))\n               :selections (when-let [sels data]\n                             (.setSelections editor sels nil #js {:scroll false})))\n    (unset-temp-marker! editor)))\n\n(defn ^js get-cursor [cm]\n  (or (temp-marker-cursor-pos cm)\n      (.getCursor cm)))\n\n(defn selection? [cm]\n  (.somethingSelected cm))\n\n(defn selection-text\n  \"Return selected text, or nil\"\n  [cm]\n  (when (.somethingSelected cm)\n    (.getSelection cm)))\n\n(defn set-cursor! [cm pos]\n  (unset-temp-marker! cm)\n  (let [pos (cond-> pos\n                    (map? pos) (range->Pos))]\n    (.setCursor cm pos nil #js {:scroll false}))\n  cm)\n\n(defn set-preserve-cursor!\n  \"If value is different from editor's current value, set value, retain cursor position\"\n  [editor value]\n  (when-not (identical? value (.getValue editor))\n    (let [cursor-pos (get-cursor editor)]\n      (.setValue editor (str value))\n      (if (-> editor (aget \"state\" \"focused\"))\n        (.setCursor editor cursor-pos nil #js {:scroll false}))))\n  editor)\n\n(defn range->positions\n  \"Given a Clojure-style column and line range, return Codemirror-compatible `from` and `to` positions\"\n  [{:keys [line column end-line end-column] :as node}]\n  [(CM/Pos line column)\n   (CM/Pos (or end-line line) (or end-column column))])\n\n(defn mark-range!\n  \"Add marks to a collection of Clojure-style ranges\"\n  [cm range payload]\n  (let [[from to] (range->positions range)]\n    (.markText cm from to payload)))\n\n(defn mark-ranges!\n  \"Add marks to a collection of Clojure-style ranges\"\n  [cm ranges payload]\n  (->> (mapv range->positions ranges)\n       (reduce (fn [out [from to]]\n                 (conj out (.markText cm from to payload))) [])))\n\n(defn range-text [cm range]\n  (let [[from to] (range->positions range)]\n    (.getRange cm from to)))\n\n(defn select-range\n  \"Copy a {:line .. :column ..} range from a CodeMirror instance.\"\n  [cm range]\n  (let [[from to] (range->positions range)]\n    (.setSelection cm from to #js {:scroll false})))\n\n(defn replace-range!\n  ([cm s from {:keys [line column]}]\n   (replace-range! cm s (merge from {:end-line line :end-column column})))\n  ([cm s {:keys [line column end-line end-column]}]\n   (.replaceRange cm s\n                  (Pos line column)\n                  (Pos (or end-line line) (or end-column column)))))\n\n(defn temp-select-node! [cm node]\n  (set-temp-marker! cm)\n  (select-range cm (range/bounds node)))\n\n(defn pos->boundary\n  ([pos]\n   {:line (or (.-line pos) 0)\n    :column (.-ch pos)})\n  ([pos side]\n   (case side :left {:line (or (.-line pos) 0)\n                     :column (.-ch pos)}\n              :right {:end-line (or (.-line pos) 0)\n                      :end-column (.-ch pos)})))\n\n(defn selection-bounds [sel]\n  (merge (pos->boundary (.from sel) :left)\n         (pos->boundary (.to sel) :right)))\n\n(defn current-selection-bounds\n  [cm]\n  (if (.somethingSelected cm)\n    (let [sel (first (.listSelections cm))]\n      (selection-bounds sel))\n    (let [cur (get-cursor cm)]\n      (pos->boundary cur))))\n\n(defn highlight-range [pos node]\n  (if (and (node/has-edges? node)\n           (not= :string (:tag node))\n           (range/within-inner? node pos)\n           (not (nav/prefix-parents (:tag node))))\n    (range/inner-range node)\n    node))\n\n(defn select-at-cursor [{{:keys [loc pos]} :magic/cursor :as cm} top-loc?]\n  (when-let [cursor-loc (sexp-near pos loc {:direction :left})]\n    (let [pos (Pos->range (get-cursor cm))\n          node (if top-loc? (z/node (nav/top-loc cursor-loc))\n                            (->> (nav/include-prefix-parents cursor-loc)\n                                 (z/node)\n                                 (highlight-range pos)))]\n      (when (and node (not (node/whitespace? node)))\n        (temp-select-node! cm node)))))\n\n(def mac? (let [platform (.. js/navigator -platform)]\n            (or (string/starts-with? platform \"Mac\")\n                (string/starts-with? platform \"iP\"))))\n\n(defn keyup-selection-update! [cm e]\n  (when-not (if mac? (.-metaKey e)\n                     (.-ctrlKey e))\n    (return-to-temp-marker! cm)))\n\n(defn clear-brackets! [cm]\n  (doseq [handle (get-in cm [:magic/cursor :handles])]\n    (.clear handle))\n  (swap! cm update :magic/cursor dissoc :handles))\n\n(defn match-brackets! [cm node]\n  (clear-brackets! cm)\n  (when (some-> node (node/may-contain-children?))\n    (swap! cm assoc-in [:magic/cursor :handles]\n           (mark-ranges! cm (range/node-highlights node) #js {:className \"CodeMirror-matchingbracket\"}))))\n\n(defn clear-parse-errors! [cm]\n  (doseq [handle (get-in cm [:magic/errors :handles])]\n    (.clear handle))\n  (swap! cm update :magic/errors dissoc :handles))\n\n(defn highlight-parse-errors! [cm error-ranges]\n  (clear-parse-errors! cm)\n  (let [handles (into [] (for [node error-ranges]\n                           (mark-range! cm node #js {:className (str \"error-text\"\n                                                                     (when-let [tag (some-> (get-in node [:info :tag])\n                                                                                            (name))]\n                                                                       (str \" cm-\" tag)))})))]\n    (swap! cm assoc-in [:magic/errors :handles] handles)))\n\n;; todo\n;; cursor tracking w/ AST\n#_(defn highlight-cursor! [cm cursor]\n    (some-> (get cm :cursor/handle)\n            (.clear))\n    (swap! cm assoc :cursor/handle\n           (.setBookmark cm (range->Pos cursor) #js {:widget (cursor-bookmark)})))\n\n(defn set-value-and-refresh! [editor value]\n      (set-preserve-cursor! editor value)\n      (.refresh editor))\n\n(defn set-zipper!\n  ([editor zipper & [{:keys [decorate?]\n                      :or {decorate? true}}]]\n   (let [ast (z/node zipper)]\n     (swap! editor merge {:zipper zipper\n                          :ast ast})\n     (when-let [on-ast (get-in editor [:view :on-ast])]\n       (on-ast ast))\n     (when decorate?\n       (highlight-parse-errors! editor (get (z/node zipper) :invalid-nodes))))))\n\n(defn update-ast!\n  [{{:as ast\n     ast-source :source} :ast :as editor}]\n  (let [value (.getValue editor)]\n    (when (or (nil? ast-source)\n              (not= ast-source value))\n      (let [{:keys [invalid-nodes] :as next-ast} (try (tree/ast value)\n                                                      (catch js/Error e\n                                                        (prn \"error in update-ast!\" e)\n                                                        (js/console.log (.-stack e))\n                                                        {:errors []}))]\n        (highlight-parse-errors! editor invalid-nodes)\n        (when (not= next-ast ast)\n          (set-zipper! editor (tree/ast-zip next-ast) {:decorate? false}))))))\n\n(defn update-cursor!\n  [{:keys [zipper magic/brackets?]\n    {prev-pos :pos prev-zipper :prev-zipper} :magic/cursor\n    :as cm} & [force?]]\n  (when (or (.hasFocus cm) (nil? prev-zipper) force?)\n    (when-let [pos (pos->boundary (get-cursor cm))]\n      (when (or (not= pos prev-pos)\n                (not= prev-zipper zipper))\n        (when-let [loc (some-> zipper (nav/navigate pos))]\n          (let [bracket-loc (sexp-near pos loc {:ignore? #(or (node/whitespace? %)\n                                                              (get % :invalid?))})\n                bracket-node (z/node bracket-loc)]\n            (when brackets? (match-brackets! cm bracket-node))\n            (swap! cm update :magic/cursor merge {:loc loc\n                                                  :node (z/node loc)\n                                                  :bracket-loc bracket-loc\n                                                  :bracket-node bracket-node\n                                                  :pos pos\n                                                  :prev-zipper zipper})))))))\n\n(defn require-opts [cm opts]\n  (doseq [opt opts] (.setOption cm opt true)))\n\n\n(specify! (.-prototype CM)\n\n  ILookup\n  (-lookup\n    ([this k] (get (j/get this :cljs$state) k))\n    ([this k not-found] (get (aget this \"cljs$state\") k not-found)))\n\n  IDeref\n  (-deref [this] (j/get this :cljs$state))\n\n  IWatchable\n  (-add-watch [this key f]\n    (swap! this update ::watches assoc key f))\n  (-remove-watch [this key]\n    (swap! this update ::watches dissoc key))\n  (-notify-watches [this oldval newval]\n    (doseq [watcher (vals (::watches @this))]\n      (watcher this oldval newval)))\n\n  IReset\n  (-reset! [this newval]\n    (let [old-val @this]\n      (j/assoc! this :cljs$state newval)\n      (-notify-watches this old-val newval)))\n\n  ISwap\n  (-swap!\n    ([this f] (-reset! this (f @this)))\n    ([this f a] (-reset! this (f @this a)))\n    ([this f a b] (-reset! this (f @this a b)))\n    ([this f a b xs] (-reset! this (apply f (concat (list @this a b) xs)))))\n\n  ITransientAssociative\n  (-assoc! [this key val]\n    (assert (= key :ast))\n    (swap! this assoc :ast val)\n    (update-ast! this))\n\n  Editor/IKind\n  (kind [this] :code)\n\n  Editor/IHistory\n\n  (get-selections [cm]\n    (if-let [root-cursor (temp-marker-cursor-pos cm)]\n      #js [#js {:anchor root-cursor\n                :head root-cursor}]\n      (.listSelections cm)))\n\n  (put-selections! [cm selections]\n    (.setSelections cm selections))\n\n  Editor/ICursor\n\n  (-focus! [this coords]\n    (let [coords (if (keyword? coords)\n                   (case coords :end (Pos (.lineCount this) (count (.getLine this (.lineCount this))))\n                                :start (Pos 0 0))\n                   coords)]\n      (doto this\n        (.focus)\n        (cond-> coords (.setCursor coords nil #js {:scroll false})))\n      (Editor/scroll-into-view (Editor/cursor-coords this))))\n\n  (get-cursor [this]\n    (when-not (.somethingSelected this)\n      (get-cursor this)))\n  (set-cursor [this position]\n    (.setCursor this position))\n  (coords-cursor [this client-x client-y]\n    (.coordsChar this #js {:left client-x\n                           :top client-y} \"window\"))\n  (cursor-coords [this]\n    (let [coords (.cursorCoords this)]\n      ;; TODO\n      ;; these coords don't seem to be correct when using them\n      ;; to scroll the cursor into view.\n      #_(.log js/console \"cm\" #js {:left (- (.-left coords) (.-scrollX js/window))\n                                   :right (- (.-right coords) (.-scrollX js/window))\n                                   :top (- (.-top coords) (.-scrollY js/window))\n                                   :bottom (- (.-bottom coords) (.-scrollY js/window))})\n      #js {:left (- (.-left coords) (.-scrollX js/window))\n           :right (- (.-right coords) (.-scrollX js/window))\n           :top (- (.-top coords) (.-scrollY js/window))\n           :bottom (- (.-bottom coords) (.-scrollY js/window))}))\n\n  (start [this] (Pos 0 0))\n  (end [this] (Pos (.lastLine this) (count (.getLine this (.lastLine this))))))\n\n\n(.defineOption CM \"magicTree\" false\n               (fn [cm on?]\n                 (when on?\n                   (require-opts cm [\"cljsState\"])\n                   (.on cm \"change\" update-ast!)\n                   (update-ast! cm))))\n\n(.defineOption CM \"magicCursor\" false\n               (fn [cm on?]\n                 (when on?\n                   (require-opts cm [\"magicTree\"])\n                   (.on cm \"focus\" update-cursor!)\n                   (.on cm \"cursorActivity\" update-cursor!)\n                   (.on cm \"change\" update-cursor!)\n                   (update-cursor! cm))))\n\n(.defineOption CM \"magicBrackets\" false\n               (fn [cm on?]\n                 (when on?\n                   (require-opts cm [\"magicCursor\"])\n\n                   (.on cm \"keyup\" keyup-selection-update!)\n                   #_(.on cm \"keydown\" keyup-selection-update!)\n                   (events/listen js/window \"blur\" #(return-to-temp-marker! cm))\n                   (events/listen js/window \"blur\" #(clear-brackets! cm))\n\n                   (swap! cm assoc :magic/brackets? true))))\n\n(.defineOption CM \"cljsState\" false\n               (fn [cm] (aset cm \"cljs$state\" (or (aget cm \"cljs$state\") {::watches {}}))))"]}