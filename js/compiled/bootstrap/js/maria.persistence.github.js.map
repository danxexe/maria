{"version":3,"sources":["maria/persistence/github.cljs"],"mappings":";;;;;;;;AAQA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;AAED,AAAA,AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAAMO,AAAIC,AAAKC;AAArB,AACE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAA2D,AAAA,AAACE,AAAKC;AAAjE,AAAA,AAAAH,AAAAA,AAACC,AAAAA,AAAAA;;AACD,AAAA,AAAQG,AAAa,AAACC,AAAS,AAAA,AAACC,AAAQ,AAAA,AAAKT,AAAW,AAAMU,AACtB,AAAKC;AAAL,AACE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAA2DC;AAA3D,AAAA,AAAAD,AAAAA,AAACR,AAAAA,AAAAA;;AACD,AAACH,AAAAA,AAAAA,AAAGU,AAAAA;AAAKT,AAAOA;;;AAL5D,AAAA,AAAA,AAAMT;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAA,AAAAJ,AAAAG,AAAAJ;;;AAAA,AAOA,AAAA,AAAAoB,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAgEU;AAAhE,AAAAN,AAAAJ,AAAA,AAA2BM;AAA3B,AAAAF,AAAAJ,AAAA,AAAoCf;AAApC,AAAAmB,AAAAJ,AAAA,AAAwCO;AAAxC,AAAAH,AAAAJ,AAAA,AAA2CQ;AAA3C,AAAAJ,AAAAJ,AAAA,AAAiDS;AAAjD,AAAA,AAAA,AAAA,AAAA,AACcD,AACA,AAAA,AAAeA,AACf,AAAKD;;AAEnB;;;AAAA,AAAAI,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAX,AAAA,AAAAW,AAAA,AAAA,AAAA,AAAA,AAAAV,AAAAC,AAAAS,AAAAA;AAAAA,AAEuEO;AAFvE,AAAAf,AAAAQ,AAAA,AAEWE;AAFX,AAAAV,AAAAQ,AAAA,AAEuBG;AAFvB,AAAAX,AAAAQ,AAAA,AAE6BI;AAF7B,AAAAZ,AAAAQ,AAAA,AAEwCK;AAFxC,AAAAb,AAAAQ,AAAA,AAE8CN;AAF9C,AAAAF,AAAAQ,AAAA,AAEuDL;AAFvD,AAAAH,AAAAQ,AAAA,AAE0DM;AAF1D,AAGE,AAAAE,AAAmC,AAAI,AAACE,AAAUC,AAAiBhB,AAC9BiB,AACA,AAACnB,AAAYY;AAFlDG,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnB,AAAA,AAAAmB,AAAA,AAAA,AAAA,AAAA,AAAAlB,AAAAC,AAAAiB,AAAAA;AAAAA,AAA4BH;AAA5B,AAAAb,AAAAgB,AAAA,AAAcC;AAAd,AAGE,AAAMN,AACW,AAACU,AAAU;AAAAC,AAAKE,AAAEC;AAAP,AAAA,AAAAF,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1B,AAAA,AAAA0B,AAAA,AAAA,AAAA,AAAA,AAAAzB,AAAAC,AAAAwB,AAAAA;AAAAA,AACuBI;AADvB,AAAA3B,AAAAuB,AAAA,AAAwBG;AAAxB,AAEE,AAAAE,AAAQJ;AAAR,AAAA,AACQ,AAAA,AAACK,AAAEH;AACH,AAAAE,AAACE,AAAM,AAACC,AAAKN,AAAU,AAAA,AAAA,AAAA,AAAA,AAACO,AAAYL;;AAF5CC;;;AAHbjB,AACA;AADjB,AAME,AAAM,AAACsB,AAAItB;AAAX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACuBR,AACAS,AACAK,AACuBP,AACA,AAAA,AAAU,AAACjC,AAAMqC,AACjBX,AACAU,AACAX,AAEAS;;AAV9C;;;AAYN;;;AAAA,AAAAuB,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtC,AAAA,AAAAsC,AAAA,AAAA,AAAA,AAAA,AAAArC,AAAAC,AAAAoC,AAAAA;AAAA,AAAAnC,AAAAmC,AAAA,AAEWxB;AAFX,AAAAX,AAAAmC,AAAA,AAEiBzB;AAFjB,AAGE,AAAA2B,AAAA,AAAA,AACU,AAAChB,AAAU;AAAKG,AAAEC,AAASE;AAAhB,AACE,AAACG,AAAMN,AAAEC,AAAS,AAAA,AAAA,AAAA,AAACO,AAAYL;;AAD5C,AAC4EhB;AAFtF,AAAA,AAGED;AAAY,AAAA2B,AAAA,AAACP,AAAmBpB;;AAHlC2B;;;AAKF,AAAA,AAAMC,AAAUnC,AAAGrB;AAAnB,AACE,AAACyD,AAAK,AAAA,AAAqCpC,AACrC,AAAKX;AAAL,AACE,AAAMgD,AAAO,AAAUhD;AAAvB,AACE,AAAI,AAAYgD;AACd,AAAAC,AAAA,AAAA,AAAY,AAAChC,AAAc,AAAA,AAAA,AAACiC,AAAQ,AAAkBF;AAAtD,AAAA,AAAAC,AAAAA,AAAC3D,AAAAA,AAAAA;;AACD,AAAA6D,AAAA,AAAA,AAAY,AAAeH;AAA3B,AAAA,AAAAG,AAAAA,AAAC7D,AAAAA,AAAAA;;AALb,AAAA,AAQM,AAAA,AAAC8D;;AAET,AAAA,AAAMC,AAAShE,AAAIC;AAAnB,AACE,AAACyD,AAAK1D,AAAI,AAAKW;AAAL,AACE,AAAMgD,AAAO,AAAUhD;AAAvB,AACE,AAAI,AAAYgD;AACd,AAAAM,AAAA,AAAA,AAAY,AAAkBN;AAA9B,AAAA,AAAAM,AAAAA,AAAChE,AAAAA,AAAAA;;AACD,AAAAiE,AAAA,AAAA,AAAY,AAAeP;AAA3B,AAAA,AAAAO,AAAAA,AAACjE,AAAAA,AAAAA;;AAJjB;;AAOF,AAAA,AAAMkE,AAAW7C;AAAjB,AACE,AAAU,AAAA8C,AAAO9C;AAAP+C,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AAAX;AAAA,AACE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAgCjD;AAAhC,AAAA,AAAAiD,AAAAA,AAACnE,AAAAA,AAAAA;;;AAEH,AAACqD,AAASnC,AAAG,AAAAkD;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzD,AAAA,AAAAyD,AAAA,AAAA,AAAA,AAAA,AAAAxD,AAAAC,AAAAuD,AAAAA;AAAA,AAAAtD,AAAAsD,AAAA,AAAaC;AAAb,AAAAvD,AAAAsD,AAAA,AAAmBE;AAAnB,AACE,AAAAC,AAAA,AAAc,AAAA,AAAA,AAAA,AAACC,AACM,AAAAC,AAAIJ;AAAJ,AAAA,AAAAI;AAAAA;;AAAA,AAAA,AACsBH;;;AAF3C,AAAA,AAAAC,AAAAA,AAACxE,AAAAA,AAAAA;;;AAIlB,AAAA,AAAM2E,AAAe/E;AAArB,AACE,AAAMsB,AAAG,AAAC0D,AAAsBhF;AAAhC,AACE,AAAU,AAAAiF,AAAO3D;AAAP4D,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC,AAACZ,AAAAA,AAAAA;;AAAX;AAAA,AACE,AAAAa,AAAA,AAAA,AAAA,AAAA,AAAA,AAAgC7D;AAAhC,AAAA,AAAA6D,AAAAA,AAAC/E,AAAAA,AAAAA;;;AAEH,AAAC4D,AAAQhE,AAAI;AAAAoF;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArE,AAAA,AAAAqE,AAAA,AAAA,AAAA,AAAA,AAAApE,AAAAC,AAAAmE,AAAAA;AAAA,AAAAlE,AAAAkE,AAAA,AAAaX;AAAb,AAAAvD,AAAAkE,AAAA,AAAmBV;AAAnB,AACE,AAAM/B,AAAS,AAAC0C,AAAK,AAAA,AAACC,AAAavF;AAAnC,AACE,AAAAwF,AAAA,AAAc,AAAA,AAAA,AAAA,AAAA,AAACX,AAAwBvD,AAElB,AAAAwD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAwClC,AAAmB8B;AAA3D,AAAA,AAAAI;AAAAA;;AAAA,AAAA,AAEsBH;;;AAJ3C,AAAA,AAAAa,AAAAA,AAACpF,AAAAA,AAAAA;;;;AAMtB,AAAA,AAAMqF,AAAgBrD,AAASnC;AAA/B,AACE,AAACyD,AAAK,AAAA,AAAA,AAAqCtB,AACrC,AAAKzB;AAAL,AACE,AAAMgD,AAAO,AAAUhD;AAAvB,AACE,AAAI,AAAYgD;AACd,AAAA+B,AAAA,AAAA,AAAY,AAACC,AAAK/D,AAAc,AAAA,AAAA,AAACiC,AAAQ,AAAkBF;AAA3D,AAAA,AAAA+B,AAAAA,AAACzF,AAAAA,AAAAA;;AACD,AAAA,AAAA,AAACA,AAAAA,AAAAA;;AALb,AAAA,AAQM,AAAA,AAAC8D;;AAET,AAAA,AAAM6B,AAAiBxD;AAAvB,AACE,AAAAyD,AAAMzD;AAAN,AAAA,AAAAyD;AAAA;AAAA;;;;AAGE,AAAU,AAAAC,AAAO1D;AAAP2D,AAAA;AAAA,AAAA,AAAAD,AAAAC,AAAAD,AAAAC,AAACzB,AAAAA,AAAAA;;AAAX;;AAAA,AACE,AAAA0B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAgC5D;AAAhC,AAAA,AAAA4D,AAAAA,AAAC5F,AAAAA,AAAAA;;AAED,AAACqF,AAAerD,AAAS;AAAA6D;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlF,AAAA,AAAAkF,AAAA,AAAA,AAAA,AAAA,AAAAjF,AAAAC,AAAAgF,AAAAA;AAAA,AAAA/E,AAAA+E,AAAA,AAAaxB;AAAb,AAAAvD,AAAA+E,AAAA,AAAmBvB;AAAnB,AACE,AAAAwB,AAAa,AAAA,AAAA,AAAA,AAAIzB,AACF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC0B,AAAK1B,AACUtC,AACAA,AACPuC;AAJxB,AAAA,AAAAwB,AAAAA,AAAC/F,AAAAA,AAAAA;;;;;;;AAMlC,AAAA,AAAMiG,AAAYC,AAAQpE,AAAUjC;AAApC,AACE,AAACyD,AAAK,AAAA,AAAqC4C,AACrC,AAAK3F;AAAL,AACE,AAAMgD,AAAO,AAAUhD;AAAvB,AACE,AAAI,AAAYgD;AACd,AAAA4C,AAAA,AAAA,AAAgB,AAAkB5C,AAClB,AAAA,AAAA,AAACE,AACD,AAACjC;AAFjB,AAAA,AAAA2E,AAAAA,AAACtG,AAAAA,AAAAA;;AAGD,AAAAuG,AAAA,AAAA,AAAY,AAAe7C;AAA3B,AAAA,AAAA6C,AAAAA,AAACvG,AAAAA,AAAAA;;AAPb,AASWiC,AAAU,AAACuE,AAAS,AAAYC,AACrC,AAAA,AAAC3C;;AAET,AAAA,AAAM4C,AAAazE,AAAUjC;AAA7B,AACE,AAACyD,AAAK,AACA,AAAK/C;AAAL,AACE,AAAMgD,AAAO,AAAUhD;AAAvB,AACE,AAAI,AAAYgD;AACd,AAAAiD,AAAA,AAAA,AAAgB,AAAkBjD,AAClB,AAAA,AAAA,AAACE,AACD,AAACjC;AAFjB,AAAA,AAAAgF,AAAAA,AAAC3G,AAAAA,AAAAA;;AAGD,AAAA4G,AAAA,AAAA,AAAY,AAAelD;AAA3B,AAAA,AAAAkD,AAAAA,AAAC5G,AAAAA,AAAAA;;AAPb,AASWiC,AAAU,AAACuE,AAAS,AAAYC,AACrC,AAAA,AAAC3C;;AAeT,AAAA,AAAM+C,AAAcxF,AAAGrB;AAAvB,AACE,AAACyD,AAAK,AAAA,AAAoCpC,AACpC,AAAKX;AAAL,AACE,AAAMgD,AAAO,AAAUhD;AAAvB,AACE,AAAI,AAAYgD;AACd,AAAAoD,AAAA,AAAA,AAAY,AAAAC,AAAO,AAAkBrD;AAAzBsD,AAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAC,AAAAF,AAAAC;;AAAA,AAAAF,AAAAC;;AAAAG;;;AAAZ,AAAA,AAAAL,AAAAA,AAAC9G,AAAAA,AAAAA;;AACD,AAAAoH,AAAA,AAAA,AAAY,AAAe1D;AAA3B,AAAA,AAAA0D,AAAAA,AAACpH,AAAAA,AAAAA;;AALb,AAAA,AAQM,AAAA,AAAC8D","names":["G__67448","chia.db/merge-schema!","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","maria.persistence.github/send","seq67450","G__67451","cljs.core/first","cljs.core/next","G__67452","self__4717__auto__","url","cb","args","G__67465","chia.db/transact!","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","goog.net.XhrIo/send","cljs.core/to-array","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","js/Date","e","G__67471","cljs.core/dec","p__67473","map__67474","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","maria.persistence.github/gist-person","html_url","id","login","gists_url","person","p__67483","map__67484","maria.persistence.github/gist->project","description","files","updated_at","owner","history","gist-data","map__67486","username","cljs.core/contains?","maria.curriculum/by-id","maria.curriculum/owner","cljs.core/reduce-kv","p__67488","map__67489","m","filename","language","file","G__67496","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/name","cljs.core/select-keys","cljs.core/seq","p__67499","map__67500","maria.persistence.github/project->gist","G__67508","maria.persistence.github/get-gist","maria.persistence.github.send.cljs$core$IFn$_invoke$arity$variadic","target","G__67512","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","G__67514","maria.persistence.tokens/auth-headers","maria.persistence.github/get-url","G__67520","G__67521","maria.persistence.github/load-gist","G__67525","G__67526","chia.db/get","G__67527","p__67529","map__67530","value","error","G__67532","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","or__4131__auto__","maria.persistence.github/load-url-text","js/encodeURIComponent","G__67540","G__67541","G__67542","p__67545","map__67546","cljs.core/last","clojure.string.split.cljs$core$IFn$_invoke$arity$2","G__67549","maria.persistence.github/get-user-gists","G__67557","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","maria.persistence.github/load-user-gists","G__67559","G__67561","G__67562","G__67564","p__67567","map__67568","G__67573","cljs.core.into.cljs$core$IFn$_invoke$arity$2","maria.persistence.github/patch-gist","gist-id","G__67579","G__67580","cljs.core/clj->js","js/JSON","maria.persistence.github/create-gist","G__67584","G__67585","maria.persistence.github/get-username","G__67587","obj67589","k67590","obj67593","applied-science.js-interop.impl/in?*","js/undefined","G__67595"],"sourcesContent":["(ns maria.persistence.github\n  (:require [goog.net.XhrIo :as xhr]\n            [maria.persistence.tokens :as tokens]\n            [chia.db :as d]\n            [maria.curriculum :as curriculum]\n            [clojure.string :as string]\n            [applied-science.js-interop :as j]))\n\n(d/merge-schema! {:doc.owner/username {:db/index true}})\n\n(defn send [url cb & args]\n  (d/transact! [[:db/update-attr :remote/status :in-progress (fnil inc 0)]])\n  (.apply xhr/send nil (to-array (concat [(str url \"?ts=\" (.now js/Date))\n                                          (fn [e]\n                                            (d/transact! [[:db/update-attr :remote/status :in-progress dec]])\n                                            (cb e))] args)) args))\n\n(defn gist-person [{:keys [html_url url id login gists_url] :as person}]\n  {:username  login\n   :local-url (str \"/gists/\" login)\n   :id        (str id)})\n\n(defn gist->project\n  \"Convert a gist to local project format\"\n  [{:keys [description files updated_at owner html_url id history] :as gist-data}]\n  (let [{:keys [username] :as owner} (if (contains? curriculum/by-id id)\n                                       curriculum/owner\n                                       (gist-person owner))]\n    (let [files (->> files\n                     (reduce-kv (fn [m filename {:keys [language]\n                                                 :as   file}]\n                                  (cond-> m\n                                          (= language \"Clojure\")\n                                          (assoc (name filename) (select-keys file [:filename :truncated :content])))) {}))]\n      (when (seq files)\n        {:db/id              id\n         :updated-at         updated_at\n         :doc.owner/username username\n         :persisted          {:description          description\n                              :version              (:version (first history))\n                              :id                   id\n                              :owner                owner\n                              :remote-url           html_url\n                              :persistence/provider :gist\n                              :files                files}}))))\n\n(defn project->gist\n  \"Convert a project to gist format, for persistence\"\n  [{:keys [files description]}]\n  (cond->\n    {:files (reduce-kv (fn [m filename file]\n                         (assoc m filename (select-keys file [:filename :content]))) {} files)}\n    description (assoc :description description)))\n\n(defn get-gist [id cb]\n  (send (str \"https://api.github.com/gists/\" id)\n        (fn [e]\n          (let [target (.-target e)]\n            (if (.isSuccess target)\n              (cb {:value (gist->project (js->clj (.getResponseJson target) :keywordize-keys true))})\n              (cb {:error (.getLastError target)}))))\n        \"GET\"\n        nil\n        (tokens/auth-headers \"github.com\")))\n\n(defn get-url [url cb]\n  (send url (fn [e]\n              (let [target (.-target e)]\n                (if (.isSuccess target)\n                  (cb {:value (.getResponseText target)})\n                  (cb {:error (.getLastError target)}))))\n        \"GET\"))\n\n(defn load-gist [id]\n  (when-not (d/get id :persisted)\n    (d/transact! [{:db/id           id\n                   :loading-message \"Loading gist...\"}]))\n  (get-gist id (fn [{:keys [value error]}]\n                 (d/transact! [(merge {:loading-message false}\n                                      (or value\n                                          {:persisted-error error}))]))))\n\n(defn load-url-text [url]\n  (let [id (js/encodeURIComponent url)]\n    (when-not (d/get id :persisted)\n      (d/transact! [{:db/id           id\n                     :loading-message \"Loading...\"}]))\n    (get-url url (fn [{:keys [value error]}]\n                   (let [filename (last (string/split url #\"/\"))]\n                     (d/transact! [(merge {:db/id           id\n                                           :loading-message false}\n                                          (or {:persisted {:files                {filename {:content value}}\n                                                           :persistence/provider :http-text}}\n                                              {:persisted-error error}))]))))))\n\n(defn get-user-gists [username cb]\n  (send (str \"https://api.github.com/users/\" username \"/gists\")\n        (fn [e]\n          (let [target (.-target e)]\n            (if (.isSuccess target)\n              (cb {:value (keep gist->project (js->clj (.getResponseJson target) :keywordize-keys true))})\n              (cb nil))))\n        \"GET\"\n        nil\n        (tokens/auth-headers \"github.com\")))\n\n(defn load-user-gists [username]\n  (case username\n    \"curriculum\"\n    nil\n    (when-not (d/get username :gists)\n      (d/transact! [{:db/id           username\n                     :loading-message \"Loading gists...\"}])\n      (get-user-gists username (fn [{:keys [value error]}]\n                                 (d/transact! (if value\n                                                (into value\n                                                      [[:db/add username :gists true]\n                                                       [:db/add username :loading-message false]])\n                                                [{:error error}])))))))\n\n(defn patch-gist [gist-id gist-data cb]\n  (send (str \"https://api.github.com/gists/\" gist-id)\n        (fn [e]\n          (let [target (.-target e)]\n            (if (.isSuccess target)\n              (cb {:value (-> (.getResponseJson target)\n                              (js->clj :keywordize-keys true)\n                              (gist->project))})\n              (cb {:error (.getLastError target)}))))\n        \"PATCH\"\n        (->> gist-data (clj->js) (.stringify js/JSON))\n        (tokens/auth-headers \"github.com\")))\n\n(defn create-gist [gist-data cb]\n  (send (str \"https://api.github.com/gists\")\n        (fn [e]\n          (let [target (.-target e)]\n            (if (.isSuccess target)\n              (cb {:value (-> (.getResponseJson target)\n                              (js->clj :keywordize-keys true)\n                              (gist->project))})\n              (cb {:error (.getLastError target)}))))\n        \"POST\"\n        (->> gist-data (clj->js) (.stringify js/JSON))\n        (tokens/auth-headers \"github.com\")))\n\n#_(defn fork-gist [gist-id cb]\n    (send (str \"https://api.github.com/gists/\" gist-id \"/forks\")\n          (fn [e]\n            (let [target (.-target e)]\n              (if (.isSuccess target)\n                (cb {:value (-> (.getResponseJson target)\n                                (js->clj :keywordize-keys true)\n                                (gist->project))})\n                (cb {:error (.getLastError target)}))))\n          \"POST\"\n          nil\n          (tokens/auth-headers \"github.com\")))\n\n(defn get-username [id cb]\n  (send (str \"https://api.github.com/user/\" id)\n        (fn [e]\n          (let [target (.-target e)]\n            (if (.isSuccess target)\n              (cb {:value (j/get (.getResponseJson target) :login)})\n              (cb {:error (.getLastError target)}))))\n        \"GET\"\n        nil\n        (tokens/auth-headers \"github.com\")))\n"]}