{"version":3,"sources":["chia/routing.cljc"],"mappings":"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","names":["chia.routing/segments","route","segments","lambdaisland.uri/uri","clojure.string.split.cljs$core$IFn$_invoke$arity$3","G__66702","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","G__66706","cljs.core/last","cljs.core/pop","chia.routing/query","path","G__66709","chia.routing.util/form-decode","chia.routing/parse-path","uri","chia.routing/browser?","js/window","chia.routing/history-support?","js/goog.history.Html5History","chia.routing/query-string","m","G__66716","chia.routing.util/remove-empty","chia.routing.util/form-encode","chia.routing.util/some-str","token","this","chia.routing/get-route","js/window.location.pathname","js/window.location.search","js/window.location.hash","chia.routing/make-history","G__66736","js/window.location.protocol","js/window.location.host","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","js/goog.History","js/chia","js/chia.routing","js/chia.routing.history","chia.routing/history","G__66740","G__66742","var_args","G__66745","chia.routing/nav!","js/Error","chia.routing.nav_BANG_.cljs$core$IFn$_invoke$arity$2","add-history-state?","chia.routing/query-nav!","query","location","lambdaisland.uri/map->URI","chia.routing.nav_BANG_.cljs$core$IFn$_invoke$arity$1","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","chia.routing/swap-query!","seq66779","G__66780","cljs.core/next","self__4717__auto__","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","chia.routing/link?","el","G__66795","chia.routing/closest","pred","goog.dom/getAncestor","chia.routing/*click-event*","chia.routing/external?","link-element","map__66796","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__66797","current-host","current-protocol","applied-science.js-interop/lookup","link-host","link-protocol","link-path","or__4131__auto__","cljs.core/re-find","chia.routing/valid-anchor?","and__4120__auto__","js/document","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","chia.routing/click-event-handler","callback","e","temp__5720__auto__","ignore-click?","*click-event*-orig-val__66810","*click-event*-temp-val__66811","origin","G__66812","clojure.string/replace","chia.routing/root-click-listener","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","js/chia.routing.intercept-clicks","chia.routing/intercept-clicks","cljs.core/memoize","chia$routing$intercept.cljs$core$IFn$_invoke$arity$1","element","js/chia.routing.listeners","chia.routing/listeners","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","chia.routing/add-listener!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","chia.routing/unlisten","cljs.core/disj","G__66815","chia.routing/fire!","cljs.core/deref","chia.routing.fire_BANG_.cljs$core$IFn$_invoke$arity$1","listener-fns","route-state","G__66834","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","seq__66835","cljs.core/seq","chunk__66836","count__66837","i__66838","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","listener","js/chia.routing.start!","chia.routing/start!","chia.routing.fire_BANG_.cljs$core$IFn$_invoke$arity$0","G__66846","chia.routing/listen","p__66848","map__66850","cljs.core.get.cljs$core$IFn$_invoke$arity$3","chia.routing.listen.cljs$core$IFn$_invoke$arity$2","fire-now?","intercept-clicks?"],"sourcesContent":["(ns chia.routing\n  (:require\n    [clojure.string :as str]\n    [lambdaisland.uri :as uri]\n    [chia.routing.util :as u]\n    #?(:cljs\n       [goog.dom :as gdom])\n    [applied-science.js-interop :as j])\n  #?(:cljs (:import\n             [goog History]\n             [goog.history Html5History]\n             [goog Uri])))\n\n(defn segments\n  \"Splits path into segments, ignoring leading and trailing slashes.\"\n  [route]\n  (let [segments (-> (uri/uri route)\n                     :path\n                     (str/split #\"/\" -1))\n        segments (cond-> segments\n                         (= \"\" (first segments)) (subvec 1))]\n    (cond-> segments\n            (= \"\" (last segments)) (pop))))\n\n\n(comment\n  (assert (= (segments \"/\") []))\n  (assert (= (segments \"//\") [\"\"]))\n  (assert (= (segments \"///\") [\"\" \"\"]))\n  (assert (= (segments \"/a/b\")\n             (segments \"a/b/\")\n             (segments \"a/b\") [\"a\" \"b\"])))\n\n(defn query\n  \"Returns query parameters as map.\"\n  [path]\n  (some-> (uri/uri path)\n          :query\n          (u/form-decode)))\n\n(defn parse-path\n  \"Returns map of parsed location information for path.\"\n  [path]\n  (let [uri (uri/uri path)]\n    {:path     (:path uri)\n     :segments (segments (:path uri))\n     :query    (query uri)\n     :fragment (:fragment uri)}))\n\n(def browser?\n  #?(:cljs (exists? js/window)\n     :clj  false))\n\n(def history-support?\n  (when browser? #?(:cljs (.isSupported Html5History))))\n\n(defn query-string\n  \"Returns query string, including '?'. Removes empty values. Returns nil if empty.\"\n  [m]\n  (some->> (u/remove-empty m)\n           (u/form-encode)\n           (u/some-str)))\n\n#?(:cljs\n   (do\n\n     ;; From http://www.lispcast.com/mastering-client-side-routing-with-secretary-and-goog-history\n     ;; Replaces this method: https://closure-library.googlecode.com/git-history/docs/local_closure_goog_history_html5history.js.source.html#line237\n     ;; Without this patch, google closure does not handle changes to query parameters.\n     (set! (.. Html5History -prototype -getUrl_)\n           (fn [token]\n             (this-as this\n               (if (.-useFragment_ this)\n                 (str \"#\" token)\n                 (str (.-pathPrefix_ this) token)))))\n\n     (defn get-route\n       \"In a browsing environment, reads the current location.\"\n       []\n       (if history-support?\n         (str js/window.location.pathname js/window.location.search js/window.location.hash)\n         (if (= js/window.location.pathname \"/\")\n           (.substring js/window.location.hash 1)\n           (str js/window.location.pathname js/window.location.search))))\n\n     (defn- make-history\n       \"Set up browser history, using HTML5 history if available.\"\n       []\n       (when browser?\n         (if history-support?\n           (doto (Html5History.)\n             (.setPathPrefix (str js/window.location.protocol\n                                  \"//\"\n                                  js/window.location.host))\n             (.setUseFragment false))\n           (if (not= \"/\" js/window.location.pathname)\n             (set! (.-location js/window) (str \"/#\" (get-route)))\n             (History.)))))\n\n     (defonce history\n       (some-> (make-history)\n               (doto (.setEnabled true))))\n\n     (defn nav!\n       \"Trigger pushstate navigation to token (path)\"\n       ([route] (nav! route true))\n       ([route add-history-state?]\n        (if add-history-state?\n          (.setToken history route)\n          (.replaceToken history route))))\n\n     (defn query-nav!\n       \"Navigates to current route with query-string replaced by the provided `query` map.\"\n       [query]\n       (let [location (.-location js/window)]\n         (-> (uri/map->URI {:path     (.-pathname location)\n                            :fragment (.-hash location)\n                            :query    (query-string query)})\n             (str)\n             (nav!))))\n\n     (defn swap-query!\n       \"Navigates to current route with query parameters modified by `f`,\n        which is passed the current query-map followed by `args`.\"\n       [f & args]\n       (-> (apply f (query (get-route)) args)\n           (query-nav!)))\n\n     (defn link?\n       \"Return true if element is a link\"\n       [el]\n       (= \"A\" (some-> el (.-tagName))))\n\n     (defn closest\n       \"Return element or first ancestor of element that matches predicate, like jQuery's .closest().\"\n       [el pred]\n       (if (pred el)\n         el\n         (gdom/getAncestor el pred)))\n\n     (def ^:dynamic *click-event* nil)\n\n     (defn external? [link-element]\n       (let [{current-host     :host\n              current-protocol :protocol} (j/lookup (.-location js/window))\n             {link-host     :host\n              link-protocol :protocol\n              link-path     :pathname} (j/lookup link-element)]\n         (or (not= current-host link-host)\n             (not= current-protocol link-protocol)\n             (re-find #\"\\.[^/]+$\" link-path))))\n\n     (defn valid-anchor? [link-element]\n       (let [^js location (.-location js/window)]\n         (and (.-hash link-element)\n              (= (.-pathname location) (.-pathname link-element))\n              (not= (.-hash location) (.-hash link-element))\n              (.getElementById js/document (subs (.-hash link-element) 1)))))\n\n     (defn click-event-handler\n       \"Intercept clicks on links with valid pushstate hrefs. Callback is passed the link's href value.\"\n       [callback ^js e]\n       (when-let [link-element (closest (.-target e) link?)]\n         (let [ignore-click? (or (external? link-element)\n                                 (valid-anchor? link-element)\n                                 (.-defaultPrevented e))]\n           (when-not ignore-click?\n             (.preventDefault e)\n             (binding [*click-event* e]\n               (let [location ^js (.-location js/window)\n                     ;; in IE/Edge, link elements do not expose an `origin` attribute\n                     origin (str (.-protocol location)\n                                 \"//\"\n                                 (.-host location))]\n                 (callback (str/replace (.-href link-element) origin \"\"))))))))\n\n     (def root-click-listener (partial click-event-handler nav!))\n\n     (defonce intercept-clicks\n       ; Intercept local links (handle with router instead of reloading page).\n       (memoize\n         (fn intercept\n           ([]\n            (when browser?\n              (intercept js/document)))\n           ([element]\n            (when browser?\n              (.addEventListener element \"click\" root-click-listener))))))\n\n     (defonce ^:private listeners (atom #{}))\n\n     (defn- add-listener! [f]\n       (swap! listeners conj f))\n\n     (defn unlisten [f]\n       (swap! listeners disj f))\n\n     (defn ^:dev/after-load fire!\n       ([] (fire! @listeners))\n       ([listener-fns]\n        (let [route-state (-> (get-route)\n                              (parse-path)\n                              (cond-> *click-event*\n                                      (assoc :click-event *click-event*)))]\n          (doseq [listener listener-fns]\n            (listener route-state)))))\n\n     (defonce start!\n       (memoize\n         (fn []\n           (.addEventListener history \"navigate\" #(fire!)))))\n\n     (defn listen\n       \"Set up a listener on route changes. Options:\n\n       intercept-clicks? (boolean, `true`): For `click` events on local links, prevent page reload & fire listener instead.\n       fire-now? (boolean, `true`): executes listener immediately, with current parsed route.\n\n       Returns a key which can be passed to `unlisten` to remove listener.\"\n       ([listener]\n        (listen listener {}))\n       ([listener {:keys [fire-now?\n                          intercept-clicks?]\n                   :or   {fire-now?         true\n                          intercept-clicks? true}}]\n\n        (start!)\n\n        (when intercept-clicks?\n          (intercept-clicks))\n\n        (swap! listeners conj listener)\n\n        (when fire-now?\n          (fire! #{listener}))\n\n        listener))))\n\n"]}