{
"version":3,
"file":"module$node_modules$codemirror$mode$clojure$clojure.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/codemirror/mode/clojure/clojure.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$codemirror$mode$clojure$clojure\"] = function(global,process,require,module,exports,shadow$shims) {\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports === \"object\" && typeof module === \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define === \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"clojure\", function (options) {\n  var atoms = [\"false\", \"nil\", \"true\"];\n  var specialForms = [\".\", \"catch\", \"def\", \"do\", \"if\", \"monitor-enter\",\n      \"monitor-exit\", \"new\", \"quote\", \"recur\", \"set!\", \"throw\", \"try\", \"var\"];\n  var coreSymbols = [\"*\", \"*'\", \"*1\", \"*2\", \"*3\", \"*agent*\",\n      \"*allow-unresolved-vars*\", \"*assert*\", \"*clojure-version*\",\n      \"*command-line-args*\", \"*compile-files*\", \"*compile-path*\",\n      \"*compiler-options*\", \"*data-readers*\", \"*default-data-reader-fn*\", \"*e\",\n      \"*err*\", \"*file*\", \"*flush-on-newline*\", \"*fn-loader*\", \"*in*\",\n      \"*math-context*\", \"*ns*\", \"*out*\", \"*print-dup*\", \"*print-length*\",\n      \"*print-level*\", \"*print-meta*\", \"*print-namespace-maps*\",\n      \"*print-readably*\", \"*read-eval*\", \"*reader-resolver*\", \"*source-path*\",\n      \"*suppress-read*\", \"*unchecked-math*\", \"*use-context-classloader*\",\n      \"*verbose-defrecords*\", \"*warn-on-reflection*\", \"+\", \"+'\", \"-\", \"-'\",\n      \"->\", \"->>\", \"->ArrayChunk\", \"->Eduction\", \"->Vec\", \"->VecNode\",\n      \"->VecSeq\", \"-cache-protocol-fn\", \"-reset-methods\", \"..\", \"/\", \"<\", \"<=\",\n      \"=\", \"==\", \">\", \">=\", \"EMPTY-NODE\", \"Inst\", \"StackTraceElement->vec\",\n      \"Throwable->map\", \"accessor\", \"aclone\", \"add-classpath\", \"add-watch\",\n      \"agent\", \"agent-error\", \"agent-errors\", \"aget\", \"alength\", \"alias\",\n      \"all-ns\", \"alter\", \"alter-meta!\", \"alter-var-root\", \"amap\", \"ancestors\",\n      \"and\", \"any?\", \"apply\", \"areduce\", \"array-map\", \"as->\", \"aset\",\n      \"aset-boolean\", \"aset-byte\", \"aset-char\", \"aset-double\", \"aset-float\",\n      \"aset-int\", \"aset-long\", \"aset-short\", \"assert\", \"assoc\", \"assoc!\",\n      \"assoc-in\", \"associative?\", \"atom\", \"await\", \"await-for\", \"await1\",\n      \"bases\", \"bean\", \"bigdec\", \"bigint\", \"biginteger\", \"binding\", \"bit-and\",\n      \"bit-and-not\", \"bit-clear\", \"bit-flip\", \"bit-not\", \"bit-or\", \"bit-set\",\n      \"bit-shift-left\", \"bit-shift-right\", \"bit-test\", \"bit-xor\", \"boolean\",\n      \"boolean-array\", \"boolean?\", \"booleans\", \"bound-fn\", \"bound-fn*\",\n      \"bound?\", \"bounded-count\", \"butlast\", \"byte\", \"byte-array\", \"bytes\",\n      \"bytes?\", \"case\", \"cast\", \"cat\", \"char\", \"char-array\",\n      \"char-escape-string\", \"char-name-string\", \"char?\", \"chars\", \"chunk\",\n      \"chunk-append\", \"chunk-buffer\", \"chunk-cons\", \"chunk-first\", \"chunk-next\",\n      \"chunk-rest\", \"chunked-seq?\", \"class\", \"class?\", \"clear-agent-errors\",\n      \"clojure-version\", \"coll?\", \"comment\", \"commute\", \"comp\", \"comparator\",\n      \"compare\", \"compare-and-set!\", \"compile\", \"complement\", \"completing\",\n      \"concat\", \"cond\", \"cond->\", \"cond->>\", \"condp\", \"conj\", \"conj!\", \"cons\",\n      \"constantly\", \"construct-proxy\", \"contains?\", \"count\", \"counted?\",\n      \"create-ns\", \"create-struct\", \"cycle\", \"dec\", \"dec'\", \"decimal?\",\n      \"declare\", \"dedupe\", \"default-data-readers\", \"definline\", \"definterface\",\n      \"defmacro\", \"defmethod\", \"defmulti\", \"defn\", \"defn-\", \"defonce\",\n      \"defprotocol\", \"defrecord\", \"defstruct\", \"deftype\", \"delay\", \"delay?\",\n      \"deliver\", \"denominator\", \"deref\", \"derive\", \"descendants\", \"destructure\",\n      \"disj\", \"disj!\", \"dissoc\", \"dissoc!\", \"distinct\", \"distinct?\", \"doall\",\n      \"dorun\", \"doseq\", \"dosync\", \"dotimes\", \"doto\", \"double\", \"double-array\",\n      \"double?\", \"doubles\", \"drop\", \"drop-last\", \"drop-while\", \"eduction\",\n      \"empty\", \"empty?\", \"ensure\", \"ensure-reduced\", \"enumeration-seq\",\n      \"error-handler\", \"error-mode\", \"eval\", \"even?\", \"every-pred\", \"every?\",\n      \"ex-data\", \"ex-info\", \"extend\", \"extend-protocol\", \"extend-type\",\n      \"extenders\", \"extends?\", \"false?\", \"ffirst\", \"file-seq\", \"filter\",\n      \"filterv\", \"find\", \"find-keyword\", \"find-ns\", \"find-protocol-impl\",\n      \"find-protocol-method\", \"find-var\", \"first\", \"flatten\", \"float\",\n      \"float-array\", \"float?\", \"floats\", \"flush\", \"fn\", \"fn?\", \"fnext\", \"fnil\",\n      \"for\", \"force\", \"format\", \"frequencies\", \"future\", \"future-call\",\n      \"future-cancel\", \"future-cancelled?\", \"future-done?\", \"future?\",\n      \"gen-class\", \"gen-interface\", \"gensym\", \"get\", \"get-in\", \"get-method\",\n      \"get-proxy-class\", \"get-thread-bindings\", \"get-validator\", \"group-by\",\n      \"halt-when\", \"hash\", \"hash-combine\", \"hash-map\", \"hash-ordered-coll\",\n      \"hash-set\", \"hash-unordered-coll\", \"ident?\", \"identical?\", \"identity\",\n      \"if-let\", \"if-not\", \"if-some\", \"ifn?\", \"import\", \"in-ns\", \"inc\", \"inc'\",\n      \"indexed?\", \"init-proxy\", \"inst-ms\", \"inst-ms*\", \"inst?\", \"instance?\",\n      \"int\", \"int-array\", \"int?\", \"integer?\", \"interleave\", \"intern\",\n      \"interpose\", \"into\", \"into-array\", \"ints\", \"io!\", \"isa?\", \"iterate\",\n      \"iterator-seq\", \"juxt\", \"keep\", \"keep-indexed\", \"key\", \"keys\", \"keyword\",\n      \"keyword?\", \"last\", \"lazy-cat\", \"lazy-seq\", \"let\", \"letfn\", \"line-seq\",\n      \"list\", \"list*\", \"list?\", \"load\", \"load-file\", \"load-reader\",\n      \"load-string\", \"loaded-libs\", \"locking\", \"long\", \"long-array\", \"longs\",\n      \"loop\", \"macroexpand\", \"macroexpand-1\", \"make-array\", \"make-hierarchy\",\n      \"map\", \"map-entry?\", \"map-indexed\", \"map?\", \"mapcat\", \"mapv\", \"max\",\n      \"max-key\", \"memfn\", \"memoize\", \"merge\", \"merge-with\", \"meta\",\n      \"method-sig\", \"methods\", \"min\", \"min-key\", \"mix-collection-hash\", \"mod\",\n      \"munge\", \"name\", \"namespace\", \"namespace-munge\", \"nat-int?\", \"neg-int?\",\n      \"neg?\", \"newline\", \"next\", \"nfirst\", \"nil?\", \"nnext\", \"not\", \"not-any?\",\n      \"not-empty\", \"not-every?\", \"not=\", \"ns\", \"ns-aliases\", \"ns-imports\",\n      \"ns-interns\", \"ns-map\", \"ns-name\", \"ns-publics\", \"ns-refers\",\n      \"ns-resolve\", \"ns-unalias\", \"ns-unmap\", \"nth\", \"nthnext\", \"nthrest\",\n      \"num\", \"number?\", \"numerator\", \"object-array\", \"odd?\", \"or\", \"parents\",\n      \"partial\", \"partition\", \"partition-all\", \"partition-by\", \"pcalls\", \"peek\",\n      \"persistent!\", \"pmap\", \"pop\", \"pop!\", \"pop-thread-bindings\", \"pos-int?\",\n      \"pos?\", \"pr\", \"pr-str\", \"prefer-method\", \"prefers\",\n      \"primitives-classnames\", \"print\", \"print-ctor\", \"print-dup\",\n      \"print-method\", \"print-simple\", \"print-str\", \"printf\", \"println\",\n      \"println-str\", \"prn\", \"prn-str\", \"promise\", \"proxy\",\n      \"proxy-call-with-super\", \"proxy-mappings\", \"proxy-name\", \"proxy-super\",\n      \"push-thread-bindings\", \"pvalues\", \"qualified-ident?\",\n      \"qualified-keyword?\", \"qualified-symbol?\", \"quot\", \"rand\", \"rand-int\",\n      \"rand-nth\", \"random-sample\", \"range\", \"ratio?\", \"rational?\",\n      \"rationalize\", \"re-find\", \"re-groups\", \"re-matcher\", \"re-matches\",\n      \"re-pattern\", \"re-seq\", \"read\", \"read-line\", \"read-string\",\n      \"reader-conditional\", \"reader-conditional?\", \"realized?\", \"record?\",\n      \"reduce\", \"reduce-kv\", \"reduced\", \"reduced?\", \"reductions\", \"ref\",\n      \"ref-history-count\", \"ref-max-history\", \"ref-min-history\", \"ref-set\",\n      \"refer\", \"refer-clojure\", \"reify\", \"release-pending-sends\", \"rem\",\n      \"remove\", \"remove-all-methods\", \"remove-method\", \"remove-ns\",\n      \"remove-watch\", \"repeat\", \"repeatedly\", \"replace\", \"replicate\", \"require\",\n      \"reset!\", \"reset-meta!\", \"reset-vals!\", \"resolve\", \"rest\",\n      \"restart-agent\", \"resultset-seq\", \"reverse\", \"reversible?\", \"rseq\",\n      \"rsubseq\", \"run!\", \"satisfies?\", \"second\", \"select-keys\", \"send\",\n      \"send-off\", \"send-via\", \"seq\", \"seq?\", \"seqable?\", \"seque\", \"sequence\",\n      \"sequential?\", \"set\", \"set-agent-send-executor!\",\n      \"set-agent-send-off-executor!\", \"set-error-handler!\", \"set-error-mode!\",\n      \"set-validator!\", \"set?\", \"short\", \"short-array\", \"shorts\", \"shuffle\",\n      \"shutdown-agents\", \"simple-ident?\", \"simple-keyword?\", \"simple-symbol?\",\n      \"slurp\", \"some\", \"some->\", \"some->>\", \"some-fn\", \"some?\", \"sort\",\n      \"sort-by\", \"sorted-map\", \"sorted-map-by\", \"sorted-set\", \"sorted-set-by\",\n      \"sorted?\", \"special-symbol?\", \"spit\", \"split-at\", \"split-with\", \"str\",\n      \"string?\", \"struct\", \"struct-map\", \"subs\", \"subseq\", \"subvec\", \"supers\",\n      \"swap!\", \"swap-vals!\", \"symbol\", \"symbol?\", \"sync\", \"tagged-literal\",\n      \"tagged-literal?\", \"take\", \"take-last\", \"take-nth\", \"take-while\", \"test\",\n      \"the-ns\", \"thread-bound?\", \"time\", \"to-array\", \"to-array-2d\",\n      \"trampoline\", \"transduce\", \"transient\", \"tree-seq\", \"true?\", \"type\",\n      \"unchecked-add\", \"unchecked-add-int\", \"unchecked-byte\", \"unchecked-char\",\n      \"unchecked-dec\", \"unchecked-dec-int\", \"unchecked-divide-int\",\n      \"unchecked-double\", \"unchecked-float\", \"unchecked-inc\",\n      \"unchecked-inc-int\", \"unchecked-int\", \"unchecked-long\",\n      \"unchecked-multiply\", \"unchecked-multiply-int\", \"unchecked-negate\",\n      \"unchecked-negate-int\", \"unchecked-remainder-int\", \"unchecked-short\",\n      \"unchecked-subtract\", \"unchecked-subtract-int\", \"underive\", \"unquote\",\n      \"unquote-splicing\", \"unreduced\", \"unsigned-bit-shift-right\", \"update\",\n      \"update-in\", \"update-proxy\", \"uri?\", \"use\", \"uuid?\", \"val\", \"vals\",\n      \"var-get\", \"var-set\", \"var?\", \"vary-meta\", \"vec\", \"vector\", \"vector-of\",\n      \"vector?\", \"volatile!\", \"volatile?\", \"vreset!\", \"vswap!\", \"when\",\n      \"when-first\", \"when-let\", \"when-not\", \"when-some\", \"while\",\n      \"with-bindings\", \"with-bindings*\", \"with-in-str\", \"with-loading-context\",\n      \"with-local-vars\", \"with-meta\", \"with-open\", \"with-out-str\",\n      \"with-precision\", \"with-redefs\", \"with-redefs-fn\", \"xml-seq\", \"zero?\",\n      \"zipmap\"];\n  var haveBodyParameter = [\n      \"->\", \"->>\", \"as->\", \"binding\", \"bound-fn\", \"case\", \"catch\", \"comment\",\n      \"cond\", \"cond->\", \"cond->>\", \"condp\", \"def\", \"definterface\", \"defmethod\",\n      \"defn\", \"defmacro\", \"defprotocol\", \"defrecord\", \"defstruct\", \"deftype\",\n      \"do\", \"doseq\", \"dotimes\", \"doto\", \"extend\", \"extend-protocol\",\n      \"extend-type\", \"fn\", \"for\", \"future\", \"if\", \"if-let\", \"if-not\", \"if-some\",\n      \"let\", \"letfn\", \"locking\", \"loop\", \"ns\", \"proxy\", \"reify\", \"struct-map\",\n      \"some->\", \"some->>\", \"try\", \"when\", \"when-first\", \"when-let\", \"when-not\",\n      \"when-some\", \"while\", \"with-bindings\", \"with-bindings*\", \"with-in-str\",\n      \"with-loading-context\", \"with-local-vars\", \"with-meta\", \"with-open\",\n      \"with-out-str\", \"with-precision\", \"with-redefs\", \"with-redefs-fn\"];\n\n  CodeMirror.registerHelper(\"hintWords\", \"clojure\",\n    [].concat(atoms, specialForms, coreSymbols));\n\n  var atom = createLookupMap(atoms);\n  var specialForm = createLookupMap(specialForms);\n  var coreSymbol = createLookupMap(coreSymbols);\n  var hasBodyParameter = createLookupMap(haveBodyParameter);\n  var delimiter = /^(?:[\\\\\\[\\]\\s\"(),;@^`{}~]|$)/;\n  var numberLiteral = /^(?:[+\\-]?\\d+(?:(?:N|(?:[eE][+\\-]?\\d+))|(?:\\.?\\d*(?:M|(?:[eE][+\\-]?\\d+))?)|\\/\\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\\\\[\\]\\s\"#'(),;@^`{}~]|$))/;\n  var characterLiteral = /^(?:\\\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/;\n\n  // simple-namespace := /^[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*/\n  // simple-symbol    := /^(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)/\n  // qualified-symbol := (<simple-namespace>(<.><simple-namespace>)*</>)?<simple-symbol>\n  var qualifiedSymbol = /^(?:(?:[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*(?:\\.[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)*\\/)?(?:\\/|[^\\\\\\/\\[\\]\\d\\s\"#'(),;@^`{}~][^\\\\\\[\\]\\s\"(),;@^`{}~]*)*(?=[\\\\\\[\\]\\s\"(),;@^`{}~]|$))/;\n\n  function base(stream, state) {\n    if (stream.eatSpace()) return [\"space\", null];\n    if (stream.match(numberLiteral)) return [null, \"number\"];\n    if (stream.match(characterLiteral)) return [null, \"string-2\"];\n    if (stream.eat(/^\"/)) return (state.tokenize = inString)(stream, state);\n    if (stream.eat(/^[(\\[{]/)) return [\"open\", \"bracket\"];\n    if (stream.eat(/^[)\\]}]/)) return [\"close\", \"bracket\"];\n    if (stream.eat(/^;/)) {stream.skipToEnd(); return [\"space\", \"comment\"];}\n    if (stream.eat(/^[#'@^`~]/)) return [null, \"meta\"];\n\n    var matches = stream.match(qualifiedSymbol);\n    var symbol = matches && matches[0];\n\n    if (!symbol) {\n      // advance stream by at least one character so we don't get stuck.\n      stream.next();\n      stream.eatWhile(function (c) {return !is(c, delimiter);});\n      return [null, \"error\"];\n    }\n\n    if (symbol === \"comment\" && state.lastToken === \"(\")\n      return (state.tokenize = inComment)(stream, state);\n    if (is(symbol, atom) || symbol.charAt(0) === \":\") return [\"symbol\", \"atom\"];\n    if (is(symbol, specialForm) || is(symbol, coreSymbol)) return [\"symbol\", \"keyword\"];\n    if (state.lastToken === \"(\") return [\"symbol\", \"builtin\"]; // other operator\n\n    return [\"symbol\", \"variable\"];\n  }\n\n  function inString(stream, state) {\n    var escaped = false, next;\n\n    while (next = stream.next()) {\n      if (next === \"\\\"\" && !escaped) {state.tokenize = base; break;}\n      escaped = !escaped && next === \"\\\\\";\n    }\n\n    return [null, \"string\"];\n  }\n\n  function inComment(stream, state) {\n    var parenthesisCount = 1;\n    var next;\n\n    while (next = stream.next()) {\n      if (next === \")\") parenthesisCount--;\n      if (next === \"(\") parenthesisCount++;\n      if (parenthesisCount === 0) {\n        stream.backUp(1);\n        state.tokenize = base;\n        break;\n      }\n    }\n\n    return [\"space\", \"comment\"];\n  }\n\n  function createLookupMap(words) {\n    var obj = {};\n\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n\n    return obj;\n  }\n\n  function is(value, test) {\n    if (test instanceof RegExp) return test.test(value);\n    if (test instanceof Object) return test.propertyIsEnumerable(value);\n  }\n\n  return {\n    startState: function () {\n      return {\n        ctx: {prev: null, start: 0, indentTo: 0},\n        lastToken: null,\n        tokenize: base\n      };\n    },\n\n    token: function (stream, state) {\n      if (stream.sol() && (typeof state.ctx.indentTo !== \"number\"))\n        state.ctx.indentTo = state.ctx.start + 1;\n\n      var typeStylePair = state.tokenize(stream, state);\n      var type = typeStylePair[0];\n      var style = typeStylePair[1];\n      var current = stream.current();\n\n      if (type !== \"space\") {\n        if (state.lastToken === \"(\" && state.ctx.indentTo === null) {\n          if (type === \"symbol\" && is(current, hasBodyParameter))\n            state.ctx.indentTo = state.ctx.start + options.indentUnit;\n          else state.ctx.indentTo = \"next\";\n        } else if (state.ctx.indentTo === \"next\") {\n          state.ctx.indentTo = stream.column();\n        }\n\n        state.lastToken = current;\n      }\n\n      if (type === \"open\")\n        state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};\n      else if (type === \"close\") state.ctx = state.ctx.prev || state.ctx;\n\n      return style;\n    },\n\n    indent: function (state) {\n      var i = state.ctx.indentTo;\n\n      return (typeof i === \"number\") ?\n        i :\n        state.ctx.start + 1;\n    },\n\n    closeBrackets: {pairs: \"()[]{}\\\"\\\"\"},\n    lineComment: \";;\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-clojure\", \"clojure\");\nCodeMirror.defineMIME(\"text/x-clojurescript\", \"clojure\");\nCodeMirror.defineMIME(\"application/edn\", \"clojure\");\n\n});\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","mod","define","amd","CodeMirror","defineMode","options","base","stream","state","eatSpace","match","numberLiteral","characterLiteral","eat","tokenize","inString","skipToEnd","matches","qualifiedSymbol","symbol","lastToken","inComment","is","atom","charAt","specialForm","coreSymbol","next","eatWhile","c","delimiter","escaped","parenthesisCount","backUp","createLookupMap","words","obj","i","length","value","test","RegExp","Object","propertyIsEnumerable","atoms","specialForms","coreSymbols","registerHelper","concat","hasBodyParameter","haveBodyParameter","startState","ctx","prev","start","indentTo","token","sol","typeStylePair","type","style","current","indentUnit","column","indent","closeBrackets","pairs","lineComment","defineMIME"]
}
