{
"version":3,
"file":"goog.dom.savedrange.js",
"lineCount":32,
"mappings":"AAqBAA,IAAAC,QAAA,CAAa,qBAAb,CAAA;AAEAD,IAAAE,QAAA,CAAa,iBAAb,CAAA;AACAF,IAAAE,QAAA,CAAa,UAAb,CAAA;AAEAF,IAAAG,eAAA,CAAoB,wBAApB,CAAA;AASA;;;;AAAAH,IAAAI,IAAAC,WAAA,GAAsBC,QAAQ,EAAG;AAC/BN,MAAAO,WAAAC,KAAA,CAAqB,IAArB,CAAA;AAD+B,CAAjC;AAGAR,IAAAS,SAAA,CAAcT,IAAAI,IAAAC,WAAd,EAAmCL,IAAAO,WAAnC,CAAA;AAQA,wCAAAP,IAAAI,IAAAC,WAAAK,QAAA,GAA8BV,IAAAW,IAAAC,UAAA,CAAmB,qBAAnB,CAA9B;AAUA;;;;AAAAZ,IAAAI,IAAAC,WAAAQ,UAAAC,QAAA,GAAwCC,QAAQ,CAACC,aAAD,CAAgB;AAC9D,MAAI,IAAAC,WAAA,EAAJ;AACEjB,QAAAW,IAAAO,MAAA,CACIlB,IAAAI,IAAAC,WAAAK,QADJ,EAEI,iDAFJ,CAAA;AADF;AAMA,MAAIS,QAAQ,IAAAC,gBAAA,EAAZ;AACA,MAAI,CAACJ,aAAL;AACE,QAAAK,QAAA,EAAA;AADF;AAGA,SAAOF,KAAP;AAX8D,CAAhE;AAmBA;;;AAAAnB,IAAAI,IAAAC,WAAAQ,UAAAO,gBAAA,GAAgDpB,IAAAsB,eAAhD;;",
"sources":["goog/dom/savedrange.js"],
"sourcesContent":["// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A generic interface for saving and restoring ranges.\n *\n * @author robbyw@google.com (Robby Walker)\n */\n\n\ngoog.provide('goog.dom.SavedRange');\n\ngoog.require('goog.Disposable');\ngoog.require('goog.log');\n\ngoog.forwardDeclare('goog.dom.AbstractRange');\n\n\n\n/**\n * Abstract interface for a saved range.\n * @constructor\n * @extends {goog.Disposable}\n */\ngoog.dom.SavedRange = function() {\n  goog.Disposable.call(this);\n};\ngoog.inherits(goog.dom.SavedRange, goog.Disposable);\n\n\n/**\n * Logging object.\n * @type {goog.log.Logger}\n * @private\n */\ngoog.dom.SavedRange.logger_ = goog.log.getLogger('goog.dom.SavedRange');\n\n\n/**\n * Restores the range and by default disposes of the saved copy.  Take note:\n * this means the by default SavedRange objects are single use objects.\n * @param {boolean=} opt_stayAlive Whether this SavedRange should stay alive\n *     (not be disposed) after restoring the range. Defaults to false (dispose).\n * @return {goog.dom.AbstractRange} The restored range.\n */\ngoog.dom.SavedRange.prototype.restore = function(opt_stayAlive) {\n  if (this.isDisposed()) {\n    goog.log.error(\n        goog.dom.SavedRange.logger_,\n        'Disposed SavedRange objects cannot be restored.');\n  }\n\n  var range = this.restoreInternal();\n  if (!opt_stayAlive) {\n    this.dispose();\n  }\n  return range;\n};\n\n\n/**\n * Internal method to restore the saved range.\n * @return {goog.dom.AbstractRange} The restored range.\n */\ngoog.dom.SavedRange.prototype.restoreInternal = goog.abstractMethod;\n"],
"names":["goog","provide","require","forwardDeclare","dom","SavedRange","goog.dom.SavedRange","Disposable","call","inherits","logger_","log","getLogger","prototype","restore","goog.dom.SavedRange.prototype.restore","opt_stayAlive","isDisposed","error","range","restoreInternal","dispose","abstractMethod"]
}
