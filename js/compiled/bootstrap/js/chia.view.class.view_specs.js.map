{"version":3,"sources":["chia/view/class/view_specs.cljs"],"mappings":";;;;;AAKA,AAAA,AAAAA,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAEP,AAAA,AAACC;;AAEH,AAAKC,AAAcC;AAEnB,AAAA,AAAAC,AAAKC;AAAL,AAAc,AAAK,AAAAD,AAACE,AACD,AAAAC,AAAU,AAAAH,AAACI;;AAE9B,AAAA,AAAAC,AAAKC;AAAL,AAAW,AAAK,AAAAD,AAACJ,AACD,AAAA,AAACM,AAAoB,AAACC,AAAK,AAAAH,AAACD;;AAE5C,AAAA;;;AAAA,AAAAK,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAEDI;AAFL,AAGE,AAAKC;AAAL,AACE,AAAOD,AAAIA;;AAAX,AACE,AAAI,AAACE,AAAOF;AAAZ;;AAEE,AAAAG,AAAI,AAAAC,AAAC,AAACnB,AAAMe;AAAR,AAAA,AAAAI,AAAAA,AAAAA,AAAaH,AAAAA;;AAAjB,AAAA,AAAAE;AAAAA;;AACI,AAAO,AAACE,AAAKL;;;;;;;;;;AARzB,AAAA,AAAA,AAAMJ;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAUA,AAAKS,AAAS,AAACC,AACCC,AACA7B,AACAG,AACA2B;AAEhB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAqBJ;AACrB,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAiBvB;AACjB,AAAAuB,AAAA,AAAA,AAAA,AAAA,AAAoB5B;AACpB,AAAA4B,AAAA,AAAA,AAAA,AAAA,AAA2B/B;AAE3B,AAAA+B,AAAA,AAAA,AAAA,AAAA,AAAqBC;AACrB,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAoBC;AACpB,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAqBC","names":["js/chia","js/chia.view","js/chia.view.class","js/chia.view.class.view-specs","js/chia.view.class.view-specs.spec-meta","chia.view.class.view-specs/spec-meta","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","chia.view.class.view-specs/ReactElement?","js/module$node_modules$react$index.isValidElement","p1__65738#","chia.view.class.view-specs/Hiccup?","cljs.core/vector?","cljs.core/Keyword","cljs.core/first","p1__65739#","chia.view.class.view-specs/SVG?","clojure.string/starts-with?","cljs.core/name","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","chia.view.class.view-specs/any-pred","seq65743","self__4718__auto__","cljs.core/seq","fns","this","cljs.core/empty?","or__4131__auto__","fexpr__65751","cljs.core/rest","chia.view.class.view-specs/Element?","chia.view.class$.view_specs.any_pred.cljs$core$IFn$_invoke$arity$variadic","cljs.core/nil?","cljs.core/string?","cljs.spec.alpha/def-impl","cljs.core/fn?"],"sourcesContent":["(ns chia.view.class.view-specs\n  (:require [clojure.string :as string]\n            [\"react\" :as react]\n            [clojure.spec.alpha :as s]))\n\n(defonce spec-meta\n  ;; clojure spec doesn't support metadata, but we want our docstrings\n  (atom {}))\n\n(def ReactElement? react/isValidElement)\n\n(def Hiccup? #(and (vector? %)\n                   (keyword? (first %))))\n\n(def SVG? #(and (Hiccup? %)\n                (string/starts-with? (name (first %)) \"svg\")))\n\n(defn any-pred\n  \"Evaluate fns sequentially, stopping if any return true.\"\n  [& fns]\n  (fn [this]\n    (loop [fns fns]\n      (if (empty? fns)\n        false\n        (or ((first fns) this)\n            (recur (rest fns)))))))\n\n(def Element? (any-pred\n                nil?\n                ReactElement?\n                Hiccup?\n                string?))\n\n(s/def :view/element Element?)\n(s/def :view/svg SVG?)\n(s/def :view/hiccup Hiccup?)\n(s/def :view/react-element ReactElement?)\n\n(s/def :dom/on-click fn?)\n(s/def :dom/on-blur fn?)\n(s/def :dom/on-focus fn?)"]}