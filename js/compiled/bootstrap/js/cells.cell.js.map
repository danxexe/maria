{"version":3,"sources":["cells/cell.cljs"],"mappings":"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","names":["cells.cell/*self*","cells.cell/*default-view*","cljs.core/identity","cells.cell/*error-handler*","error","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3","cells.cell/ICell","cells.cell/cell?","x","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cells.cell/*read-log*","cells.cell/log-observation!","cell","cells.cell/maybe-activate","G__67969","cljs.core/-vreset!","cljs.core/-deref","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","chia.reactive/*reader*","chia.reactive/*reader-dependency-log*","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cells.cell/get-async","cells.cell/set-async!","v","state","before","cells.cell/mark-changed!","cells.cell/loading!","cells.cell/error!","cells.cell/complete!","cells.cell/status","st","cljs.core/Keyword","cells.cell/loading?","cells.cell/complete?","cells.cell/error-st?","cells.cell/error","chia.util/guard","cells.cell/error?","cells.cell/message","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cells.cell/dispose!","seq__68014","cljs.core/seq","chunk__68015","count__68016","i__68017","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","f","cljs.core/vals","cells.cell/on-dispose","key","js/Error","cljs.core/contains?","obj68050","inner-obj__50641__auto__","child68051","new-child__50590__auto__","obj68060","o__50635__auto__","o__50629__auto__","obj68065","cells.cell/active?","cells.cell/necessary?","cljs.core/empty?","cells.linked-graph/immediate-dependents","cells.cell/watched?","cells.cell/maybe-deactivate","and__4120__auto__","seq__68088","chunk__68089","count__68090","i__68091","dep","cells.linked-graph/immediate-dependencies","cells.linked-graph/un-depend!","cells.cell/eval-and-set!","cells.cell/eval-cell","obj68130","obj68128","k68129","js/goog.reflect.objectProperty","obj68132","applied-science.js-interop.impl/in?*","js/undefined","k68131","obj68137","e68142","e","cells.cell/*to-evaluate*","cells.cell/*changed*","cells.cell/*evaluated*","*self*-orig-val__68150","*read-log*-orig-val__68151","*self*-temp-val__68152","*read-log*-temp-val__68153","cljs.core/volatile!","value","next-deps","cljs.core/deref","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","cells.linked-graph/transition-deps!","cljs.core/-reset!","cells.cell/notify-watches","cljs.core/-notify-watches","cells.cell/stabilize!","*to-evaluate*-orig-val__68175","*changed*-orig-val__68176","*evaluated*-orig-val__68177","*to-evaluate*-temp-val__68178","*changed*-temp-val__68179","*evaluated*-temp-val__68180","cljs.core/vec","i","temp__5724__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/not","fexpr__68183","fexpr__68184","seq__68187","chunk__68188","count__68189","i__68190","changed","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cells.cell/with-view","view-fn","cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cells.cell/view-fn","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/meta","cells.cell/view","fexpr__68208","cells.cell/dissoc-empty","coll","out","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cells.cell/set-conj","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cljs.core/-write","cells.cell/Cell","cells.cell/->Cell","meta","this","obj68290","G__68291","G__68292","obj68309","obj68315","G__68316","G__68317","obj68325","observed?","_","chia.reactive/invalidate-readers!","other","cljs.core/-equiv","m","writer","cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic","oldval","newval","seq__68267","chunk__68268","count__68269","i__68270","obj68279","G__68281","G__68282","G__68283","fexpr__68280","obj68286","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","obj68221","obj68222","G__68225","obj68228","obj68226","k68227","obj68230","k68229","obj68231","a","G__68232","G__68233","obj68236","obj68234","k68235","obj68238","k68237","obj68239","b","G__68240","G__68241","G__68242","obj68245","obj68243","k68244","obj68253","k68246","obj68255","xs","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","obj68258","obj68256","k68257","obj68260","k68259","obj68261","cells.cell/make-cell","owner","cells.cell/update-cell*","obj68425","obj68426","obj68427","var_args","G__68434","cells.cell/cell*","cells.cell.cell_STAR_.cljs$core$IFn$_invoke$arity$2","memo-key","or__4131__auto__","obj68448","k68449","applied-science.js-interop.impl/wrap-key","obj68450","G__68463","obj68531","obj68533","cells.cell/cell","cljs.core/constantly","cljs.core/hash","cells.cell/immediate-dependencies","cells.cell/immediate-dependents","cells.cell/dependencies","cells.linked-graph/dependencies","cells.cell/dependents","cells.linked-graph/dependents"],"sourcesContent":["(ns cells.cell\n  (:require [cells.linked-graph :as g]\n            [chia.util :as u]\n            [chia.reactive :as r]\n            [applied-science.js-interop :as j]\n            [chia.util.perf :as perf])\n  (:require-macros cells.cell))\n\n(def ^:dynamic *self*\n  \"Tracks the currently-evaluating cell.\"\n  nil)\n\n(def ^:dynamic *default-view*\n  \"Views are implemented as metadata on cells. A rendering environment\n   (such as a notebook) can override the default view for cells\n   without affecting views attached to particular cells.\"\n  identity)\n\n(def ^:dynamic *error-handler*\n  \"Errors are caught during evaluation of cells and their bound-fns.\n   By default, we re-throw the error with information about where it\n   originated. This behaviour can be overridden here.\"\n  (fn [error]\n    (throw (ex-info \"Error evaluating cell\" {:cell *self*} error))))\n\n(defprotocol ICell\n  \"Marker protocol to determine if a thing is a cell\")\n\n(defn cell?\n  \"Returns true of `x` is a cell.\"\n  [x]\n  (satisfies? ICell x))\n\n;;;;;;;;;;;;;;;\n;;\n;; Read logging\n\n(def ^:private ^:dynamic *read-log* nil)\n\n(declare maybe-activate)\n\n(defn- log-observation! [cell]\n  (maybe-activate cell)\n  (when-not (identical? cell *self*)\n    (some-> *read-log* (vswap! conj cell))\n    (r/observe-simple! cell))\n  cell)\n\n;;;;;;;;;;;;;;;\n;;\n;; Async metadata\n;;\n\n(defn- get-async [cell]\n  (log-observation! cell)\n  (.. cell -state -async))\n\n(declare mark-changed!)\n\n(defn- set-async! [cell v]\n  (let [state (.-state cell)\n        before (.-async state)]\n    (when-not (identical? before v)\n      (set! (.-async state) v)\n      (mark-changed! cell))\n    cell))\n\n(defn loading! [cell]\n  (set-async! cell :loading))\n\n(defn error! [cell error]\n  (set-async! cell error)\n  (*error-handler* error)\n  cell)\n\n(defn complete! [cell]\n  (set-async! cell nil))\n\n(defn status\n  \"Returns :error, :loading, or nil\"\n  [cell]\n  (let [st (get-async cell)]\n    (if (or (nil? st) (keyword? st)) st :error)))\n\n(defn loading? [cell]\n  (perf/identical? :loading (get-async cell)))\n\n(defn complete? [cell]\n  (nil? (get-async cell)))\n\n(defn- error-st? [st]\n  (and (some? st)\n       (not (perf/identical? :loading st))))\n\n(defn error [cell]\n  (-> (get-async cell)\n      (u/guard error-st?)))\n\n(defn error? [cell]\n  (error-st? (get-async cell)))\n\n(def message (comp str error))\n\n;;;;;;;;;;;;;;;;;;\n;;\n;; Lifecycle cleanup\n\n(defn dispose!\n  \"Cleans up when a cell is deactivated.\"\n  [cell]\n  (doseq [f (vals (.. cell -state -on-dispose))]\n    (f))\n  (-> cell .-state .-on-dispose (set! nil))\n  cell)\n\n(defn on-dispose\n  \"Registers function `f` at `key` to be called when cell is deactivated.\"\n  [cell key f]\n  (assert (not (contains? (.. cell -state -on-dispose) key))\n          \"`on-dispose` was called with a key that already exists\")\n  (j/update-in! cell [.-state .-on-dispose] assoc key f))\n\n;;;;;;;;;;;;;;;;;;\n;;\n;; Activation\n\n(defn active? [cell]\n  (.. cell -state -active))\n\n(defn necessary?\n  \"Returns true if there is a path from `cell` to any watched cell\"\n  [cell]\n  (not (empty? (g/immediate-dependents cell))))\n\n(defn watched?\n  \"Returns true if `cell` is watched directly\"\n  [cell]\n  (some? (.. cell -state -watches)))\n\n(defn- maybe-deactivate\n  \"When a cell is unwatched and unnecessary, deactivate\"\n  [cell]\n  {:pre [(cell? cell)]}\n  (when (and (active? cell)\n             (not (watched? cell))\n             (not (necessary? cell)))\n    (doseq [dep (g/immediate-dependencies cell)]\n      (g/un-depend! cell dep))\n    (dispose! cell)\n    (-> cell .-state .-active (set! false)))\n  cell)\n\n(declare eval-and-set!)\n\n(defn- maybe-activate\n  \"When a cell gains an observor, make sure it is active\"\n  [cell]\n  (when-not (active? cell)\n    (-> cell .-state .-active (set! true))\n    (eval-and-set! cell))\n  cell)\n\n;;;;;;;;;;;;;;;;;;\n;;\n;; Evaluation\n\n(defn- eval-cell [cell]\n  (let [f (j/get-in cell [.-state .-f])]\n    (try (f cell)\n         (catch :default e\n           (dispose! cell)                                  ;; always dispose on error\n           (error! cell e)))))\n\n(def ^:dynamic ^:private *to-evaluate* nil)\n(def ^:dynamic ^:private *changed* nil)\n(def ^:dynamic ^:private *evaluated* nil)\n\n(defn- eval-and-set! [cell]\n  (when-not (identical? cell *self*)\n    (binding [*self* cell\n              *read-log* (volatile! #{})]\n      (dispose! cell)\n      (let [value (eval-cell cell)\n            next-deps (disj @*read-log* cell)]\n        (g/transition-deps! cell next-deps)\n        (-reset! cell value))))\n  cell)\n\n(defn notify-watches [cell]\n  (let [st (.-state cell)\n        value (.-value st)]\n    (-notify-watches cell (.-prev-value st) value)\n    (set! (.-prev-value st) value)))\n\n(defn- stabilize!\n  \"Recomputes transitive dependents of `cell`.\n   Returns set of changed cells.\"\n  [cell]\n  (binding [*to-evaluate* (volatile! (vec (g/immediate-dependents cell)))\n            *changed* (volatile! #{cell})\n            *evaluated* (volatile! #{})]\n    (loop [i 0]\n      (when-some [cell (nth @*to-evaluate* i nil)]\n        (when (and (not (@*changed* cell))\n                   (not (@*evaluated* cell)))\n          (vswap! *evaluated* conj cell)\n          (eval-and-set! cell))\n        (recur (inc i))))\n    @*changed*))\n\n(defn- mark-changed! [cell]\n  (if (nil? *to-evaluate*)\n    (doseq [changed (stabilize! cell)]\n      (notify-watches changed))\n    (do (vswap! *changed* conj cell)\n        (vswap! *to-evaluate* into (g/immediate-dependents cell))))\n  cell)\n\n;;;;;;;;;;;;;;;;;;\n;;\n;; Cell views\n\n(defn with-view\n  \"Attaches `view-fn` to the metadata of `cell`\"\n  [cell view-fn]\n  (vary-meta cell assoc :cell/view view-fn))\n\n(defn view-fn\n  \"Returns current view-fn for cell\"\n  [cell]\n  (get (meta cell) :cell/view *default-view*))\n\n(defn view\n  \"Returns view of `cell`\"\n  [cell]\n  ((view-fn cell) cell))\n\n;;;;;;;;;;;;;;;;;;\n;;\n;; Cell type\n\n(defn dissoc-empty [coll x]\n  (let [out (dissoc coll x)]\n    (if (empty? out) nil out)))\n\n(def set-conj (fnil conj #{}))\n\n(deftype Cell [state meta]\n\n  ICell\n\n  g/ILinkedGraph\n  (add-dependency! [this dep]\n    (j/update! state .-dependencies set-conj dep))\n  (remove-dependency! [this dep]\n    (j/update! state .-dependencies disj dep))\n  (add-dependent! [this dep]\n    (j/update! state .-dependents set-conj dep))\n  (remove-dependent! [this dep]\n    (j/update! state .-dependents disj dep)\n    (maybe-deactivate this))\n  (immediate-dependencies [this]\n    (.-dependencies state))\n  (immediate-dependents [this]\n    (.-dependents state))\n\n  r/ITransitionSimple\n  (on-transition [this observed?]\n    (if observed?\n      (do\n        (-add-watch this ::r/transition\n                    (fn [_ _ _ _] (r/invalidate-readers! this)))\n        (maybe-activate this))\n      (do\n        (-remove-watch this ::r/transition)\n        (maybe-deactivate this))))\n\n  IEquiv\n  (-equiv [this other]\n    (-equiv [this other]\n            (and (instance? Cell other)\n                 (identical? state (.-state other)))))\n\n  IWithMeta\n  (-with-meta [this m] (Cell. state m))\n\n  IMeta\n  (-meta [_] meta)\n\n  IPrintWithWriter\n  (-pr-writer [this writer _] (write-all writer (str \"\u26aa\ufe0f\")))\n\n  IWatchable\n  (-notify-watches [this oldval newval]\n    (doseq [f (vals (.-watches state))]\n      (f this oldval newval)))\n  (-add-watch [this key f]\n    (j/update! state .-watches (fnil assoc {}) key f))\n  (-remove-watch [this key]\n    (j/update! state .-watches dissoc-empty key)\n    (maybe-deactivate this))\n\n  IDeref\n  (-deref [this]\n    (log-observation! this)\n    (.-value state))\n\n  IReset\n  (-reset! [this newval]\n    (let [oldval (.-value state)]\n      (when (not= oldval newval)\n        (j/assoc! state .-value newval)\n        (mark-changed! this)))\n    newval)\n\n  ISwap\n  (-swap! [this f] (-reset! this (f (j/get-in this [.-state .-value]))))\n  (-swap! [this f a] (-reset! this (f (j/get-in this [.-state .-value]) a)))\n  (-swap! [this f a b] (-reset! this (f (j/get-in this [.-state .-value]) a b)))\n  (-swap! [this f a b xs] (-reset! this (apply f (j/get-in this [.-state .-value]) a b xs))))\n\n\n;;;;;;;;;;;;;;;;;;\n;;\n;; Cell construction\n\n(defn- make-cell [f owner]\n  (Cell. (j/obj .-f f\n                .-value nil\n                .-dependencies #{}\n                .-dependents #{}\n                .-owner owner\n                .-active false\n                .-async nil)\n\n         nil))\n\n(defn update-cell* [cell f]\n  (-> (.-state cell)\n      (j/assoc! .-f f .-value nil))\n  (eval-and-set! cell))\n\n(defn cell*\n  \"Returns cell for function `f`. Optional `memo-key`, a string, will cause cell to\n   be memoized on the currently-evaluating cell or reactive reader.\"\n  ([f] (cell* f nil))\n  ([f memo-key]\n   (let [owner (or *self*\n                   r/*reader*)]\n     (if (some? memo-key)\n       (u/memoized-on owner memo-key (make-cell f owner))\n       (make-cell f owner)))))\n\n(defn cell\n  [key value]\n  (assert key \"Cells created by functions require a key\")\n  ;; TODO -\n  ;; `hash` does not guarantee uniqueness\n  (cell* (constantly value) (str \"#\" (hash key))))\n\n;; Expose graph fns\n\n(def immediate-dependencies g/immediate-dependencies)\n(def immediate-dependents g/immediate-dependents)\n(def dependencies g/dependencies)\n(def dependents g/dependents)"]}