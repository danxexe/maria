{"version":3,"sources":["kitchen_async/specs/promise_macros.cljc"],"mappings":";;;;AAIA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AACQ,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAe,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAe,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAOC;AAAP,AAAgB,AAAA,AAACC,AAAE,AAAAF,AAACG;AAD1D,AAAA,AAAA,AAAA,AAAA,AAAAR,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACQ,AAAA,AAAe,AAAe,AACA,AAAAQ,AAAA,AAAA,AAAA,AAASC,AACT,AAAAD,AAAA,AAAA,AAAA,AAASC,AACAA,AAC1B,AAAAC,AAAA,AAAA,AAAKV;AAE1B,AAAA,AAAOW,AAAkBC,AAAIC;AAA7B,AACE,AAAK,AAAAC,AAASD,AACT,AAAI,AAACP,AAAEO,AAAED,AACL,AAACN,AAAE,AAACS,AAAkBF,AACnB,AAAA,AAACG,AAA+B,AAACC,AAAKL;;AAEpD,AAAA,AAAMM,AAAQL;AAAd,AACE,AAAA,AAAA,AAACF,AAAwBE;;AAE3B,AAAA,AAAMM,AAAUN;AAAhB,AACE,AAAA,AAAA,AAACF,AAA0BE;;AAE7B,AAAAhB,AAAA,AAAA,AAAA,AAAA,AACE,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAiBkB;AAEnB,AAAAvB,AAAA,AAAA,AAAA,AAAA,AAAoBY;AAEpB,AAAAZ,AAAA,AAAA,AAAA,AAAA,AACE,AAAAa,AAAA,AAAA,AAAK,AAAAR,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAmB,AAACmB,AAAWC,AACV,AAAArB,AAAA,AAAA,AAAA,AAAA,AAAW,AAAKY;AAAL,AACE,AAAK,AAAI,AAACK,AAAOL,AACR,AAACM,AAASN;AAHrD,AACqB,AAAA,AAGc,AAAAH,AAAA,AAAA,AAAKV;AAE/C,AAAAH,AAAA,AAAA,AAAA,AAAA,AACE,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAciB,AAGK,AAAAR,AAAA,AAAA,AAAKV;AAE1B,AAAAH,AAAA,AAAA,AAAA,AAAA,AACE,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAgBkB,AACK,AAAAT,AAAA,AAAA,AAAKV;AAE5B,AAAAH,AAAA,AAAA,AAAA,AAAA,AACE,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACsB,AAAAS,AAAA,AAAA,AAAK,AAAAX,AAAA,AAAA,AAAA,AAAA,AAAA,AACJ,AAAAwB,AAAA,AAAA,AAAK,AAAAxB,AAAA,AAAA,AAAA,AAAA,AAAA;AAE9B,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.core/any?","cljs.spec.alpha/cat-impl","cljs.spec.alpha/or-spec-impl","cljs.spec.alpha/and-spec-impl","p1__70529#","cljs.core/vector?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.spec.alpha.tuple_impl.cljs$core$IFn$_invoke$arity$2","cljs.core/simple-symbol?","cljs.spec.alpha/rep-impl","kitchen-async.specs.promise-macros/maybe-qualified?","sym","x","cljs.core/Symbol","kitchen-async.utils/fixup-alias","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.core/name","kitchen-async.specs.promise-macros/catch?","kitchen-async.specs.promise-macros/finally?","cljs.core/symbol?","cljs.core/complement","cljs.core/seq?","cljs.spec.alpha/maybe-impl"],"sourcesContent":["(ns kitchen-async.specs.promise-macros\n  (:require [clojure.spec.alpha :as s]\n            [kitchen-async.utils :as utils]))\n\n(s/fdef kitchen-async.promise/promise\n  :args (s/cat :params (s/or :arity-0 (s/and vector? #(= (count %) 0))\n                             :arity-1 (s/tuple simple-symbol?)\n                             :arity-2 (s/tuple simple-symbol?\n                                               simple-symbol?))\n               :body (s/* any?)))\n\n(defn- maybe-qualified? [sym x]\n  (and (symbol? x)\n       (or (= x sym)\n           (= (utils/fixup-alias x)\n              (symbol \"kitchen-async.promise\" (name sym))))))\n\n(defn catch? [x]\n  (maybe-qualified? 'catch x))\n\n(defn finally? [x]\n  (maybe-qualified? 'finally x))\n\n(s/def ::error-type\n  (s/or :type-name symbol?\n        :default #{:default}))\n(s/def ::error-name simple-symbol?)\n\n(s/def ::try-body\n  (s/* (s/or :simple-expr (complement seq?)\n             :compound-expr (s/cat :op (fn [x]\n                                         (not (or (catch? x)\n                                                  (finally? x))))\n                                    :args (s/* any?)))))\n\n(s/def ::catch-clause\n  (s/cat :catch catch?\n         :error-type ::error-type\n         :error-name ::error-name\n         :catch-body (s/* any?)))\n\n(s/def ::finally-clause\n  (s/cat :finally finally?\n         :finally-body (s/* any?)))\n\n(s/def ::try-args\n  (s/cat :try-body ::try-body\n         :catch-clauses (s/* (s/spec ::catch-clause))\n         :finally-clause (s/? (s/spec ::finally-clause))))\n\n(s/fdef kitchen-async.promise/try\n  :args ::try-args)\n"]}