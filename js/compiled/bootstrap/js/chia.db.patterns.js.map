{"version":3,"sources":["chia/db/patterns.cljs"],"mappings":"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","names":["chia.db.patterns/empty-pattern-map","chia.db.patterns/added-patterns","prev-p","next-p","G__61405","cljs.core/reduce-kv","patterns","k","next-v","temp__5718__auto__","prev-v","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","chia.db.patterns/removed-patterns","G__61406","chia.db.patterns/supported-pattern-keys","cljs.core/set","cljs.core/keys","chia.db.patterns/conj-set","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","chia.db.patterns/into-set","cljs.core/into","var_args","G__61408","chia.db.patterns/log-read","js/Error","db","kind","pattern","chia.reactive/*reader*","cljs.core/-vreset!","chia.reactive/*reader-dependency-log*","cljs.core/-deref","cljs.core/deref","cljs.core.update.cljs$core$IFn$_invoke$arity$4","multiple?","chia.db.patterns/add-value","value-map","pattern-key","value","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","chia.db.patterns/remove-value","cljs.core/disj","chia.db.patterns/resolve-id","db-snap","attr","val","chia.db.patterns.log_read.cljs$core$IFn$_invoke$arity$3","cljs.core/first","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","chia.db.patterns/lookup-ref?","or__4131__auto__","and__4120__auto__","cljs.core/Keyword","cljs.core/vector?","chia.db.patterns/listen","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","listeners","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","chia.db.patterns/unlisten","chia.db.patterns/non-empty-keys","m","ks","v","G__61439","cljs.core/empty?","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__61449","chia.db.patterns/datom-patterns","datoms","many?","chia.db.patterns.datom_patterns.cljs$core$IFn$_invoke$arity$3","pattern-keys","p__61453","vec__61457","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","pattern-map","e","a","pv","G__61462","cljs.core/contains?","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/select-keys","chia.db.patterns/pattern-values","values","chia.db.patterns/datom-values","active-keys","chia.db.patterns/invalidate!","seq__61471","cljs.core/seq","chunk__61472","count__61473","i__61474","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","f"],"sourcesContent":["(ns chia.db.patterns\n  (:require [chia.reactive :as r]\n            [clojure.set :as set]\n            [chia.util.perf :as perf]))\n\n(def ^:private empty-pattern-map\n  \"Map for building sets of patterns.\"\n  {:e__ #{}                                                 ;; <entity id>\n   :_a_ #{}                                                 ;; <attribute>\n   :_av #{}                                                 ;; [<attribute>, <value>]\n   :ea_ #{}})                                               ;; [<entity id>, <attribute>]\n\n(defn added-patterns [prev-p next-p]\n  (cond->> next-p\n           (some? prev-p) (reduce-kv (fn [patterns k next-v]\n                                       (if-let [prev-v (get prev-p k)]\n                                         (assoc patterns k (set/difference next-v prev-v))\n                                         patterns)) next-p)))\n\n(defn removed-patterns [prev-p next-p]\n  (cond->> prev-p\n           (some? next-p)\n           (reduce-kv (fn [patterns k prev-v]\n                        (if-let [next-v (get next-p k)]\n                          (assoc patterns k (set/difference prev-v next-v))\n                          patterns)) prev-p)))\n\n(def supported-pattern-keys (set (keys empty-pattern-map)))\n\n(def conj-set (fnil conj #{}))\n(def into-set (fnil into #{}))\n\n(defn log-read\n  \"Record pattern to *pattern-log*.\"\n  ([db kind pattern]\n   (r/observe-pattern! db\n                       update kind conj-set pattern))\n  ([db kind pattern multiple?]\n   (r/observe-pattern! db\n                       update\n                       kind\n                       (if multiple? into-set conj-set)\n                       pattern)))\n\n(defn- add-value\n  \"Associates value with pattern in value-map.\"\n  [value-map pattern-key pattern value]\n  (update-in value-map [pattern-key pattern] conj-set value))\n\n(defn- remove-value\n  \"Removes value associated with pattern in value-map.\"\n  [value-map pattern-key pattern value]\n  (update-in value-map [pattern-key pattern] disj value))\n\n(declare listen unlisten)\n\n(defn- resolve-id\n  \"Copied from chia.db.core.\"\n  ([db db-snap attr val]\n   (log-read db :_av [attr val])\n   (first (get-in db-snap [:ave attr val]))))\n\n(defn- lookup-ref?\n  \"Returns true if pattern has lookup ref in id position.\"\n  [kind pattern]\n  (or (and (perf/identical? :e__ kind)\n           (vector? pattern)\n           pattern)\n      (and (perf/identical? :ea_ kind)\n           (vector? (first pattern))\n           (first pattern))))\n\n(defn listen\n  \"Adds pattern listener.\"\n  [db patterns value]\n  (swap! db assoc :listeners\n         (reduce-kv (fn [listeners kind patterns]\n                      (reduce (fn [listeners pattern]\n                                (add-value listeners kind pattern value)) listeners patterns))\n                    (get @db :listeners)\n                    patterns)))\n\n(defn unlisten\n  \"Removes pattern listener.\"\n  [db patterns value]\n  (swap! db assoc :listeners\n         (reduce-kv (fn [listeners kind patterns]\n                      (reduce (fn [listeners pattern]\n                                (remove-value listeners kind pattern value)) listeners patterns)) (get @db :listeners) patterns)))\n\n(defn- non-empty-keys\n  \"Returns list of keys for which map contains a non-empty value.\"\n  [m]\n  (reduce-kv (fn [ks k v]\n               (cond-> ks\n                       (not (empty? v)) (conj k))) #{} m))\n\n(defn- datom-patterns\n  \"Returns a map of patterns matched by a list of datoms.\n  Limits patterns to those listed in pattern-keys.\n  many? should return true for attributes which have schema value :db.cardinality/many?.\"\n  ([datoms many?]\n   (datom-patterns datoms many? [:e__ :ea_ :_av :_a_]))\n  ([datoms many? pattern-keys]\n   (->> datoms\n        (reduce (fn [pattern-map [e a v pv]]\n                  (cond-> pattern-map\n                          (contains? pattern-keys :e__) (update :e__ conj e)\n                          (contains? pattern-keys :ea_) (update :ea_ conj [e a])\n                          (contains? pattern-keys :_av) (update :_av into (if (many? a)\n                                                                            (reduce\n                                                                             (fn [patterns v] (conj patterns [a v])) [] (into v pv))\n                                                                            [[a v]\n                                                                             [a pv]]))\n                          (contains? pattern-keys :_a_) (update :_a_ conj a)))\n                (select-keys empty-pattern-map pattern-keys)))))\n\n(defn pattern-values\n  \"Returns values associated with patterns.\n\n  value-map is of form {<pattern-key> {<pattern> #{...set of values...}}}.\n  pattern-map is of form {<pattern-key> #{...set of patterns...}}\"\n  [pattern-map value-map]\n  (reduce-kv (fn [values pattern-key patterns]\n               (reduce (fn [values pattern]\n                         (into values (get-in value-map [pattern-key pattern]))) values patterns)) #{} pattern-map))\n\n(defn datom-values\n  \"Returns the set of values in value-map associated with patterns matched by datoms.\"\n  [value-map datoms many?]\n  (let [active-keys (non-empty-keys value-map)]\n    (-> (datom-patterns datoms many? active-keys)\n        (pattern-values value-map))))\n\n(defn invalidate!\n  \"Invalidate a pattern, ie. invoke callbacks that match pattern\"\n  [db pattern-key pattern]\n  (doseq [f (get-in @db [:listeners pattern-key pattern])]\n    (f)))\n\n(comment\n (assert (= (datom-patterns [[\"e\" \"a\" \"v\" \"prev-v\"]]\n                            #{}\n                            supported-pattern-keys)\n            {:e__ #{\"e\"}\n             :ea_ #{[\"e\" \"a\"]}\n             :_av #{[\"e\" \"v\"] [\"e\" \"prev-v\"]}\n             :_a_ #{\"a\"}})))"]}