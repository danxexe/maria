{"version":3,"sources":["chia/view/props.cljs"],"mappings":";;;;;;AAOA,AAAA,AAAOA,AAAoBC;AAA3B,AACE,AAAAC,AAAQD;AAAR,AAAA,AACQ,AAAA,AAACE,AAAUF;AAAkB,AAAAC,AAAA,AAACE,AAAkBC;;AADxDH;;;AAGF;;;AAAA,AAAMI,AAEHL,AAAMM;AAFT,AAGE,AAAAC,AAAQP;AAAR,AAAA,AACa,AAAa,AAAA,AAAoBM,AACpB,AAAA,AAAuBA;AAFjD,AAAAC,AAEwDR;;AAFxDQ;;;AAIF;;;AAAA,AAAMC,AAEHC;AAFH,AAIE,AAAA,AAAA,AAACC,AAA4BL,AAAYI;;AAE3C;;;;;;;;;AAAA,AAAAE,AAAMM,AAWkBjB;AAXxB,AAAA,AAAAY,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAQWM;AARX,AAAAF,AAAAJ,AAAA,AASWO;AATX,AAAAH,AAAAJ,AAAA,AAUWQ;AAVX,AAAAJ,AAAAJ,AAAA,AAWWS;AAXX,AAYMrB,AACA,AAAAsB,AAIA,AAACvB,AACD,AAAC2B;AALDJ,AAAA,AAAAA,AAAQF,AAAU,AAAAE,AAACC,AAAYH;AAA/BE,AAAA,AAAAA,AACQJ,AAAe,AAAAI,AAACE,AAAmBN,AAAeV;AAD1Dc,AAAA,AAAAA,AAEQH,AAAU,AAAAG,AAACE,AAAmBL,AAAUM;AAFhD,AAAA,AAGQJ;AAAW,AAAAC,AAAAA,AAACD,AAAAA,AAAAA;;AAHpBC;;;;AAON;;;AAAA,AAAMK,AAEHC,AAAGC;AAFN,AAGE,AAACC,AAAMF,AACAC,AACA,AAAA,AAAAE,AAAAC,AAACC;AAAD,AAAa,AAAAF,AAAA,AAAAC;AACD,AAAA,AAAA,AAACE,AAAYN,AACb,AAAA,AAAA,AAACM,AAAYL,AACzB,AAACI,AAAWE,AACA,AAAA,AAAA,AAACD,AAAYN,AACb,AAAA,AAAA,AAACM,AAAYL;;AAElC;;;AAAA,AAAMO,AAECC,AAAKC;AAFZ,AAGM;AAAKtC,AAAQuC;AAAb,AACF,AAAAC,AAAuB,AAAA,AAAA,AAAA,AAAI,AAAI,AAACE,AAAK1C,AACN,AAAA,AAAMA,AAASA,AAAMuC,AACH,AAACI,AAAK3C,AAAMuC;AAF7D,AAAAE,AAAAD,AAAA,AAAA,AAAOxC;AAAP,AAAAyC,AAAAD,AAAA,AAAA,AAAaD;AAAb,AAGE,AAAA,AAACK,AAAMP,AAAK,AAACV,AAAYW,AAActC,AAAQuC;;AAJ1CvC;AAAQuC;;;;AAAAA;;AAARvC,AAAQuC;;;AAARvC;AAAQuC;AAARvC,AAAQuC","names":["chia.view.props/update-change-prop","props","G__65760","cljs.core/contains?","cljs.core.update.cljs$core$IFn$_invoke$arity$3","chia.view.render-loop/apply-sync!","chia.view.props/wrap-props","tag","G__65761","chia.view.props/to-element","x","chia.view.hiccup.element.cljs$core$IFn$_invoke$arity$2","p__65762","map__65763","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","chia.view.props/adapt-props","->element-keys","->js-keys","lift-nses","wrap-props","G__65771","chia.util/lift-nses","chia.util/update-some-keys","cljs.core/clj->js","chia.view.hiccup.impl.props__GT_js.cljs$core$IFn$_invoke$arity$1","chia.view.props/merge-props","m1","m2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p1__65776#","p2__65777#","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","cljs.core/select-keys","cljs.core/merge","chia.view.props/partial","view","initial-props","children","vec__65784","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/map?","cljs.core/cons","cljs.core.into.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns chia.view.props\n  (:refer-clojure :exclude [partial])\n  (:require [chia.util :as u]\n            [chia.view.hiccup.impl :as hiccup-impl]\n            [chia.view.render-loop :as render-loop]\n            [chia.view.hiccup :as hiccup]))\n\n(defn- update-change-prop [props]\n  (cond-> props\n          (contains? props :on-change) (update :on-change render-loop/apply-sync!)))\n\n(defn wrap-props\n  \"Wraps :on-change handlers of text inputs to apply changes synchronously.\"\n  [props tag]\n  (cond-> props\n          (and ^boolean (or (identical? \"input\" tag)\n                            (identical? \"textarea\" tag))) update-change-prop))\n\n(defn to-element\n  \"Converts hiccup to React element.\"\n  [x]\n\n  (hiccup/element {:wrap-props wrap-props} x))\n\n(defn adapt-props\n  \"Converts props map to JavaScript according to `options`.\n\n  ->element-keys: coll of keys to convert to React elements\n  ->js-keys:      coll of keys to convert to JavaScript via clj->js\n  lift-nses:      coll of namespaces (as strings), keys of these namespaces\n                    will be included (all other namespaced keys are elided)\n  wrap-props:     arbitrary fn to modify props map after other transformations\"\n  [{:keys [->element-keys\n           ->js-keys\n           lift-nses\n           wrap-props]} props]\n  (-> props\n      (cond-> lift-nses (u/lift-nses lift-nses)\n              ->element-keys (u/update-some-keys ->element-keys to-element)\n              ->js-keys (u/update-some-keys ->js-keys clj->js)\n              wrap-props (wrap-props))\n      (update-change-prop)\n      (hiccup-impl/props->js)))\n\n(defn merge-props\n  \"Merge props, concatenating :class props and merging styles.\"\n  [m1 m2]\n  (merge m1\n         m2\n         (merge-with #(str %1 \" \" %2)\n                     (select-keys m1 [:class])\n                     (select-keys m2 [:class]))\n         (merge-with merge\n                     (select-keys m1 [:style])\n                     (select-keys m2 [:style]))))\n\n(defn partial\n      \"Partially applies props to view. Keys will be merged with other props.\"\n      [view initial-props]\n      (fn [props & children]\n    (let [[props children] (if (or (map? props)\n                                   (nil? props)) [props children]\n                                                 [{} (cons props children)])]\n      (into [view (merge-props initial-props props)] children))))"]}