{"version":3,"sources":["lark/commands/registry.cljs"],"mappings":"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","names":["G__66363","G__66364","G__66365","goog.object/set","goog.object/get","js/window","goog.events/listen","js/lark","js/lark.commands","js/lark.commands.registry","js/lark.commands.registry.Keypress","lark.commands.registry/Keypress","js/module$node_modules$$braintripping$keypress_js$keypress.keypress","lark.commands.registry/mac?","platform","js/navigator","clojure.string/starts-with?","lark.commands.registry/capitalize","s","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","lark.commands.registry/format-segment","target","modifier","clojure.string/lower-case","or__4131__auto__","G__66381","cljs.core/Keyword","js/Error","G__66382","G__66387","G__66388","G__66389","G__66394","lark.commands.registry/modifiers-internal","lark.commands.registry/binding-string->vec","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","clojure.string.split.cljs$core$IFn$_invoke$arity$2","lark.commands.registry/binding-set","cljs.core/set","js/lark.commands.registry.commands","lark.commands.registry/commands","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/lark.commands.registry.mappings","lark.commands.registry/mappings","js/lark.commands.registry.handler","lark.commands.registry/handler","cljs.core/volatile!","lark.commands.registry/M1-down?","e","lark.commands.registry/get-keyset-commands","keyset","cljs.core/deref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","lark.commands.registry/spaced-name","the-name","clojure.string/upper-case","cljs.core/first","clojure.string/replace","lark.commands.registry/seq-disj","coll","x","p1__66405#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","lark.commands.registry/distinct-conj","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","lark.commands.registry/normalize-binding","binding","map__66413","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","key-string","binding-map","cljs.core/map?","binding-vec","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/to-array","lark.commands.registry/add-binding","mappings","name","map__66421","event","path","cljs.core/seq","cljs.core/clj->js","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__66424","fexpr__66426","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","lark.commands.registry/remove-binding","map__66445","keys","lark.commands.registry/bind!","bindings","vec__66464","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","mappings*","commands*","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__66468","p__66469","vec__66475","vec__66478","commands","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/distinct","cljs.core/conj","cljs.core/reset!","lark.commands.registry/unbind!","vec__66500","p__66507","p__66508","vec__66513","vec__66517","p__66525","map__66526","lark.commands.registry/register!","priority","the-command","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","G__66528","cljs.core/namespace","cljs.core/name","pattern","lark.commands.registry/deregister!","map__66539","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","p1__66556#","lark.commands.registry/sort-ks","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","cljs.core/meta","lark.commands.registry/binding-segment-compare","segment","fexpr__66557","lark.commands.registry/keyset-string","modifiers","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","cljs.core/str"],"sourcesContent":["(ns lark.commands.registry\n  (:require [goog.object :as gobj]\n            [clojure.string :as string]\n            [clojure.set :as set]\n            [goog.events :as events]\n            [\"@braintripping/keypress.js\" :refer [keypress]]))\n\n(gobj/set (gobj/get js/window \"goog\" \"events\") \"listen\" events/listen)\n(defonce Keypress (new (.-Listener keypress)))\n\n(def mac? (let [platform (.. js/navigator -platform)]\n            (or (string/starts-with? platform \"Mac\")\n                (string/starts-with? platform \"iP\"))))\n\n(defn capitalize [s]\n  (str (.toUpperCase (subs s 0 1)) (subs s 1)))\n\n(defn format-segment [target modifier]\n  (let [modifier (string/lower-case modifier)]\n    (or (case target :Keypress.js (case modifier \"m1\" \"meta\"\n                                                 \"m2\" \"alt\"\n                                                 \"m3\" (if mac? \"ctrl\" \"command\")\n                                                 modifier)\n                     :internal (case modifier \"meta\" \"m1\"\n                                              (\"alt\"\n                                                \"option\") \"m2\"\n                                              modifier)\n                     :display (let [modifier (format-segment :internal modifier)]\n                                (case modifier\n                                  \"m1\" (if mac? \"\u2318\" \"Ctrl\")\n                                  \"m2\" (if mac? \"Option\" \"Alt\")\n                                  \"m3\" (if mac? \"Ctrl\" \"Meta\")\n                                  \"left\" \"\u2190\"\n                                  \"right\" \"\u2192\"\n                                  \"up\" \"\u2191\"\n                                  \"down\" \"\u2193\"\n                                  \"backspace\" \"\u232b\"\n                                  (capitalize modifier))))\n        modifier)))\n\n(def modifiers-internal #{\"m1\" \"m2\" \"shift\"})\n\n(defn binding-string->vec [s]\n  (mapv (partial format-segment :internal) (string/split s #\"[\\s-]\")))\n\n(defn binding-set [s]\n  (set (binding-string->vec s)))\n\n(defonce commands (atom {}))\n(defonce mappings (atom {}))\n(defonce handler (volatile! nil))\n\n(defn M1-down? [e]\n  (if mac? (.-metaKey e)\n           (.-ctrlKey e)))\n\n(defn get-keyset-commands\n  \"Returns command-names for a set of keys\"\n  [keyset]\n  (get-in @mappings [keyset :exec]))\n\n(defn spaced-name [the-name]\n  (str (string/upper-case (first the-name)) (string/replace (subs the-name 1) \"-\" \" \")))\n\n(defn seq-disj\n  \"Removes `x` from `coll`\"\n  [coll x]\n  (remove #(= % x) coll))\n\n(defn distinct-conj\n  \"Conj `x` to coll, distinct\"\n  [coll x]\n  (distinct (conj coll x)))\n\n(defn normalize-binding [binding]\n  (let [{:keys [key-string] :as binding-map} (if (map? binding) binding {:key-string binding})\n        binding-vec (binding-string->vec key-string)]\n    (assoc binding-map :keys (to-array (mapv (partial format-segment :Keypress.js) binding-vec))\n                       :binding-vec binding-vec)))\n\n(defn- add-binding [mappings name binding]\n  (let [{:keys [binding-vec event] :as binding-map} (normalize-binding binding)\n        path [(set binding-vec) :exec]]\n    (when-not (seq (get-in mappings path))\n      (.register_combo Keypress\n                       (clj->js\n                         (merge {;; eg. if we have M1-Shift-K bound and pressed, M1-K should not also activate.\n                                 :is_solitary             true\n\n                                 ;; we don't care what order modifiers are pressed\n                                 :is_unordered            true\n\n                                 (case event :keydown :on_keydown\n                                             :keyup :on_keyup\n                                             :on_keydown) #(@handler binding binding-vec)}\n                                binding-map))))\n    (update-in mappings path distinct-conj name)))\n\n(defn- remove-binding [mappings name binding]\n  (let [{:keys [binding-vec keys] :as binding-map} (normalize-binding binding)\n        path     [(set binding-vec) :exec]\n        mappings (update-in mappings path seq-disj name)]\n    (when-not (seq (get-in mappings path))\n      (.unregister_combo Keypress #js {:keys keys}))\n    mappings))\n\n(defn bind!\n  \"Takes a map of {<command-name>, <binding>} and registers keybindings.\"\n  [bindings]\n  (let [[mappings* commands*] (reduce (fn [[mappings commands] [the-name binding]]\n                                        [(add-binding mappings the-name binding)\n                                         (update-in commands [the-name :bindings] (comp distinct conj) binding)])\n                                      [@mappings @commands] bindings)]\n    (reset! mappings mappings*)\n    (reset! commands commands*)))\n\n(defn unbind!\n  \"Takes a map of {<command-name>, <binding string>} and removes keybindings.\"\n  [bindings]\n  (let [[mappings* commands*] (reduce (fn [[mappings commands] [the-name binding]]\n                                        [(remove-binding mappings the-name binding)\n                                         (update-in commands [the-name :bindings] seq-disj binding)]) [@mappings @commands] bindings)]\n    (reset! mappings mappings*)\n    (reset! commands commands*)))\n\n(defn register! [{the-name :name\n                  priority :priority\n                  :as      the-command} bindings]\n  (swap! commands assoc the-name (merge the-command\n                                        {:display-namespace (some-> (namespace the-name)\n                                                                    (spaced-name))\n                                         :display-name      (spaced-name (name the-name))\n                                         :bindings          bindings\n                                         :priority          (or priority 0)}))\n  (reset! mappings (reduce (fn [mappings pattern]\n                             (add-binding mappings the-name pattern)) @mappings bindings)))\n\n\n(defn deregister! [the-name]\n  (let [{:keys [bindings]} (get @commands the-name)]\n    (unbind! (apply hash-map (interleave (repeat the-name) bindings)))\n    (swap! commands dissoc the-name)))\n\n\n(def sort-ks #(sort-by (fn [x] (if (string? x) x (:name (meta x)))) %))\n\n(defn binding-segment-compare [segment]\n  (if (#{\"m1\" \"m2\" \"shift\"} segment) 0 1))\n\n(defn keyset-string [keyset]\n  (let [modifiers #{\"m1\" \"m2\" \"shift\"}]\n    (->> (sort-by binding-segment-compare (seq keyset))\n         (mapv (partial format-segment :display))\n         (interpose \" \")\n         (apply str))))"]}