{"version":3,"sources":["shadow/cljs/bootstrap/browser.cljs"],"mappings":"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","names":["js/shadow","js/shadow.cljs","js/shadow.cljs.bootstrap","js/shadow.cljs.bootstrap.browser","js/shadow.cljs.bootstrap.browser.init-opts","shadow.cljs.bootstrap.browser/init-opts","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","shadow.cljs.bootstrap.browser/asset-path","seq65051","self__4718__auto__","cljs.core/seq","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/str","cljs.core/deref","shadow.cljs.bootstrap.browser/compile-state-ref?","x","cljs.core/Atom","cljs.core/map?","shadow.cljs.bootstrap.browser/transit-read","txt","r","cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1","cognitect.transit/read","shadow.cljs.bootstrap.browser/transit-load","path","callback","G__65096","G__65097","goog.net.XhrIo/send","res","req","cljs.core/not","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","data","shadow.cljs.bootstrap.browser/script-eval","code","node","js/document.createElement","js/document.createTextNode","js/document.body.appendChild","js/document.body.removeChild","p__65098","map__65099","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.bootstrap.browser/execute-load!","compile-state-ref","type","text","uri","ns","provides","load-info","temp__5720__auto__","load-fn","G__65102","cljs.core/Keyword","js/Error","cljs.js/load-analysis-cache!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","shadow.cljs.bootstrap.env/loaded-ref","clojure.set/union","cljs.js/*loaded*","js","shadow.cljs.bootstrap.browser/queue-task!","task","js/goog.async.run","shadow.cljs.bootstrap.browser/load-namespaces","namespaces","cb","cljs.core/set?","cljs.core/every?","cljs.core/symbol?","cljs.core/fn?","deps-to-load-for-ns","shadow.cljs.bootstrap.env/find-deps","macro-deps","p1__65104#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","p1__65105#","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$2","deps-to-load-with-macros","clojure.set.union.cljs$core$IFn$_invoke$arity$2","compile-state","things-already-loaded","p1__65108#","clojure.set/superset?","js-files-to-load","p1__65109#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__65127","map__65128","js-name","shadow.cljs.bootstrap.browser.asset_path.cljs$core$IFn$_invoke$arity$variadic","analyzer-data-to-load","p1__65110#","p1__65111#","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p__65135","map__65137","ana-name","cljs.core/empty?","G__65144","uris","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","loader","js/goog.net.BulkLoader","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","js/goog.net.EventType.SUCCESS","e","texts","seq__65147","chunk__65148","count__65149","i__65150","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","load","p1__65112#","p2__65113#","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","G__65158","p__65160","map__65161","shadow.cljs.bootstrap.browser/load","name","macros","rc","cljs.core/Symbol","or__4131__auto__","shadow.cljs.bootstrap.env/get-ns-info","shadow.cljs.bootstrap.browser/fix-provide-conflict!","js/cljs","p__65166","map__65168","shadow.cljs.bootstrap.browser/init","load-on-init","opts","init-cb","cljs.core/reset!","shadow.cljs.bootstrap.env/index-ref","map__65173","exclude","idx","shadow.cljs.bootstrap.env/build-index","p1__65165#"],"sourcesContent":["(ns shadow.cljs.bootstrap.browser\n  (:require [clojure.set :as set]\n            [cljs.js :as cljs]\n            [cognitect.transit :as transit]\n            [shadow.js] ;; ensures that bootstrap namespaces can use js deps\n            [shadow.cljs.bootstrap.env :as env]\n            [goog.async.run]\n            [goog.net.XhrIo :as xhr])\n  (:import [goog.net BulkLoader]))\n\n\n(defonce init-opts (atom {:path \"/bootstrap\"\n                          :load-on-init []}))\n\n(defn asset-path [& args]\n  (apply str (:path @init-opts) args))\n\n(defn compile-state-ref? [x]\n  (and (instance? cljs.core/Atom x) (map? @x)))\n\n(defn transit-read [txt]\n  (let [r (transit/reader :json)]\n    (transit/read r txt)))\n\n(defn transit-load [path callback]\n  (xhr/send\n    path\n    (fn [res]\n      (this-as req\n        (if-not (.isSuccess req)\n          (throw (ex-info (str \"failed to download boostrap file:\" path \" status:\" (.getStatus req)) {:path path}))\n          (let [data (-> (.getResponseText req)\n                         (transit-read))]\n            (callback data)\n            ))))))\n\n(defn script-eval\n  \"js/eval doesn't get optimized properly, this hack seems to do the trick\"\n  [code]\n  (let [node (js/document.createElement \"script\")]\n    (.appendChild node (js/document.createTextNode code))\n    (js/document.body.appendChild node)\n    (js/document.body.removeChild node)))\n\n(defn execute-load! [compile-state-ref {:keys [type text uri ns provides] :as load-info}]\n  #_ (js/console.log \"load\" type ns load-info)\n  ;; quick hack for worker experiment, needs proper design\n  (when-let [load-fn (:load @init-opts)]\n    (load-fn load-info))\n  (case type\n    :analyzer\n    (let [data (transit-read text)]\n      (cljs/load-analysis-cache! compile-state-ref ns data))\n    :js\n    (do (swap! env/loaded-ref set/union provides)\n        (swap! cljs/*loaded* set/union provides)\n        (let [js (str text \"\\n//# sourceURL=\" uri \"\\n\")]\n          (script-eval js)))))\n\n(defn queue-task! [task]\n  ;; FIXME: this is a very naive queue that does all pending tasks at once\n  ;; should use something like window.requestIdleCallback that does as much work as\n  ;; possible in the time it was given and then yield control back to the browser\n  (js/goog.async.run task))\n\n(defn load-namespaces\n  \"loads a set of namespaces, must be called after init\"\n  [compile-state-ref namespaces cb]\n  {:pre [(compile-state-ref? compile-state-ref)\n         (set? namespaces)\n         (every? symbol? namespaces)\n         (fn? cb)]}\n  (let [deps-to-load-for-ns\n        (env/find-deps namespaces)\n\n        macro-deps\n        (->> deps-to-load-for-ns\n             (filter #(= :cljs (:type %)))\n             (map :macro-requires)\n             (reduce set/union)\n             (map #(symbol (str % \"$macros\")))\n             (into #{}))\n\n        ;; second pass due to circular dependencies in macros\n        deps-to-load-with-macros\n        (env/find-deps (set/union namespaces macro-deps))\n\n        compile-state\n        @compile-state-ref\n\n        things-already-loaded\n        (->> deps-to-load-with-macros\n             (filter #(set/superset? @env/loaded-ref (:provides %)))\n             (map :provides)\n             (reduce set/union))\n\n        js-files-to-load\n        (->> deps-to-load-with-macros\n             (remove #(set/superset? @env/loaded-ref (:provides %)))\n             (map (fn [{:keys [ns provides js-name]}]\n                    {:type :js\n                     :ns ns\n                     :provides provides\n                     :uri (asset-path js-name)})))\n\n        analyzer-data-to-load\n        (->> deps-to-load-with-macros\n             (filter #(= :cljs (:type %)))\n             ;; :dump-core still populates the cljs.core analyzer data with an empty map\n             (filter #(nil? (get-in compile-state [:cljs.analyzer/namespaces (:ns %) :name])))\n             (map (fn [{:keys [ns ana-name]}]\n                    {:type :analyzer\n                     :ns ns\n                     :uri (asset-path ana-name)})))\n\n        load-info\n        (-> []\n            (into js-files-to-load)\n            (into analyzer-data-to-load))]\n\n    #_ (js/console.log \"going to load\" load-info)\n\n    ;; this is transfered to cljs/*loaded* here to delay it as much as possible\n    ;; the JS may already be loaded but the analyzer data may be missing\n    ;; this way cljs.js is forced to ask first\n    (swap! cljs/*loaded* set/union things-already-loaded)\n\n    ;; may not need to load anything sometimes?\n    (if (empty? load-info)\n      (cb {:lang :js :source \"\"})\n\n      (let [uris\n            (into [] (map :uri) load-info)\n\n            loader\n            (BulkLoader. (into-array uris))]\n\n        (.listen loader js/goog.net.EventType.SUCCESS\n          (fn [e]\n            (let [texts (.getResponseTexts loader)]\n              (doseq [load (map #(assoc %1 :text %2) load-info texts)]\n                (queue-task! #(execute-load! compile-state-ref load)))\n\n              #_ (queue-task! #(js/console.log \"compile-state after load\" @compile-state-ref))\n\n              ;; callback with dummy so cljs.js doesn't attempt to load deps all over again\n              (queue-task! #(cb {:lang :js :source \"\"}))\n              )))\n\n        (.load loader)))\n    ))\n\n(defn load\n  \":load fn for cljs.js, must be passed the compile-state as first arg\n   eg. :load (partial boot/load compile-state-ref)\"\n  [compile-state-ref {:keys [name path macros] :as rc} cb]\n  {:pre [(compile-state-ref? compile-state-ref)\n         (symbol? name)\n         (fn? cb)]}\n  (let [ns (if macros\n             (symbol (str name \"$macros\"))\n             name)]\n    (or (get-in @compile-state-ref [:cljs.analyzer/namespaces ns])\n        (env/get-ns-info ns))\n    (load-namespaces compile-state-ref #{ns} cb)))\n\n(defn fix-provide-conflict! []\n  ;; since cljs.js unconditionally does a goog.require(\"cljs.core$macros\")\n  ;; the compile pretended to provide this but didn't\n  ;; need to remove that before we load it, otherwise it would goog.provide conflict\n  ;; FIXME: should test if actually empty, might delete something accidentally?\n  (js-delete js/cljs \"core$macros\"))\n\n(defn init\n  \"initializes the bootstrapped compiler by loading the dependency index\n   and loading cljs.core + macros (and namespaces specified in :load-on-init)\"\n  [compile-state-ref {:keys [load-on-init] :as opts} init-cb]\n  {:pre [(compile-state-ref? compile-state-ref)\n         (map? opts)\n         (fn? init-cb)\n         (string? (:path opts))]}\n  ;; FIXME: add goog-define to path\n\n  (reset! init-opts opts)\n\n  (if @env/index-ref\n    (init-cb)\n    (do (fix-provide-conflict!)\n        (transit-load (asset-path \"/index.transit.json\")\n          (fn [data]\n            ;; pretend that all excluded macro namespaces are loaded\n            ;; so CLJS doesn't request them\n            ;; the macro are never available so any code trying to use them will fail\n            (let [{:keys [exclude] :as idx} (env/build-index data)]\n              (swap! cljs/*loaded* set/union (into #{} (map #(symbol (str % \"$macros\"))) exclude)))\n\n            (load-namespaces\n              compile-state-ref\n              (into '#{cljs.core cljs.core$macros} load-on-init)\n              init-cb))))))\n"]}