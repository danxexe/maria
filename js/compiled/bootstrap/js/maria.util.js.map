{"version":3,"sources":["maria/util.cljs"],"mappings":"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","names":["maria.util/loader","message","maria.util/stop!","e","maria.util/clipboard-text","G__66198","or__4131__auto__","obj66204","k66205","obj66206","applied-science.js-interop.impl/in?*","js/undefined","obj66211","k66212","obj66214","js/window","obj__50657__auto__","f__50658__auto__","maria.util/some-str","s","maria.util/capitalize","clojure.string/upper-case","cljs.core/first","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","maria.util/spaced-string","the-name","clojure.string/replace","p__66238","map__66240","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","maria.util/handle-captured-events","props","this","dom-node","chia.view/dom-node","seq__66242","cljs.core/seq","chunk__66243","count__66244","i__66245","vec__66271","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__66282","cljs.core/next","key","f","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/namespace","G__66274","G__66275","G__66276","p1__66237#","G__66277","G__66285","G__66286","G__66287","G__66288","goog.events/listen","cljs.core/name","maria.util/vector-splice","the-vector","from-i","to-i","items","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","cljs.core.into.cljs$core$IFn$_invoke$arity$2","maria.util/whitespace-string?","cljs.core/re-find","maria.util/is-object?","o","js/Object","maria.util/scroll-into-view","y-pos","map__66295","scrollY","innerHeight","applied-science.js-interop/lookup","maria.util/DEBUG","maria.util/log-ret","label","x","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","maria.util/take-until","pred","coll","cljs.core/LazySeq","G__66299","cljs.core/cons","G__66300","G__66301","cljs.core/rest","p__66304","vec__66305","maria.util/rect->abs-pos","rect","y","x-offset","y-offset","G__66308","cljs.core/Keyword","js/Error","G__66309","maria.util/space","var_args","G__66315","maria.util/distinct-by","rf","seen","cljs.core/volatile!","result","fx","cljs.core/deref","cljs.core/contains?","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","step","xs","fexpr__66321","p__66322","vec__66323","maria.util/map-vals","m","cljs.core/sorted?","cljs.core/reduce-kv","out-m","k","v","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/sorted-map","cljs.core/map?","cljs.core/persistent!","cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/transient","m-atom__66185__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","seq__66327","chunk__66328","count__66329","i__66330","vec__66337","m66326","cljs.core/reset!","vec__66340","maria.util/map-keys","seq__66344","chunk__66345","count__66346","i__66347","vec__66354","m66343","vec__66357","maria.util/guard->","maria.util/guard->>"],"sourcesContent":["(ns maria.util\n  (:require [goog.events :as events]\n            [goog.object :as gobj]\n            [chia.view :as v]\n            [clojure.string :as string]\n            [applied-science.js-interop :as j])\n  (:require-macros [maria.util :refer [for-map]]))\n\n(defn loader [message]\n  [:.w-100.sans-serif.tc\n   [:.pa3.gray message]])\n\n(defn stop! [e]\n  (.stopPropagation e)\n  (.preventDefault e))\n\n(defn clipboard-text [e]\n  (some-> (or (j/get e :clipboardData)\n              (j/get js/window :clipboardData))\n          (j/call :getData \"text\")))\n\n(defn some-str [s]\n  (when (and (string? s) (not (identical? s \"\")))\n    s))\n\n(defn capitalize [s]\n  (str (string/upper-case (first s))\n       (subs s 1)))\n\n(defn spaced-string [the-name]\n  (str (string/upper-case (first the-name)) (string/replace (subs the-name 1) \"-\" \" \")))\n\n(defn handle-captured-events [{:keys [view/props] :as this}]\n  (let [dom-node (v/dom-node this)]\n    (doseq [[key f] props]\n      (when (= (namespace key) \"capture-event\")\n        (events/listen dom-node (name key) #(f % this) true)))))\n\n(defn vector-splice\n  \"Splice items into vector at index, replacing n items\"\n  [the-vector from-i to-i items]\n  (-> (subvec the-vector 0 from-i)\n      (into items)\n      (into (subvec the-vector (inc to-i) (count the-vector)))))\n\n(defn whitespace-string? [s]\n  (re-find #\"^[\\s\\n]*$\" s))\n\n(defn is-object? [o]\n  (== (js/Object o) o))\n\n(defn scroll-into-view [y-pos]\n  (let [{:keys [scrollY innerHeight]} (j/lookup js/window)]\n    (when (or (< y-pos scrollY)\n              (> y-pos (+ scrollY innerHeight)))\n      (.scrollTo js/window 0 (-> y-pos\n                                 (- (/ innerHeight 2)))))))\n\n(def DEBUG true)\n\n(defn log-ret [label x]\n  (if DEBUG (do\n                (prn label x)\n                x)\n            x))\n\n;; from https://groups.google.com/forum/#!topic/clojure-dev/NaAuBz6SpkY\n(defn take-until\n  \"Returns a lazy sequence of successive items from coll until\n   (pred item) returns true, including that item. pred must be\n   free of side-effects.\"\n  [pred coll]\n  (lazy-seq\n    (when-let [s (seq coll)]\n      (if (pred (first s))\n        (cons (first s) nil)\n        (cons (first s) (take-until pred (rest s)))))))\n\n(defn rect->abs-pos [rect [x y]]\n  (let [x-offset (.-scrollX js/window)\n        y-offset (.-scrollY js/window)]\n    [(case x\n       :left (+ x-offset (.-left rect))\n       :right (+ x-offset (.-right rect))\n       :center (+ x-offset\n                  (.-left rect)\n                  (/ (.-width rect) 2)))\n     (case y\n       :top (+ y-offset (.-top rect))\n       :bottom (+ y-offset\n                  (.-bottom rect))\n       :center (+ y-offset\n                  (.-top rect)\n                  (/ (.-height rect) 2)))]))\n\n(def space \\u00A0)\n\n\n\n(defn distinct-by\n  ;; COPIED from medley.core: https://github.com/weavejester/medley/blob/master/src/medley/core.cljc\n  ;; Copyright \u00a9 2017 James Reeves\n  ;; Distributed under the Eclipse Public License version 1.0\n  \"Returns a lazy sequence of the elements of coll, removing any elements that\n  return duplicate values when passed to a function f.\"\n  ([f]\n   (fn [rf]\n     (let [seen (volatile! #{})]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result x]\n          (let [fx (f x)]\n            (if (contains? @seen fx)\n              result\n              (do (vswap! seen conj fx)\n                  (rf result x)))))))))\n  ([f coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                  ((fn [[x :as xs] seen]\n                     (when-let [s (seq xs)]\n                       (let [fx (f x)]\n                         (if (contains? seen fx)\n                           (recur (rest s) seen)\n                           (cons x (step (rest s) (conj seen fx)))))))\n                    xs seen)))]\n     (step coll #{}))))\n\n(defn map-vals\n  \"Build map k -> (f v) for [k v] in map, preserving the initial type\"\n  [f m]\n  (cond\n    (sorted? m)\n    (reduce-kv (fn [out-m k v] (assoc out-m k (f v))) (sorted-map) m)\n    (map? m)\n    (persistent! (reduce-kv (fn [out-m k v] (assoc! out-m k (f v))) (transient {}) m))\n    :else\n    (for-map [[k v] m] k (f v))))\n\n(defn map-keys\n  \"Build map (f k) -> v for [k v] in map m\"\n  [f m]\n  (if (map? m)\n    (persistent! (reduce-kv (fn [out-m k v] (assoc! out-m (f k) v)) (transient {}) m))\n    (for-map [[k v] m] (f k) v)))\n\n(defn guard-> [x f]\n  (when (f x) x))\n\n(defn guard->> [f x]\n  (when (f x) x))\n"]}