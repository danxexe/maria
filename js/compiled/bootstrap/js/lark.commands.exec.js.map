{"version":3,"sources":["lark/commands/exec.cljs"],"mappings":"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","names":["lark.commands.exec/debug?","js/lark","js/lark.commands","js/lark.commands.exec","js/lark.commands.exec.context","lark.commands.exec/context","cljs.core/volatile!","js/lark.commands.exec.last-selections","lark.commands.exec/last-selections","lark.commands.exec/which-key-time","js/lark.commands.exec.WHICH_KEY_STATE","lark.commands.exec/WHICH_KEY_STATE","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","p__66816","map__66817","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","lark.commands.exec/clear-which-key","timeout","current-state","G__66819","js/clearTimeout","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","js/lark.commands.exec._","lark.commands.exec/_","seq__66821","cljs.core/seq","chunk__66822","count__66823","i__66824","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","modifier","internal-modifier","lark.commands.registry/format-segment","lark.commands.registry/Keypress","map__66849","cljs.core/deref","map__66858","cljs.core/reset!","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","G__66853","G__66860","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","js/setTimeout","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core/disj","lark.commands.exec/set-context!","ctx","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","js/lark.commands.exec.-before-exec","lark.commands.exec/-before-exec","lark.commands.exec/before-exec","key","f","js/lark.commands.exec.-context-augmenters","lark.commands.exec/-context-augmenters","lark.commands.exec/add-context-augmenter!","var_args","G__66883","lark.commands.exec/get-context","js/Error","lark.commands.exec.get_context.cljs$core$IFn$_invoke$arity$1","event-attrs","map__66886","block-view","context","augment-context","cljs.core/comp","cljs.core/vals","G__66899","p__66901","map__66902","lark.commands.exec/apply-context","exec-pred","intercept-pred","command-entry","exec?","cljs.core/boolean","or__4131__auto__","intercept?","and__4120__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","lark.commands.exec/get-command","name","lark.commands.registry/commands","lark.commands.exec/contextual?","command","p__66930","map__66931","lark.commands.exec/exec-command","result","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__66958","lark.commands.exec/exec-command-name","lark.commands.exec.exec_command_name.cljs$core$IFn$_invoke$arity$2","lark.commands.exec.get_context.cljs$core$IFn$_invoke$arity$0","G__66990","lark.commands.exec/keyset-commands","lark.commands.exec.keyset_commands.cljs$core$IFn$_invoke$arity$2","modifiers-down","current-context","lark.commands.registry/mappings","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","p__67002","vec__67003","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__67006","keyset","exec","clojure.set/subset?","G__67011","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/concat","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","lark.commands.exec/contextual-commands","p1__67017#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","lark.commands.exec/reverse-compare","a","b","cljs.core/compare","lark.commands.exec/handler","binding","binding-vec","binding-set","cljs.core/set","command-names","lark.commands.registry/get-keyset-commands","the-commands","p1__67027#","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3","_","seq__67030","chunk__67031","count__67032","i__67033","results","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","p1__67028#","prevent-default?","G__67049","cljs.core/empty?","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","lark.commands.registry/modifiers-internal","cljs.core/vreset!","lark.commands.registry/handler","cljs.core/List"],"sourcesContent":["(ns lark.commands.exec\n  (:require [lark.commands.registry :as registry]\n            [clojure.set :as set]))\n\n(def debug? false )\n(defonce context (volatile! {}))\n(defonce last-selections (volatile! (list)))\n(def which-key-time 1000)\n\n(defonce WHICH_KEY_STATE\n         ;;Atom to hold currently held modifiers & which-key state.\n         (atom {:modifiers-down #{}\n                :which-key/active? false}))\n\n(defn clear-which-key\n      \"Fn which toggles which-key off, clearing timeout if it exists.\"\n      [{:keys [timeout] :as current-state}]\n      (some-> timeout\n              (js/clearTimeout))\n      (dissoc current-state :timeout :which-key/active?))\n\n(defonce _ (do\n             (doseq [modifier [\"shift\"\n                               \"alt\"\n                               \"meta\"]]\n                    (let [internal-modifier (registry/format-segment :internal modifier)]\n                         (.register_combo registry/Keypress\n                                          #js {:keys #js [modifier]\n                                               :is_exclusive false\n                                               :is_solitary false\n                                               :on_keydown #(let [{:keys [timeout]} @WHICH_KEY_STATE]\n                                                                 (reset! WHICH_KEY_STATE\n                                                                         (-> @WHICH_KEY_STATE\n                                                                             (update :modifiers-down conj internal-modifier)\n                                                                             (cond-> (nil? timeout)\n                                                                                     (assoc :timeout (js/setTimeout (fn []\n                                                                                                                      (swap! WHICH_KEY_STATE assoc :which-key/active? true)) which-key-time)))))\n                                                                 true)\n                                               :on_keyup #(do\n                                                            (reset! WHICH_KEY_STATE (-> @WHICH_KEY_STATE\n                                                                                        (update :modifiers-down disj internal-modifier)\n                                                                                        (clear-which-key)))\n                                                            true)})))))\n\n(defn set-context!\n      \"Mutates command-context by merging provided context map.\"\n      [ctx]\n      (vswap! context merge ctx))\n\n(defonce -before-exec (volatile! {}))\n(defn before-exec\n      \"Registers a function `f` which will be called before any command is executed.\"\n      [key f]\n      (vswap! -before-exec assoc key f))\n\n(defonce -context-augmenters (volatile! {}))\n(defn add-context-augmenter!\n      \"Registers a reducing function which will be applied to the context before it is returned from `get-context`.\"\n      [key f]\n      (vswap! -context-augmenters assoc key f))\n\n(defn get-context\n      \"Returns the current command context, as determined by previous calls to `set-context!`,\n      after context augmenting fns have been applied.\"\n      ([] (get-context nil))\n      ([event-attrs]\n       (let [{:keys [block-view] :as context} @context]\n            (let [augment-context (apply comp (vals @-context-augmenters))]\n                 (-> context\n                     (merge event-attrs)\n                     (augment-context))))))\n\n(defn apply-context\n      \"Add contextual data to command. Adds keys `:exec?`, whether the command will be evaluated\n      given the current context, and `:intercept?`, whether the command should preventDefault\n      even if it is not executed and returns true.\"\n      [context {:keys [exec-pred intercept-pred] :as command-entry}]\n      (let [exec? (boolean (or (nil? exec-pred) (exec-pred context)))\n            intercept? (and intercept-pred (intercept-pred context))]\n           (assoc command-entry\n                  :exec? exec?\n                  :intercept? intercept?)))\n\n(defn get-command\n      \"Returns command associated with name, if it exists.\n      Add contextual data, :exec? and :intercept?.\"\n      [context name]\n      (apply-context context (get @registry/commands name)))\n\n(defn contextual?\n      \"Returns true if the command will have an effect (either by executing or\n      preventingDefault). Expects a command which has already had `apply-context` applied.\"\n      [command]\n      (or (:exec? command) (:intercept? command)))\n\n(defn exec-command\n      \"Execute a command (returned by `get-command`)\"\n      [context {:keys [command exec? intercept? name]}]\n      (let [result (when exec? (command context))]\n           (when (and exec? debug?) (prn \"Executed command:\" name))\n           (and result (not= result :lark.commands/Pass))))\n\n(defn exec-command-name\n      \"Execute a command by name.\"\n      ([name] (exec-command-name name (get-context)))\n      ([name context]\n       (exec-command context (get-command context name))))\n\n(defn keyset-commands\n      \"Returns commands which are at least partial matches of the currently pressed keys.\"\n      ([] (keyset-commands #{} (get-context)))\n      ([modifiers-down current-context]\n       (->> @registry/mappings\n            (keep (fn [[keyset {:keys [exec]}]]\n                    (when (set/subset? modifiers-down keyset)\n                      (some->> (seq exec)\n                               (map (partial get-command current-context))\n                               (filter :exec?)))))\n            (apply concat)\n            (distinct))))\n\n(defn contextual-commands\n      [context]\n      (->> (vals @registry/commands)\n           (mapv #(apply-context context %))))\n\n(def reverse-compare\n  \"Comparator function with inverse order to regular `compare`\"\n  (fn [a b] (compare b a)))\n\n(defn handler\n      \"Main handler function which is called whenever a bound keybinding is triggered.\n      Finds context-relevant commands and executes them until one returns true.\"\n      [binding binding-vec]\n      (let [binding-set (set binding-vec)\n            command-names (seq (registry/get-keyset-commands binding-set))\n            context (when command-names\n                      (get-context {:binding binding\n                                    :binding-vec binding-vec}))\n            the-commands (when command-names\n                           (->> (map #(get-command context %) command-names)\n                                (filter contextual?)\n                                (sort-by :priority reverse-compare)))\n            _ (when the-commands\n                (doseq [f (vals @-before-exec)]\n                       (f)))\n            results (when the-commands\n                      ;; `take` with `filter` means we execute commands until one returns true, then stop\n                      (take 1 (filter identity (map #(exec-command context %) the-commands))))\n            prevent-default? (or (seq (filter identity results))\n                                 (seq (filter :intercept? the-commands)))]\n           (reset! WHICH_KEY_STATE (cond-> @WHICH_KEY_STATE\n                                           (and (or prevent-default?\n                                                    (seq the-commands))\n                                                (not (empty? (set/difference (set binding-vec)\n                                                                             registry/modifiers-internal)))) (clear-which-key)\n                                           the-commands (assoc :last-exec-keys binding-vec)))\n           (if prevent-default?\n             false\n             true)))\n\n(vreset! registry/handler handler)\n"]}