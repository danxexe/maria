{"version":3,"sources":["shapes/core.cljs"],"mappings":"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AAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AA4JX;;;AAAKiJ,AAEH,AAACC,AAAI,AAACC,AAAKP;AAEb;;;AAAA,AAAMQ,AAEHtH;AAFH,AAKO,AAACyD,AAAK,AAAKiE,AACX,AAAA,AAAC5U;AADK,AAAA,AAAS4U,AAAE,AAACrH,AAASqH,AAAE,AAAA,AAACxJ;AAD9B,AAACqJ,AAAO,AAAKC;AAAL,AAAS,AAACC,AAAyBD,AAAGxH;AAD9CmH;;AASP,AAAA,AAAA,AAAA9V,AAAMsW;AAAN,AAAA,AAAA3E,AAAA;AAAA,AAAA,AAAAvR,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAuR,AAAA,AAAA,AAAAtR;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAuR,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAApR,AAAA,AAAAoR,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2E,AAAA,AAAA,AAAA,AAAA1E;;;AAAA,AAAA,AAAA,AAAA,AAAM0E,AAAgBG,AAAWC;AAAjC,AACE,AAAK1V;AAAL,AACE,AAAM6S,AAAE,AAAC3H,AAAc,AAAS,AAAUlL;AAA1C,AACE,AAAC2V,AAAMF,AAAS,AAAA,AAAIC;AAAJE;AAAA,AACG,AAAAA,AAACC,AAAWH,AAAU7C;;AADzB;;AAAA,AAEG,AAACiD,AAASjD;;;;;;AALnC,AAAA,AAAA,AAAMyC;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAA9V,AAAA6V;AAAAA,AAAA,AAAA5V,AAAA4V;AAAA,AAAA,AAAAxV,AAAA;AAAA,AAAA,AAAAA,AAAAyV,AAAAD;;;AAAA","names":["x__4433__auto__","m__4434__auto__","shapes.core/-listen","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","shapes.core/IListen","this","listeners","var_args","G__41955","shapes.core/listen","args-arr__4751__auto__","len__4730__auto__","i__4731__auto__","argseq__4752__auto__","cljs.core/IndexedSeq","seq41950","G__41951","cljs.core/first","cljs.core/next","G__41952","G__41953","G__41954","self__4717__auto__","event","listener","shape","event-1","listener-1","event-2","listener-2","args","cljs.core/last","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/butlast","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cljs.core/-write","shapes.core/BBox","shapes.core/->BBox","x1","y1","x2","y2","this__4385__auto__","k__4386__auto__","this__4387__auto__","k42045","else__4388__auto__","G__42085","cljs.core/Keyword","kind","x","y","height","width","stroke","stroke-width","fill","rotate","opacity","bbox","children","cx","cy","r","rx","ry","points","font-size","font-weight","font-family","text","href","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__42095","vec__42096","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__42044","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__42125","coll__4382__auto__","cljs.core/hash-unordered-coll","this42046","other42047","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/PROTOCOL_SENTINEL","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__42173","cljs.core/keyword-identical?","expr__42174","G__42176","G__42177","G__42178","G__42179","G__42180","G__42181","G__42182","G__42183","G__42184","G__42185","G__42186","G__42187","G__42188","G__42189","G__42190","G__42191","G__42192","G__42193","G__42194","G__42195","G__42197","G__42198","G__42199","G__42200","G__42201","G__42202","G__42203","G__42204","G__42205","G__42206","G__42207","G__42208","G__42209","G__42210","G__42211","G__42212","G__42213","G__42214","G__42218","G__42219","G__42220","G__42221","G__42222","G__42223","G__42224","G__42225","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","shapes.core/Shape","this__4428__auto__","cljs.core/List","writer__4429__auto__","G__42058","extmap__4424__auto__","G__42241","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","shapes.core/->Shape","shapes.core/map->Shape","p__42160","vec__42161","m","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/name","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","shapes.core/assert-number","message","js/isNaN","js/Error","js/parseFloat","shapes.core/assert-number-range","x-min","x-max","x-parsed","shapes.core/circle","radius","shapes.core/ellipse","radius-x","radius-y","shapes.core/rectangle","shapes.core/square","side","shapes.core/text","the-text","G__42251","shapes.core/image","src","shapes.core.image.cljs$core$IFn$_invoke$arity$3","size","shapes.core/scale-points","factor","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/*","shapes.core/move-points","new-x","new-y","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p1__42265#","p2__42266#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$3","p1__42285#","p1__42286#","cljs.core/cycle","shapes.core/polygon","shapes.core/polyline","shapes.core/triangle","h","shapes.core/stroke","color","s","shapes.core/stroke-width","shapes.core/no-stroke","shapes.core/fill","shapes.core/no-fill","shapes.core/colorize","shapes.core/scale","amount","G__42330","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","shapes.core/rotate","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","shapes.core/position","G__42332","shapes.core/opacity","o","shapes.core/points-bbox","pts","box","js/Number.MAX_SAFE_INTEGER","js/Number.MIN_SAFE_INTEGER","seq__42335","chunk__42336","count__42337","i__42338","vec__42374","temp__5720__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__42387","x__4222__auto__","y__4223__auto__","x__4219__auto__","y__4220__auto__","shapes.core/max-bbox","boxes","seq__42407","chunk__42408","count__42409","i__42410","b","shapes.core/bbox","G__42424","shapes.core/center-point","args__4736__auto__","argseq__4737__auto__","shapes.core/layer","seq42429","self__4718__auto__","shapes","kids","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","G__42432","Math/ceil","G__42433","shapes.core/beside","seq42435","cljs.core/sequential?","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/reverse","state","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","G__42436","or__4131__auto__","cljs.core/+","G__42437","p1__42434#","shapes.core/above","seq42440","G__42441","G__42447","p1__42439#","shapes.core/shape->vector","p__42461","vec__42462","k","v","fexpr__42465","G__42466","cljs.core/str","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","vec__42467","shapes.core/to-hiccup","G__42470","G__42471","shapes.core/rgb","red","green","blue","shapes.core/rgba","alpha","shapes.core/hsl","hue","saturation","lightness","shapes.core/hsla","shapes.core/rescale","value","old-min","old-max","new-min","new-max","old-spread","new-spread","shapes.core/color-swatches","p__42485","vec__42486","color-name","_","shapes.core/color-names","cljs.core/set","cljs.core/keys","shapes.core/colors-named","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cn","clojure.string/includes?","c","shapes.core/value-to-cell!","seq42496","G__42497","the-cell","cell-path","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","p1__42495#","cljs.core/assoc-in","cljs.core/identity"],"sourcesContent":["(ns shapes.core)\n\n;; TODO add spec annotations!\n;; TODO re-implement this mess using a transform matrix\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Support for _An Introduction to Racket with Pictures_-style pedagogy\n\n(defprotocol IListen\n  (-listen [this listeners]\n           \"Attach event listeners to shape.\"))\n\n(defn listen\n  ([event listener shape]\n   (-listen shape [event listener]))\n  ([event-1 listener-1\n    event-2 listener-2 & args]\n   (-listen (last args)\n            (into [event-1 listener-1\n                   event-2 listener-2]\n                  (butlast args)))))\n\n(deftype BBox [x1 y1 x2 y2])\n\n(defrecord Shape [kind x y height width stroke stroke-width fill ; universal\n                  rotate opacity bbox\n                  children                                       ; containers\n                  cx cy r rx ry                                  ; circle/ellipse\n                  points                                         ; polygon/polyline\n                  font-size font-weight font-family text         ; text\n                  href]                                          ; image\n  IListen\n  (-listen [this listeners]\n    (reduce (fn [m [event listener]]\n              (assoc m (keyword (str \"on-\" (name event))) listener))\n            this\n            (partition 2 listeners))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; helpers for param checks\n\n(defn assert-number [message x]\n  (if (js/isNaN x)\n    (throw (js/Error. message))\n    (js/parseFloat x)))\n\n(defn assert-number-range [message x-min x-max x]\n  (let [x-parsed (assert-number message x)]\n    (if (<= x-min x-parsed x-max)\n      x-parsed\n      (throw (js/Error. message)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; basic types\n\n(defn circle\n  \"Returns a circle of `radius`.\"\n  [radius]\n  (assert-number \"radius must be a number!\" radius)\n  (map->Shape {:kind   :circle\n               :r      radius\n               :cx     radius\n               :cy     radius\n               :stroke-width 0\n               :stroke \"none\"\n               :fill   \"black\"}))\n\n(defn ellipse [radius-x radius-y]\n  (assert-number \"radius-x must be a number!\" radius-x)\n  (assert-number \"radius-y must be a number!\" radius-y)\n  (map->Shape {:kind   :ellipse\n               :rx     radius-x\n               :ry     radius-y\n               :cx     radius-x\n               :cy     radius-y\n               :stroke-width 0\n               :stroke \"none\"\n               :fill   \"black\"}))\n\n(defn rectangle\n  \"Returns a rectangle of `width` and `height`. See also `square`.\"\n  [width height]\n  (assert-number \"width must be a number!\" width)\n  (assert-number \"height must be a number!\" height)\n  (map->Shape {:kind   :rect\n               :x      0\n               :y      0\n               :width  width\n               :height height\n               :stroke-width 0\n               :stroke \"none\"\n               :fill   \"black\"}))\n\n(defn square\n  \"Returns a square of dimension `side`.\"\n  [side]\n  (assert-number \"side must be a number!\" side)\n  (rectangle side side))\n\n(defn text\n  \"Add a label containing `the-text` to a drawing.\"\n  [the-text]\n  (map->Shape {:kind        :text\n               :text        the-text\n               :x           0\n               :y           18\n               :font-family \"Fira Code\"\n               :font-size   15\n               :font-weight \"normal\"\n               :width       (* 9 (count the-text))\n               :height      18\n               :fill        \"#3f4245\"}))\n\n(defn image\n  \"Add an image to the drawing\"\n  ([src] (image 200 200 src))\n  ([size src]\n   (assert-number \"size must be a number!\" size)\n   (image size size src))\n  ([width height src]\n   (assert-number \"width must be a number!\" width)\n   (assert-number \"height must be a number!\" height)\n   (map->Shape {:kind   :image\n                :href   src\n                :width  width\n                :height height})))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; points/paths\n\n(defn scale-points\n  \"Scale a set of `points` by `factor`.\"\n  [points factor]\n  (map (partial * factor) points))\n\n(defn move-points [shape new-x new-y]\n  (assoc shape\n         :points (mapv #(%1 %2)\n                       (cycle [#(+ new-x (- % (:x shape)))\n                               #(+ new-y (- % (:y shape)))])\n                       (:points shape))\n         :x new-x\n         :y new-x))\n\n(defn polygon\n  \"Create an arbitrary polygon from a sequence of `points`.\"\n  [points]\n  (map->Shape {:kind   :polygon\n               :x      0\n               :y      0\n               :width  0\n               :height 0\n               :points points\n               :stroke-width 0\n               :stroke \"none\"\n               :fill   \"black\"}))\n\n(defn polyline\n  \"Create an arbitrary polyline from a sequence of `points`.\"\n  [points]\n  (map->Shape {:kind   :polyline\n               :x      0\n               :y      0\n               :width  0\n               :height 0\n               :points points\n               :stroke-width 1\n               :stroke \"black\"\n               :fill   \"none\"}))\n\n;; our triangle primitive is just a particular case of polygon\n(defn triangle\n  \"Returns an equilateral triangle with sides of `size`.\"\n  [size]\n  (assert-number \"size must be a number!\" size)\n  (let [h (* 0.8660259 size)]\n    (assoc (polygon [0 size (/ size 2) (- size h) size size])\n           :stroke \"none\"\n           :stroke-width 0\n           :fill \"black\")))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; attribute setters\n\n(defn stroke\n  \"Return `shape` with its stroke set to `color`.\"\n  [color shape]\n  (let [s (assoc shape :stroke color)]\n    (if (= 0 (:stroke-width s))\n      (assoc s :stroke-width 1)\n      s)))\n\n(defn stroke-width\n  \"Return `shape` with its stroke set to `color`.\"\n  [width shape]\n  (assoc shape :stroke-width width))\n\n(defn no-stroke\n  \"Return `shape` with its stroke color turned off.\"\n  [shape]\n  (assoc shape :stroke \"none\"))\n\n(defn fill\n  \"Return `shape` with its fill set to `color`.\"\n  [color shape]\n  (assoc shape :fill color))\n\n(defn no-fill\n  \"Return `shape` with its fill color turned off.\"\n  [shape]\n  (assoc shape :fill \"none\"))\n\n(defn colorize\n  \"Return `shape` with its color set to `color`.\"\n  [color shape]\n  (stroke color shape)\n  (fill color shape))\n\n(defn scale\n  \"Return `shape` scaled by `amount`.\"\n  [amount shape]\n  (assert-number \"amount must be a number!\" amount)\n  (case (:kind shape)\n    :circle   (-> shape\n                  (update :r (partial * amount))\n                  (update :cx (partial * amount))\n                  (update :cy (partial * amount)))\n    :ellipse  (-> shape\n                  (update :rx (partial * amount))\n                  (update :ry (partial * amount))\n                  (update :cx (partial * amount))\n                  (update :cy (partial * amount)))\n    :polygon  (update shape :points scale-points amount)\n    :polyline (update shape :points scale-points amount)\n    :rect     (-> shape\n                  (update :height (partial * amount))\n                  (update :width (partial * amount)))\n    ;; TODO should scale layers by recursively scaling children\n    (throw (js/Error. (str \"Can't scale non-shape: \" (pr-str shape))))))\n\n;; XXX Using SVG `rotate` doesn't give us a way to know the new bounds\n;; of rotated shape, should do this with a matrix.\n(defn rotate\n  \"Return `shape` with rotated by `amount`.\"\n  [amount shape]\n  (assert-number \"amount must be a number!\" amount)\n  (if (not= :circle (:kind shape))\n    (assoc shape :rotate amount)))\n\n(defn position\n  \"Return `shape` with its x and y positions set to `x` and `y`.\"\n  [x y shape]\n  (assert-number \"x must be a number!\" x)\n  (assert-number \"y must be a number!\" y)\n  (case (:kind shape)\n    :circle   (assoc shape :cx x :cy y)\n    :ellipse  (assoc shape :cx x :cy y)\n    :polygon  (-> (move-points shape x y) (assoc :x x :y y))\n    :polyline (-> (move-points shape x y) (assoc :x x :y y))\n    :rect     (assoc shape :x x :y y)\n    :text     (assoc shape :x x :y y)\n    :image    (assoc shape :x x :y y)\n    (throw (js/Error. (str \"Can't position non-shape: \" (pr-str shape))))))\n\n(defn opacity\n  \"Set the opacity of the shape to `o`, which should be a decimal number between 0 and 1.0\"\n  [o shape]\n  (assert-number-range \"opacity must be a number between 0 and 1.0!\" 0 1.0 o)\n  (assoc shape :opacity (str o)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; compositing functions\n\n(defn points-bbox [pts]\n  (let [box (->BBox js/Number.MAX_SAFE_INTEGER js/Number.MAX_SAFE_INTEGER js/Number.MIN_SAFE_INTEGER js/Number.MIN_SAFE_INTEGER)]\n    (doseq [[x y] (partition 2 pts)]\n      (set! (.-x1 box) (min x (.-x1 box)))\n      (set! (.-y1 box) (min y (.-y1 box)))\n      (set! (.-x2 box) (max x (.-x2 box)))\n      (set! (.-y2 box) (max y (.-y2 box))))\n    box))\n\n(defn max-bbox [boxes]\n  (let [box (->BBox js/Number.MAX_SAFE_INTEGER js/Number.MAX_SAFE_INTEGER js/Number.MIN_SAFE_INTEGER js/Number.MIN_SAFE_INTEGER)]\n    (doseq [b boxes]\n      (set! (.-x1 box) (min (.-x1 b) (.-x1 box)))\n      (set! (.-y1 box) (min (.-y1 b) (.-y1 box)))\n      (set! (.-x2 box) (max (.-x2 b) (.-x2 box)))\n      (set! (.-y2 box) (max (.-y2 b) (.-y2 box))))\n    box))\n\n(defn bbox [shape]\n  ;; TODO should expand bounds as stroke-width grows\n  (case (.-kind shape)\n    :circle   (->BBox (- (.-cx shape) (.-r shape)) (- (.-cy shape) (.-r shape)) (+ (.-cx shape) (.-r shape)) (+ (.-cy shape) (.-r shape))) \n    :ellipse  (->BBox (- (.-cx shape) (.-rx shape)) (- (.-cy shape) (.-ry shape)) (+ (.-cx shape) (.-rx shape)) (+ (.-cy shape) (.-ry shape)))\n    :polygon  (points-bbox (.-points shape))\n    :polyline (points-bbox (.-points shape))\n    :rect     (->BBox (.-x shape) (.-y shape) (+ (.-x shape) (.-width shape)) (+ (.-y shape) (.-height shape)))\n    :text     (->BBox (.-x shape) (- (.-y shape) (.-height shape)) (+ (.-x shape) (.-width shape)) (.-y shape))\n    :image    (->BBox (.-x shape) (.-y shape) (+ (.-x shape) (.-width shape)) (+ (.-y shape) (.-height shape)))\n    :svg      (.-bbox shape) ; no need to re-compute\n    (throw (js/Error. (str \"Can't take bbox of non-shape: \" (pr-str shape))))))\n\n(defn center-point [shape]\n  ;; TODO we'll need special handling for triangles, otherwise they\n  ;; wobble\n  (let [b (bbox shape)]\n    [(+ (.-x1 b) (/ (- (.-x2 b) (.-x1 b)) 2))\n     (+ (.-y1 b) (/ (- (.-y2 b) (.-y1 b)) 2))]))\n\n(defn layer\n  \"Returns a new shape with these `shapes` layered over each other.\"\n  [& shapes]\n  (let [kids (remove nil? shapes)\n        bbox (max-bbox (mapv bbox kids))]\n    (map->Shape {:kind     :svg\n                 :x        0\n                 :y        0\n                 :width    (Math/ceil (.-x2 bbox))\n                 :height   (Math/ceil (.-y2 bbox))\n                 :bbox     bbox\n                 :children kids})))\n\n;; TODO these two should be rewritten because the new bbox makes them easier\n(defn beside\n  \"Return `shapes` with their positions adjusted so they're lined up beside one another.\"\n  [& shapes]\n  (if (sequential? (first shapes)) ;; XXX maybe not?\n    (apply beside (first shapes))\n    (->> (remove nil? shapes)\n         reverse\n         (reduce (fn [state shape]\n                   {:out (conj (state :out)\n                               (position (+ (get shape :x 0)\n                                            (or (:cx shape) 0)\n                                            (apply + (:widths state)))\n                                         (+ (or (:y shape) 0)\n                                            (or (:cy shape) 0))\n                                         shape))\n                    :widths (butlast (state :widths))})\n                 {:out    '()\n                  :widths (map #(.-x2 %) (map bbox (butlast shapes)))})\n         :out\n         (apply layer))))\n\n(defn above\n  \"Return `shapes` with their positions adjusted so they're stacked above one another.\"\n  [& shapes]\n  (if (sequential? (first shapes)) ;; XXX maybe not?\n    (apply above (first shapes))\n    (->> (remove nil? shapes)\n         (remove nil?)\n         reverse\n         (reduce (fn [state shape]\n                   {:out     (conj (state :out)\n                                   (position (+ (or (:x shape) 0)\n                                                (or (:cx shape) 0))\n                                             (+ (or (:y shape) 0)\n                                                (or (:cy shape) 0)\n                                                (apply + (:heights state)))\n                                             shape))\n                    :heights (butlast (state :heights))})\n                 {:out     '()\n                  :heights (map #(.-y2 %) (map bbox (butlast shapes)))})\n         :out\n         (apply layer))))\n\n;;;; from Henderson's functional geometry\n;; flip   : picture \u2192 picture (Flip a picture along its vertical center axis)\n;; rot    : picture \u2192 picture (Rotate a picture anti-clockwise by 90\u00b0)\n;; rot45  : picture \u2192 picture (rotate the picture anti-clockwise by 45\u00b0)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; output formatting\n\n(defn shape->vector [shape]\n  (into [(.-kind shape)\n         (reduce\n          (fn [m [k v]]\n            (cond\n              (nil? v) m\n              (#{:kind :bbox} k) m\n              :else (case k\n                      :points (assoc m :points (apply str (interpose \" \" (.-points shape))))\n                      ;; no longer using SVG scaling\n                      ;;:scale (assoc m :transform (str \" scale(\" scale \")\"))\n                      :rotate (let [[x y] (center-point shape)]\n                                (assoc m :transform (str \"rotate(\" (.-rotate shape) \",\" x \",\" y \")\")))\n                      (assoc m k v))))\n          {}\n          shape)\n         (.-text shape)]\n        (mapv shape->vector (.-children shape))))\n\n(defn to-hiccup [shape]\n  (if (= (.-kind shape) :svg)\n    (shape->vector shape)\n    (let [bbox (bbox shape)]\n      [:svg {:x 0 :y 0 :width (Math/ceil (.-x2 bbox)) :height (Math/ceil (.-y2 bbox))}\n       (shape->vector shape)])))\n\n;; we might want to do something like this:\n;; :viewBox  (str (.-x1 bbox) \" \" (.-y1 bbox) \" \" (.-x2 bbox) \" \" (.-y2 bbox))\n;; :preserveAspectRatio \"xMinYMin meet\"\n;; ... but it would prevent people from intentionally placing shapes\n;; partially off the canvas\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; color helpers and scaling fn\n\n(defn rgb [red green blue]\n  \"Returns a color of `red`, `green`, `blue`, each represented as a number from (0-255).\"\n  (assert-number-range \"red must be a number between 0 and 255!\" 0 255 red)\n  (assert-number-range \"green must be a number between 0 and 255!\" 0 255 green)\n  (assert-number-range \"blue must be a number between 0 and 255!\" 0 255 blue)\n  (str \"rgb(\" red \",\" green \",\" blue \")\"))\n\n(defn rgba [red green blue alpha]\n  \"Returns a color of `red`, `green`, `blue`, each represented as a number from (0-255), with an opacity of `alpha` (0.0-1.0).\"\n  (assert-number-range \"red must be a number between 0 and 255!\" 0 255 red)\n  (assert-number-range \"green must be a number between 0 and 255!\" 0 255 green)\n  (assert-number-range \"blue must be a number between 0 and 255!\" 0 255 blue)\n  (assert-number-range \"alpha must be a number between 0 and 1.0!\" 0 1.0 alpha)\n  (str \"rgba(\" red \",\" green \",\" blue \",\" alpha \")\"))\n\n(defn hsl\n  \"Returns a color of `hue` (a number between 0-359 representing an angle on the color wheel), `saturation` percentage and `lightness` percentage.\"\n  [hue saturation lightness]\n  (assert-number-range \"hue must be a number between 0 and 359!\" 0 359 hue)\n  (assert-number-range \"saturation must be a number between 0 and 100!\" 0 100 saturation)\n  (assert-number-range \"lightness must be a number between 0 and 100!\" 0 100 lightness)\n  (str \"hsl(\" hue \",\" saturation \"%,\" lightness \"%)\"))\n\n(defn hsla\n  \"Returns a color of `hue` (a number between 0-359 representing an angle on the color wheel)/`saturation` (percentage)/`lightness` (percentage)/`alpha` (0.0-1.0).\"\n  [hue saturation lightness alpha]\n  (assert-number-range \"hue must be a number between 0 and 359!\" 0 359 hue)\n  (assert-number-range \"saturation must be a number between 0 and 100!\" 0 100 saturation)\n  (assert-number-range \"lightness must be a number between 0 and 100!\" 0 100 lightness)\n  (assert-number-range \"alpha must be a number between 0 and 1.0!\" 0 1.0 alpha)\n  (str \"hsla(\" hue \",\" saturation \"%,\" lightness \"%, \" alpha \")\"))\n\n(defn rescale\n  \"Rescales value from range [old-min, old-max] to [new-min, new-max]\"\n  [value old-min old-max new-min new-max]\n  (assert-number \"value must be a number!\" value)\n  (assert-number \"old-min must be a number!\" old-min)\n  (assert-number \"old-max must be a number!\" old-max)\n  (assert-number \"new-min must be a number!\" new-min)\n  (assert-number \"new-max must be a number!\" new-max)\n  (let [old-spread (- old-max old-min)\n        new-spread (- new-max new-min)]\n    (+ (* (- value old-min) (/ new-spread old-spread))\n       new-min)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; color name dictionary\n\n(def color-swatches\n  \"Recognized SVG color keyword names, mapped to their RGB value.\"\n  (into {} (mapv (fn [[color-name _]]\n                   [color-name (colorize color-name (square 25))])\n                 {\"aliceblue\"            [240, 248, 255]\n                  \"antiquewhite\"         [250, 235, 215]\n                  \"aqua\"                 [0, 255, 255]\n                  \"aquamarine\"           [127, 255, 212]\n                  \"azure\"                [240, 255, 255]\n                  \"beige\"                [245, 245, 220]\n                  \"bisque\"               [255, 228, 196]\n                  \"black\"                [0, 0, 0]\n                  \"blanchedalmond\"       [255, 235, 205]\n                  \"blue\"                 [0, 0, 255]\n                  \"blueviolet\"           [138, 43, 226]\n                  \"brown\"                [165, 42, 42]\n                  \"burlywood\"            [222, 184, 135]\n                  \"cadetblue\"            [95, 158, 160]\n                  \"chartreuse\"           [127, 255, 0]\n                  \"chocolate\"            [210, 105, 30]\n                  \"coral\"                [255, 127, 80]\n                  \"cornflowerblue\"       [100, 149, 237]\n                  \"cornsilk\"             [255, 248, 220]\n                  \"crimson\"              [220, 20, 60]\n\n                  \"cyan\"                 [0, 255, 255]\n                  \"darkblue\"             [0, 0, 139]\n                  \"darkcyan\"             [0, 139, 139]\n                  \"darkgoldenrod\"        [184, 134, 11]\n                  \"darkgray\"             [169, 169, 169]\n                  \"darkgreen\"            [0, 100, 0]\n                  \"darkgrey\"             [169, 169, 169]\n                  \"darkkhaki\"            [189, 183, 107]\n                  \"darkmagenta\"          [139, 0, 139]\n                  \"darkolivegreen\"       [85, 107, 47]\n                  \"darkorange\"           [255, 140, 0]\n                  \"darkorchid\"           [153, 50, 204]\n                  \"darkred\"              [139, 0, 0]\n                  \"darksalmon\"           [233, 150, 122]\n                  \"darkseagreen\"         [143, 188, 143]\n                  \"darkslateblue\"        [72, 61, 139]\n                  \"darkslategray\"        [47, 79, 79]\n                  \"darkslategrey\"        [47, 79, 79]\n                  \"darkturquoise\"        [0, 206, 209]\n\n                  \"darkviolet\"           [148, 0, 211]\n                  \"deeppink\"             [255, 20, 147]\n                  \"deepskyblue\"          [0, 191, 255]\n                  \"dimgray\"              [105, 105, 105]\n                  \"dimgrey\"              [105, 105, 105]\n                  \"dodgerblue\"           [30, 144, 255]\n                  \"firebrick\"            [178, 34, 34]\n                  \"floralwhite\"          [255, 250, 240]\n                  \"forestgreen\"          [34, 139, 34]\n                  \"fuchsia\"              [255, 0, 255]\n                  \"gainsboro\"            [220, 220, 220]\n                  \"ghostwhite\"           [248, 248, 255]\n                  \"gold\"                 [255, 215, 0]\n                  \"goldenrod\"            [218, 165, 32]\n                  \"gray\"                 [128, 128, 128]\n                  \"grey\"                 [128, 128, 128]\n                  \"green\"                [0, 128, 0]\n                  \"greenyellow\"          [173, 255, 47]\n                  \"honeydew\"             [240, 255, 240]\n\n                  \"hotpink\"              [255, 105, 180]\n                  \"indianred\"            [205, 92, 92]\n                  \"indigo\"               [75, 0, 130]\n                  \"ivory\"                [255, 255, 240]\n                  \"khaki\"                [240, 230, 140]\n                  \"lavender\"             [230, 230, 250]\n                  \"lavenderblush\"        [255, 240, 245]\n                  \"lawngreen\"            [124, 252, 0]\n                  \"lemonchiffon\"         [255, 250, 205]\n                  \"lightblue\"            [173, 216, 230]\n                  \"lightcoral\"           [240, 128, 128]\n                  \"lightcyan\"            [224, 255, 255]\n                  \"lightgoldenrodyellow\" [250, 250, 210]\n                  \"lightgray\"            [211, 211, 211]\n                  \"lightgreen\"           [144, 238, 144]\n                  \"lightgrey\"            [211, 211, 211]\n                  \"lightpink\"            [255, 182, 193]\n                  \"lightsalmon\"          [255, 160, 122]\n                  \"lightseagreen\"        [32, 178, 170]\n                  \"lightskyblue\"         [135, 206, 250]\n                  \"lightslategray\"       [119, 136, 153]\n\n                  \"lightslategrey\"       [119, 136, 153]\n                  \"lightsteelblue\"       [176, 196, 222]\n                  \"lightyellow\"          [255, 255, 224]\n                  \"lime\"                 [0, 255, 0]\n                  \"limegreen\"            [50, 205, 50]\n                  \"linen\"                [250, 240, 230]\n                  \"magenta\"              [255, 0, 255]\n                  \"maroon\"               [128, 0, 0]\n                  \"mediumaquamarine\"     [102, 205, 170]\n                  \"mediumblue\"           [0, 0, 205]\n                  \"mediumorchid\"         [186, 85, 211]\n                  \"mediumpurple\"         [147, 112, 219]\n                  \"mediumseagreen\"       [60, 179, 113]\n                  \"mediumslateblue\"      [123, 104, 238]\n                  \"mediumspringgreen\"    [0, 250, 154]\n                  \"mediumturquoise\"      [72, 209, 204]\n                  \"mediumvioletred\"      [199, 21, 133]\n                  \"midnightblue\"         [25, 25, 112]\n                  \"mintcream\"            [245, 255, 250]\n                  \"mistyrose\"            [255, 228, 225]\n                  \"moccasin\"             [255, 228, 181]\n                  \"navajowhite\"          [255, 222, 173]\n                  \"navy\"                 [0, 0, 128]\n\n                  \"oldlace\"              [253, 245, 230]\n                  \"olive\"                [128, 128, 0]\n                  \"olivedrab\"            [107, 142, 35]\n                  \"orange\"               [255, 165, 0]\n                  \"orangered\"            [255, 69, 0]\n                  \"orchid\"               [218, 112, 214]\n                  \"palegoldenrod\"        [238, 232, 170]\n                  \"palegreen\"            [152, 251, 152]\n                  \"paleturquoise\"        [175, 238, 238]\n                  \"palevioletred\"        [219, 112, 147]\n                  \"papayawhip\"           [255, 239, 213]\n                  \"peachpuff\"            [255, 218, 185]\n                  \"peru\"                 [205, 133, 63]\n                  \"pink\"                 [255, 192, 203]\n                  \"plum\"                 [221, 160, 221]\n                  \"powderblue\"           [176, 224, 230]\n                  \"purple\"               [128, 0, 128]\n                  \"red\"                  [255, 0, 0]\n                  \"rosybrown\"            [188, 143, 143]\n                  \"royalblue\"            [65, 105, 225]\n                  \"saddlebrown\"          [139, 69, 19]\n                  \"salmon\"               [250, 128, 114]\n                  \"sandybrown\"           [244, 164, 96]\n                  \"seagreen\"             [46, 139, 87]\n                  \"seashell\"             [255, 245, 238]\n                  \"sienna\"               [160, 82, 45]\n\n                  \"silver\"               [192, 192, 192]\n                  \"skyblue\"              [135, 206, 235]\n                  \"slateblue\"            [106, 90, 205]\n                  \"slategray\"            [112, 128, 144]\n                  \"slategrey\"            [112, 128, 144]\n                  \"snow\"                 [255, 250, 250]\n                  \"springgreen\"          [0, 255, 127]\n                  \"steelblue\"            [70, 130, 180]\n                  \"tan\"                  [210, 180, 140]\n                  \"teal\"                 [0, 128, 128]\n                  \"thistle\"              [216, 191, 216]\n                  \"tomato\"               [255, 99, 71]\n                  \"turquoise\"            [64, 224, 208]\n                  \"violet\"               [238, 130, 238]\n                  \"wheat\"                [245, 222, 179]\n                  \"white\"                [255, 255, 255]\n                  \"whitesmoke\"           [245, 245, 245]\n                  \"yellow\"               [255, 255, 0]\n                  \"yellowgreen\"          [154, 205, 50]})))\n\n(def color-names\n  \"Set of valid color names\"\n  (set (keys color-swatches)))\n\n(defn colors-named\n  \"Subset of `color-names` whose names include the given String `s`\"\n  [s]\n  (->> color-names\n       (filter (fn [cn] (clojure.string/includes? cn s)))\n       (mapv (fn [c] [c (colorize c (square 25))]))\n       (into {})))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; random helpers to be moved somewhere else\n\n;; TODO generalize (current forces numeric types) and probably rename\n(defn value-to-cell! [the-cell & cell-path]\n  (fn [event]\n    (let [v (js/parseFloat (.-value (.-target event)))]\n      (swap! the-cell (if cell-path\n                        #(assoc-in % cell-path v)\n                        #(identity v))))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; pre-cooked SVG shapes\n\n;; XXX path not current supported, will return in future\n;; (def fish\n;;   \"An Escher-style fish.\"\n;;   (map->Shape {:kind   :path\n;;             :width  100\n;;             :height 100\n;;             :d      [:M 9.67 40.17 :C 6.86 37.67 4.49 35.56 2.63 32.93 :c 0 -0.12 0.17 -0.54 0.37 -0.94 :c 1.15 -2.28 2.17 -3.75 4.73 -6.83 :l 1.37 -1.64 :l -0.07 -0.7 :C 8.65 18.39 8.87 15.11 9.97 10.9 :C 10.11 9.63 10.41 10.28 12.04 11.5 :C 13.89 12.99 15.6 13.84 17.34 16.64 :l 2.17 0.09 :c 2.46 0.11 3.46 0.27 4.87 0.72 :l 1.06 0.34 :c 0.01 1.38 0.02 2.76 0.03 4.15 :c 0.01 1.19 0.02 2.38 0.03 3.57 :c -1.23 1.23 -2.53 2.71 -3.76 3.94 :c 1.65 2.68 6.11 4.18 9.99 4.57 :l 1.6 0.14 :l 1.12 1.32 :c 1.26 1.48 2.04 2.15 4.23 3.65 :l 1.52 1.04 :c 0.16 0.09 0.97 0.57 -0.18 0.46 :l -2.26 -0.43 :c -3.09 -0.59 -4.51 -0.78 -5.89 -0.78 :c -1.1 -0 -3.28 0.14 -4.34 0.29 :c -0.45 0.06 -0.52 0.03 -1.64 -0.91 :c -3.5 -2.93 -4.67 -3.77 -6.86 -4.93 :l -1.23 -0.66 :c -2.44 2.44 -4.88 4.88 -7.32 7.32 :c -0.26 0.37 -0.82 -0.35 -0.82 -0.35 :z :M 17.41 33.02 :C 16.08 32.32 14.9 31.64 13.36 30.72 :l -0.79 0.76 :c -0.41 0.4 -1.24 0.97 -1.7 1.43 :c -0.74 0.73 -0.93 1.02 -1.58 2.38 :c -0.68 1.41 -1.04 1.88 -1.03 1.34 :c 0 -0.35 1.35 -2.99 1.85 -3.62 :C 10.36 32.68 11.14 32.01 11.81 31.49 :l 1.26 -0.97 :c -0.49 -0.45 -0.94 -0.85 -1.33 -1.29 :c -0.15 -0.06 -2 1.44 -2.65 2.15 :c -0.34 0.37 -1.01 1.32 -1.51 2.12 :c -0.83 1.34 -1.21 1.74 -1.21 1.27 :c 0 -0.24 1.41 -2.49 2.13 -3.41 :c 0.31 -0.39 0.99 -1.05 1.52 -1.47 :c 0.53 -0.41 1.34 -0.98 1.48 -1.09 :C 10.33 26.87 9.96 25.63 9.24 24.03 :l -1.64 2 :c -2.16 2.63 -2.79 3.52 -3.79 5.35 :l -0.83 1.52 :c 0.7 0.58 4.85 5.64 7.26 7.21 :C 12.8 37.65 14.7 35.72 17.41 33.02 :z :M 9.31 38.59 :C 10.54 36.67 13.23 32.93 14.9 31.91 :c -1.08 1.8 -3.52 3.88 -4.84 6.19 :c -0.21 0.37 -0.42 0.61 -0.55 0.61 :c -0.11 0 -0.21 -0.05 -0.21 -0.12 :z :M 4.85 33.31 :c 0 -0.24 1.31 -2.7 1.75 -3.28 :c 0.74 -0.92 3.91 -4.13 4.01 -3.17 :c -1.95 1.23 -4.25 3.78 -5.05 5.85 :c -0.2 0.4 -0.45 0.73 -0.54 0.73 :c -0.1 0 -0.17 -0.06 -0.17 -0.13 :z :m 32.97 5.78 :c -1.94 -1.35 -3.1 -2.45 -4.44 -4.17 :c -0.25 -0.32 -0.31 -0.33 -2.4 -0.55 :c -4.84 -0.43 -9.35 -2.98 -10.59 -6.68 :c -2.28 -5.68 -0.94 -9.92 -6.21 -14.17 :c -0.45 -0.37 -1.49 -1.13 -2.3 -1.69 :L 10.39 10.81 :C 9.03 15.59 8.84 20.53 9.71 23.84 :c 0.58 2.22 1.63 4.4 3.24 5.81 :c 2.36 2.07 8.78 4.31 14.24 9.65 :l 0.64 -0.06 :c 4.11 -0.38 5.35 -0.34 8.91 0.34 :c 1.13 0.21 2.13 0.4 2.22 0.4 :c 0.09 0.01 -0.42 -0.39 -1.14 -0.89 :z :m -6.77 -2.06 :C 23.62 34.03 21.59 33.07 19.55 31.02 :C 16.84 27.84 15.3 24.33 13.75 20.48 :c -0.78 -2.92 0.56 0.34 0.97 1.38 :c 0.96 2.41 2.05 4.09 2.89 5.63 :c 2.35 4.33 5.52 5.98 14.71 9.58 :c 1.52 0.6 2.43 1.03 2.43 1.13 :c 0 0.09 -0.09 0.16 -0.21 0.16 :c -0.11 -0 -1.68 -0.6 -3.49 -1.33 :z :M 10.68 20.22 :C 10.61 19.64 10.41 15.52 11.2 15.35 :c 0.18 -0.03 0.37 0.24 0.55 0.63 :c 0.35 0.75 0.66 1.92 0.74 2.18 :l 0.25 1.01 :C 11.86 19.74 11.2 20.55 10.95 20.52 :C 10.81 20.53 10.73 20.43 10.68 20.22 :z :M 10.97 20.02 :C 11.43 19.57 12.15 19.2 12.4 18.97 :C 11.85 16.61 11.44 15.7 11.24 15.8 :C 10.92 16.97 10.89 18.45 10.97 20.02 :z :M 12.82 14.72 :c 0.33 -0.29 3.16 2.32 3.16 2.63 :c 0 0.06 -0.51 0.36 -1.08 0.63 :c -0.41 0.19 -1 0.47 -1.1 0.47 :c -0.28 -0.27 -1.11 -3.56 -0.98 -3.73 :z :m 0.39 0.5 :c -0.22 -0.15 0.41 2.12 0.67 2.84 :c 0.94 -0.27 1.68 -0.82 1.67 -0.86 :C 14.96 16.6 13.62 15.41 13.2 15.22 :z :m 7.37 10.36 :c -0.29 0 -0.08 -0.36 0.57 -0.98 :c 0.27 -0.25 0.5 -0.46 0.73 -0.61 :c 0.59 -0.4 1.13 -0.53 2.08 -0.55 :l 1.06 -0.02 :c -0.01 -0.49 0.04 -1.15 -0.09 -1.54 :c -0.05 0.03 -0.65 -0.17 -1.07 -0.25 :c -1.23 -0.26 -1.58 -0.14 -2.54 0.32 :c -0.92 0.44 -1.11 0.57 -1.11 0.33 :c 0 -0.08 0.43 -0.36 0.95 -0.62 :c 0.86 -0.42 1.03 -0.46 1.79 -0.44 :c 0.46 0.01 1.11 0.13 1.45 0.19 :l 0.68 0.12 :c 0.01 -0.14 0.02 -0.4 0.04 -0.67 :c 0.02 -0.42 0.03 -0.87 -0 -1 :c -0.99 -0.46 -2.15 -0.84 -3.07 -0.85 :c -0.97 -0.01 -1.86 0 -2.58 0.3 :c -0.32 0.13 -0.5 0.35 -0.75 0.62 :c 0.41 1.7 1.43 7.99 2.76 9.21 :c 1.16 -1.16 2.37 -2.56 3.53 -3.72 :c 0.23 -0.8 0.08 -1.62 -0.06 -1.65 :c -2.29 -0.53 -3.69 0.99 -4.39 1.82 :z :m 4.44 -7.47 :m -0.63 -0.22 :m -1.18 -0.42 :C 22.66 17.28 22.13 17.18 21.55 17.12 :C 20.88 17.06 20.14 17.04 19.22 16.96 :C 18.7 16.92 17.65 16.91 17.5 16.88 :c 0.15 0.31 0.32 0.65 0.49 1.01 :c 0.26 0.54 0.51 1.11 0.62 1.62 :c 0.81 -0.55 1.58 -0.71 2.31 -0.77 :c 0.87 -0.08 1.89 0.1 2.69 0.3 :c 0.69 0.17 1.21 0.35 1.32 0.38 :c 0.13 0.04 0.15 -0.14 0.14 -0.42 :c -0.01 -0.25 -0.05 -0.59 -0.05 -0.89 :z :m 1.48 13.43 :c -0.34 -0.09 -0.81 -0.37 -1.21 -0.71 :c -0.22 -0.19 -0.43 -0.41 -0.57 -0.62 :c -0.12 -0.18 -0.2 -0.35 -0.21 -0.51 :c -0.03 -0.38 0.5 0.46 0.88 0.85 :c 0.13 0.13 0.3 0.25 0.48 0.36 :c 0.36 0.21 0.77 0.39 0.98 0.58 :c -0.01 0.09 -0.14 0.15 -0.36 0.05 :z :m -0.18 -2.17 :c -0.12 -0.08 -0.23 -0.13 -0.33 -0.27 :c -0.13 -0.16 -0.23 -0.36 -0.31 -0.55 :c -0.17 -0.42 -0.28 -0.79 -0.05 -0.79 :c 0.06 0 0.15 0.23 0.24 0.46 :c 0.06 0.16 0.12 0.31 0.16 0.39 :c 0.1 0.19 0.34 0.43 0.53 0.53 :c 0.09 0.46 -0.16 0.28 -0.24 0.23 :z]\n;;             :stroke \"black\"\n;;             :fill   \"none\"}))\n\n"]}