{"version":3,"sources":["maria/live/source_lookups.cljs"],"mappings":"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","names":["maria.live.source-lookups/read-node","reader","lark.tree.parse/parse-next","maria.live.source-lookups/index-position","idx","source","lines","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","clojure.string.split.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core/last","p__67436","map__67437","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","maria.live.source-lookups/source-from","line","column","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","p1__67435#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","clojure.string.join.cljs$core$IFn$_invoke$arity$2","maria.live.source-lookups/source-of-form-at-position","position","lark.tree.parse/indexing-reader","node","lark.tree.emit.string.cljs$core$IFn$_invoke$arity$1","p__67444","map__67445","maria.live.source-lookups/source-of-top-level-form","the-var","p__67449","map__67453","maria.live.source-lookups/js-match","js-value","js-source","compiled-js","source-map","intermediate-values","value","result","or__4131__auto__","G__67470","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","cljs.core/first","temp__5720__auto__","i","and__4120__auto__","G__67476","clojure.string.index_of.cljs$core$IFn$_invoke$arity$2","lark.eval/mapped-cljs-position","cljs.core/inc","maria.live.source-lookups/js-source->clj-source","maria.eval/eval-log","cljs.core/deref","maria.live.source-lookups/demunge-symbol-str","s","parts","cljs.core/demunge","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1","maria.live.source-lookups/fn-var","cljs.core/memoize","f","cljs.core/fn?","munged-sym","maria.util/some-str","maria.live.ns_utils.resolve_var.cljs$core$IFn$_invoke$arity$1","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","iter__4523__auto__","s__67503","cljs.core/LazySeq","cljs.core/seq","xs__6277__auto__","vec__67509","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","iterys__4519__auto__","s__67505","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__67507","cljs.core/chunk-buffer","i__67506","vec__67516","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__67504","cljs.core/chunk-rest","vec__67522","cljs.core/cons","cljs.core/rest","fs__4520__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__67502","_","ns-data","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","maria.eval/c-state","G__67528","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","lark.eval/var-value","maria.live.source-lookups/source-path","maria.live.source-lookups/fetch-source","path","meta","cb","G__67537","G__67538","G__67539","goog.net.XhrIo/send","e","target","G__67544","G__67548","p__67552","map__67553","map__67554","maria.live.source-lookups/var-source","meta-file","file","name","temp__5718__auto__","logged-source","G__67558","lark.eval/cljs-cache","G__67560","source-name","G__67563","cljs.core/namespace","shadow.cljs.bootstrap.env/get-ns-info","maria.eval/bootstrap-path","namespace-path","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/munge","clojure.string/replace","cljs.core/re-find","cljs.core/re-pattern","G__67577","maria.live.source-lookups/fn-source-sync","maria.live.source-lookups/fn-name","G__67583","cljs.core/chunk-first"],"sourcesContent":["(ns maria.live.source-lookups\n  (:require [cljs.tools.reader.reader-types :as rt]\n            [lark.tree.parse :as parse]\n            [lark.tree.core :as tree]\n            [clojure.string :as string]\n            [maria.eval :as e]\n            [lark.eval :as live-eval]\n            [goog.net.XhrIo :as xhr]\n            [maria.util :as util]\n            [shadow.cljs.bootstrap.env :as shadow-env]\n            [maria.live.ns-utils :as ns-utils]\n            [lark.tree.emit :as emit]\n            [clojure.string :as str])\n  (:import goog.string.StringBuffer))\n\n;; may the wrath of God feast upon those who introduce 1- and 0-indexes into the same universe\n\n(defn read-node [reader]\n  (parse/parse-next reader))\n\n(defn index-position\n  \"Given an index into a string, returns the 1-indexed line+column position\"\n  [idx source]\n  (let [lines (as-> source source\n                    (subs source 0 idx)\n                    (string/split source \"\\n\"))]\n    {:line   (count lines)\n     :column (count (last lines))}))\n\n(defn source-from\n  \"Trim string, from beginning until the provided 1-indexed line+column position.\"\n  [source {:keys [line column]}]\n  (as-> source source\n        (string/split source \"\\n\")\n        (drop (dec line) source)\n        (vec source)\n        (update source (dec (count source)) #(subs % (dec column) (count %)))\n        (string/join \"\\n\" source)))\n\n(defn source-of-form-at-position\n  \"Given a 1-indexed position in a source string, return the first form.\"\n  [source position]\n  (let [reader (parse/indexing-reader (source-from source position))\n        node (read-node reader)]\n    (emit/string node)))\n\n(defn source-of-top-level-form\n  \"Given a 1-indexed position in a source string, return the first form.\"\n  [source {:keys [line] :as the-var}]\n  (source-of-form-at-position source {:line line :column 1})\n\n  ;; the following is _very_ slow and shouldn't be necessary.\n  #_(let [line (dec line)\n          reader (parse/indexing-reader source #_(source-from source (assoc position :column 1)))]\n      (loop []\n        (let [the-node (read-node reader)]\n          (cond (nil? the-node)\n                nil\n                (and (>= (:end-line the-node) line)\n                     (not (node/whitespace? the-node)))\n                (emit/string the-node)\n                :else (recur))))))\n\n(defn js-match [js-value js-source {:keys [compiled-js source-map source intermediate-values value] :as result}]\n  (or (some->> intermediate-values\n               (keep (partial js-match js-value js-source))\n               (first))\n      (or (when-let [i (and source-map\n                            (some-> compiled-js (str/index-of js-source)))]\n            (source-of-form-at-position source\n                                        (-> (live-eval/mapped-cljs-position (index-position i compiled-js) source-map)\n                                            (update :line inc)\n                                            (update :column inc))))\n          (comment\n           ;; unsure if this is a good idea - shows the entire block that\n           ;; produced the value\n           (when (identical? js-value value)\n             source)))))\n\n(defn js-source->clj-source\n  \"Searches previously compiled ClojureScript<->JavaScript mappings to return the original ClojureScript\n  corresponding to compiled JavaScript\"\n  [js-value js-source]\n  (->> @e/eval-log\n       (keep (partial js-match js-value js-source))\n       (first)))\n\n(defn demunge-symbol-str [s]\n  (when s\n    (let [parts (string/split (demunge s) \"/\")]\n      (if (> (count parts) 1)\n        (str (string/join \".\" (drop-last parts)) \"/\" (last parts))\n        (first parts)))))\n\n(def fn-var\n  \"Look up the var for a function using its `name` property\"\n  (memoize\n   (fn [f]\n     (when (fn? f)\n       (or (when-let [munged-sym (util/some-str (aget f \"name\"))]\n             (when-let [the-var (ns-utils/resolve-var (symbol (demunge-symbol-str munged-sym)))]\n               the-var))\n           (first (for [[_ ns-data] (get-in @e/c-state [:cljs.analyzer/namespaces])\n                        [_ the-var] (ns-data :defs)\n                        :when (= f (live-eval/var-value the-var))]\n                    the-var)))))))\n\n(def source-path \"/js/cljs_live_bundles/sources\")\n\n(defn fetch-source [path meta cb]\n  (xhr/send path\n            (fn [e]\n              (let [target (.-target e)]\n                (if (.isSuccess target)\n                  (let [source (.getResponseText target)]\n                    ;; strip source to line/col from meta\n                    (cb {:value (source-of-top-level-form source meta)}))\n                  (cb {:error (str \"File not found: `\" path \"`\\n\" (.getLastError target))}))))\n            \"GET\"))\n\n(defn var-source\n  \"Look up the source code corresponding to a var's metadata\"\n  [{{meta-file :file :as meta} :meta file :file name :name :as the-var} cb]\n  (if-let [logged-source (some-> (get @live-eval/cljs-cache meta-file)\n                                 (source-of-top-level-form the-var))]\n    (cb {:value logged-source})\n\n    (if-let [source-name (some-> (namespace name)\n                                 (symbol)\n                                 (shadow-env/get-ns-info)\n                                 (:source-name))]\n      (fetch-source (str e/bootstrap-path source-name)\n                    meta\n                    cb)\n      (if-let [file (or file meta-file)]\n        (let [namespace-path (as-> (namespace name) path\n                                   (string/split path \".\")\n                                   (map munge path)\n                                   (string/join \"/\" path)\n                                   (string/replace path \"$macros\" \"\"))\n              file (re-find (re-pattern (str namespace-path \".*\")) file)]\n          (fetch-source (str source-path \"/\" file)\n                        meta\n                        cb))\n        (cb {:error (str \"File not specified for `\" name \"`\")})))))\n\n(defn fn-source-sync [f]\n  (when (fn? f)\n    (or (js-source->clj-source f (.toString f))\n        (.toString f))))\n\n(defn fn-name\n  [f]\n  (or (some-> (aget f \"name\") (demunge-symbol-str))\n      (:name (fn-var f))))"]}