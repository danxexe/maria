{"version":3,"sources":["net/cgrand/macrovich$macros.cljc"],"mappings":"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","names":["ret__4776__auto__","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","net.cgrand.macrovich$macros/deftime","&form","&env","seq70781","G__70782","cljs.core/first","cljs.core/next","G__70783","self__4717__auto__","body","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/List","cljs.core/re-matches","cljs.core/name","cljs.core/ns-name","cljs.core/*ns*","net.cgrand.macrovich$macros/usetime","seq70796","G__70797","G__70798","cljs.core/not","net.cgrand.macrovich$macros/case","p__70817","map__70818","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","seq70806","G__70807","G__70808","cljs","clj","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/contains?","net.cgrand.macrovich$macros/replace","seq70820","G__70821","G__70822","G__70823","map-or-maps","smap","cljs.core/map?","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/into","walk","form","cljs.core/with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/empty","iter__4523__auto__","s__70830","cljs.core/LazySeq","temp__5720__auto__","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__70832","cljs.core/chunk-buffer","i__70831","vec__70833","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__70829","cljs.core/chunk-rest","vec__70836","cljs.core/cons","cljs.core/rest","k","v","cljs.core/meta","cljs.core/seq?","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/coll?","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core/chunk-first"],"sourcesContent":["(ns net.cgrand.macrovich\n  (:refer-clojure :exclude [case replace]))\n\n(defmacro deftime\n  \"This block will only be evaluated at the correct time for macro definition, at other times its content\n   are removed.\n   For Clojure it always behaves like a `do` block.\n   For Clojurescript/JVM the block is only visible to Clojure.\n   For self-hosted Clojurescript the block is only visible when defining macros in the pseudo-namespace.\"\n  [& body]\n  (when #?(:clj (not (:ns &env)) :cljs (re-matches #\".*\\$macros\" (name (ns-name *ns*))))\n    `(do ~@body)))\n\n(defmacro usetime\n  \"This block content is not included at macro definition time.\n   For Clojure it always behaves like a `do` block.\n   For Clojurescript/JVM the block is only visible to Clojurescript.\n   For self-hosted Clojurescript the block is invisible when defining macros in the pseudo-namespace.\"\n  [& body]\n  (when #?(:clj true :cljs (not (re-matches #\".*\\$macros\" (name (ns-name *ns*)))))\n    `(do ~@body)))\n\n(defmacro case [& {:keys [cljs clj]}]\n  (if (contains? &env '&env)\n    `(if (:ns ~'&env) ~cljs ~clj)\n    (if #?(:clj (:ns &env) :cljs true)\n      cljs\n      clj)))\n\n(defmacro replace [map-or-maps & body]\n  (let [smap (if (map? map-or-maps) map-or-maps (reduce into {} map-or-maps))\n        walk (fn walk [form]\n               (cond\n                 (contains? smap form) (smap form)\n                 (map? form) (with-meta\n                               (into (empty form)\n                                 (for [[k v] form]\n                                   [(walk k) (walk v)]))\n                               (meta form))\n                 (seq? form) (with-meta\n                                (map walk form)\n                                (meta form))\n                 (coll? form) (with-meta\n                                (into (empty form) (map walk) form)\n                                (meta form))\n                 :else form))]\n    `(do ~@(map walk body))))\n\n"]}