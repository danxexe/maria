{"version":3,"sources":["lark/tree/range.cljc"],"mappings":"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","names":["lark.tree.range/lt","pos1","pos2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","lark.tree.range/contains-fn","include-edges?","vec__64211","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","greater-than","less-than","G__64214","js/Error","cljs.core/>=","cljs.core/<=","cljs.core/>","cljs.core/<","container","pos","and__4120__auto__","cljs.core/type","fast-zip.core/ZipperLocation","within?","fast-zip.core/node","map__64217","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__64218","cljs.core.get.cljs$core$IFn$_invoke$arity$3","map__64219","pos-line","pos-column","end-pos-line","end-pos-column","line","column","end-line","end-column","lark.tree.range/within?","lark.tree.range/within-inner?","lark.tree.range/edge-ranges","node","lark.tree.node/has-edges?","vec__64261","left","right","lark.tree.reader/edges","G__64265","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/count","p__64272","map__64273","lark.tree.range/inner-range","tag","temp__5718__auto__","vec__64286","p__64297","map__64299","lark.tree.range/->end","p__64316","map__64317","lark.tree.range/end","var_args","G__64343","lark.tree.range/bounds","cljs.core/select-keys","side","G__64357","cljs.core/Keyword","lark.tree.range.bounds.cljs$core$IFn$_invoke$arity$2","lark.tree.range/range=","p1","p2","lark.tree.range.bounds.cljs$core$IFn$_invoke$arity$1","lark.tree.range/pos=","lark.tree.range/empty-range?","lark.tree.range/node-highlights","lark.tree.node/may-contain-children?","cljs.core/second","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/first","cljs.core/merge"],"sourcesContent":["(ns lark.tree.range\n  (:require [lark.tree.node :as n]\n            [lark.tree.reader :as rd]\n            [fast-zip.core :as z]))\n\n(defn lt [pos1 pos2]\n  (or (< (:line pos1) (:line pos2))\n      (and (= (:line pos1) (:line pos2))\n           (< (:column pos1) (:column pos2)))))\n\n(comment\n  (assert (lt {:line 0 :column 0} {:line 0 :column 1}))\n  (assert (lt {:line 0 :column 0} {:line 1 :column 0}))\n  (assert (not (lt {:line 0 :column 1} {:line 0 :column 0})))\n  (assert (not (lt {:line 1 :column 0} {:line 0 :column 0})))\n  (assert (not (lt {:line 0 :column 0} {:line 0 :column 0}))))\n\n(defn contains-fn [include-edges?]\n  (let [[greater-than less-than] (case include-edges?\n                                   true [>= <=]\n                                   false [> <])]\n    (fn within? [container pos]\n      (and container\n           (if (= (type container) z/ZipperLocation)\n             (within? (z/node container) pos)\n             (let [{pos-line :line pos-column :column} pos\n                   {end-pos-line :end-line end-pos-column :end-column\n                    :or          {end-pos-line   pos-line\n                                  end-pos-column pos-column}} pos\n                   {:keys [line column end-line end-column]} container]\n               (and (>= pos-line line)\n                    (<= end-pos-line end-line)\n                    (if (= pos-line line) (greater-than pos-column column) true)\n                    (if (= end-pos-line end-line) (less-than end-pos-column end-column) true))))))))\n\n(def within? (contains-fn true))\n(def within-inner? (contains-fn false))\n\n(defn edge-ranges [node]\n  (when (n/has-edges? node)\n    (let [[left right] (get rd/edges (get node :tag))]\n      (cond-> []\n              left (conj {:line       (:line node) :end-line (:line node)\n                          :column     (:column node)\n                          :end-column (+ (:column node) (count left))})\n              right (conj {:line       (:end-line node) :end-line (:end-line node)\n                           :column     (- (:end-column node) (count right))\n                           :end-column (:end-column node)})))))\n\n(defn inner-range [{:keys [line column end-line end-column tag] :as node}]\n  (if-let [[left right] (get rd/edges tag)]\n    {:line       line\n     :column     (+ column (count left))\n     :end-line   end-line\n     :end-column (- end-column (count right))}\n    node))\n\n(defn ->end [{:keys [line column]}]\n  {:end-line line :end-column column})\n\n(defn end [{:keys [end-line end-column]}]\n  {:line end-line :column end-column})\n\n(defn bounds\n  \"Returns position map for left or right boundary of the node.\"\n  ([node] (select-keys node [:line :column :end-line :end-column]))\n  ([node side]\n   (case side :left {:line (get node :line)\n                     :column (get node :column)}\n              :right (if-let [end-line (:end-line node)]\n                       {:line   end-line\n                        :column (:end-column node)}\n                       (bounds node :left)))))\n\n(defn range= [p1 p2]\n  (= (bounds p1)\n     (bounds p2)))\n\n(defn pos= [p1 p2]\n  (= (bounds p1 :left)\n     (bounds p2 :left)))\n\n(defn empty-range? [node]\n  (and (or (= (:line node) (:end-line node)) (nil? (:end-line node)))\n       (or (= (:column node) (:end-column node)) (nil? (:end-column node)))))\n\n(defn node-highlights\n  \"Get range(s) to highlight for a node. For a collection, only highlight brackets.\"\n  [node]\n  (if (n/may-contain-children? node)\n    (if (second (get rd/edges (get node :tag)))\n      (edge-ranges node)\n      (update (edge-ranges (first (:children node))) 0 merge (bounds node :left)))\n    [node]))"]}