{"version":3,"sources":["chia/db.cljs"],"mappings":";;;AAIA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAmBC,AAAK,AAAA,AAACC;;AAEzB,AAAKC,AAAO,AAACC,AAAQC,AAASJ;AAC9B,AAAKK,AAAI,AAACF,AAAQG,AAAMN;AACxB,AAAKO,AAAO,AAACJ,AAAQK,AAASR;AAC9B,AAAKS,AAAY,AAACN,AAAQO,AAAcV;AAExC,AAAKW,AAAW,AAACR,AAAQS,AAAaZ;AACtC,AAAKa,AAAS,AAACV,AAAQW,AAAWd;AAElC,AAAKe,AAAU,AAACZ,AAAQa,AAAYhB;AACpC,AAAKiB,AAAM,AAACd,AAAQe,AAAQlB;AAE5B,AAAKmB,AAAU,AAAChB,AAAQiB,AAAYpB;AACpC,AAAKqB,AAAO,AAAClB,AAAQmB,AAAStB;AAC9B,AAAKuB,AAAS,AAACpB,AAAQqB,AAAWxB;AAClC,AAAKyB,AAAc,AAACtB,AAAQuB,AAAgB1B;AAE5C,AAAK2B,AAAUC","names":["js/chia","js/chia.db","js/chia.db.*db*","chia.db/*db*","chia.db.core.create.cljs$core$IFn$_invoke$arity$1","chia.db/entity","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","chia.db.core/entity","chia.db/get","chia.db.core/get","chia.db/get-in","chia.db.core/get-in","chia.db/select-keys","chia.db.core/select-keys","chia.db/entity-ids","chia.db.core/entity-ids","chia.db/entities","chia.db.core/entities","chia.db/contains?","chia.db.core/contains?","chia.db/touch","chia.db.core/touch","chia.db/transact!","chia.db.core/transact!","chia.db/listen","chia.db.core/listen","chia.db/unlisten","chia.db.core/unlisten","chia.db/merge-schema!","chia.db.core/merge-schema!","chia.db/unique-id","chia.db.core/unique-id"],"sourcesContent":["(ns chia.db\n  (:refer-clojure :exclude [get get-in contains? select-keys namespace])\n  (:require [chia.db.core :as d]))\n\n(defonce ^:dynamic *db* (d/create {}))\n\n(def entity (partial d/entity *db*))\n(def get (partial d/get *db*))\n(def get-in (partial d/get-in *db*))\n(def select-keys (partial d/select-keys *db*))\n\n(def entity-ids (partial d/entity-ids *db*))\n(def entities (partial d/entities *db*))\n\n(def contains? (partial d/contains? *db*))\n(def touch (partial d/touch *db*))\n\n(def transact! (partial d/transact! *db*))\n(def listen (partial d/listen *db*))\n(def unlisten (partial d/unlisten *db*))\n(def merge-schema! (partial d/merge-schema! *db*))\n\n(def unique-id d/unique-id)"]}