{"version":3,"sources":["chia/view$macros.cljc"],"mappings":"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","names":["chia.view$macros/parse-functional-view-args","args","view-map","cljs.spec.alpha/conform","cljs.spec.alpha/cat-impl","cljs.spec.alpha/maybe-impl","cljs.core/symbol?","cljs.core/string?","cljs.core/map?","cljs.spec.alpha/rep+impl","cljs.core/any?","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.core/name","cljs.core/ns-name","cljs.core/*ns*","ret__4776__auto__","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","chia.view$macros/defn","&form","&env","seq71027","G__71028","cljs.core/first","cljs.core/next","G__71029","self__4717__auto__","map__71053","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__71054","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/List","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/array-map","name","doc","options","body","view-name","forward-ref?","f-sym","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","keyf-sym","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","key-fn","args-sym","or__4131__auto__","chia.view$macros/defclass","seq71110","G__71111","G__71112"],"sourcesContent":["(ns chia.view\n  (:refer-clojure :exclude [defn])\n  (:require [clojure.core :as core]\n            [clojure.spec.alpha :as s]\n            [applied-science.js-interop :as j]))\n\n(core/defn parse-functional-view-args [args]\n  (let [view-map (s/conform (s/cat :name (s/? symbol?)\n                                   :doc (s/? string?)\n                                   :view/options (s/? map?)\n                                   :body (s/+ any?))\n                            args)]\n    (assoc view-map :view/name\n                    (symbol (name (ns-name *ns*))\n                            (name (:name view-map))))))\n\n(defmacro defn [& args]\n  (let [{:keys     [name\n                    doc\n                    view/options\n                    body]\n         view-name :view/name} (parse-functional-view-args args)\n        {:view/keys [forward-ref?]} options\n        f-sym (symbol (str \"-\" name))\n        keyf-sym (gensym \"key\")\n        key-fn (:key options)\n        args-sym (gensym \"args\")]\n    `(let [~keyf-sym ~key-fn\n           ~f-sym (~'chia.view/-functional-render\n                   {:view/name           ~(str view-name)\n                    :view/fn             (fn ~name ~@body)\n                    :view/should-update? ~(:view/should-update? options `not=)\n                    :view/forward-ref?   ~(:view/forward-ref? options false)})]\n       (core/defn ~name [& ~args-sym]\n         (let [props# (when ~(or keyf-sym forward-ref?)\n                        (j/obj\n                         ~@(when key-fn\n                             [:key `(apply ~keyf-sym ~args-sym)])\n                         ~@(when forward-ref?\n                             [:ref `(:ref (first ~args-sym))])))]\n           (~'chia.view/-create-element ~f-sym props# ~args-sym))))))\n\n\n(defmacro defclass\n  \"Define a view function.\n\n   Expects optional docstring and methods map, followed by\n    the argslist and body for the render function, which should\n    return a Hiccup vector or React element.\"\n  [& args]\n  `(~'chia.view.class/defclass ~@args))\n\n"]}