{"version":3,"sources":["lark/tree/nav.cljc"],"mappings":"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","names":["lark.tree.nav/prefix-parents","cljs.core/reduce-kv","p__65046","vec__65047","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","parents","tag","_","right-bracket","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","lark.tree.reader/edges","lark.tree.nav/include-prefix-parents","loc","cljs.core/contains?","G__65068","fast-zip.core/up","G__65073","lark.tree.nav/iteratev-while","f","start-loc","out","temp__5718__auto__","next-loc","lark.tree.nav/child-locs","fast-zip.core/right","fast-zip.core/down","lark.tree.nav/right-locs","lark.tree.nav/left-locs","fast-zip.core/left","lark.tree.nav/right-up","or__4131__auto__","G__65101","lark.tree.nav/left-up","G__65103","lark.tree.nav/before?","pos1","pos2","cljs.core.get.cljs$core$IFn$_invoke$arity$2","lark.tree.nav/after?","lark.tree.nav/navigate","ast","pos","js/Error","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/type","fast-zip.core/ZipperLocation","node","children","found","lark.tree.range/within?","lark.tree.node/terminal-node?","cljs.core/empty?","G__65129","p1__65118#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/first","found-node","G__65139","G__65152","p1__65119#","lark.tree.nav/mouse-eval-region","and__4120__auto__","G__65157","lark.tree.node/sexp?","lark.tree.nav/top-loc","cljs.core/not","G__65163","lark.tree.nav/closest","pred","lark.tree.nav/cursor-space-loc","zipper","temp__5720__auto__","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","p1__65164#","p__65167","map__65170","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","lark.tree.nav/path-node-pred","lark.tree.reader/whitespace-tag?","lark.tree.nav/get-loc","path","segments","cljs.core/rest","cljs.core/iterate","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","fast-zip.core/node","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","lark.tree.nav/get-path","cljs.core/cons","fast-zip.core/lefts","cljs.core/count","lark.tree.nav/find-next","fast-zip.core/next","p1__65177#","fast-zip.core/end?"],"sourcesContent":["(ns lark.tree.nav\n  (:refer-clojure :exclude [range])\n  (:require [fast-zip.core :as z]\n            [lark.tree.node :as n]\n            [lark.tree.reader :as rd]\n            [lark.tree.range :as range]))\n\n(def prefix-parents (reduce-kv (fn [parents tag [_ right-bracket]]\n                                 (if (nil? right-bracket)\n                                   (conj parents tag)\n                                   parents)) #{} rd/edges))\n\n(defn include-prefix-parents [loc]\n  (when loc\n    (if (contains? prefix-parents (some-> (z/up loc)\n                                          (.-node)\n                                          (.-tag)))\n      (include-prefix-parents (z/up loc))\n      loc)))\n\n(defn iteratev-while [f start-loc]\n  (when start-loc\n    (loop [loc start-loc\n           out [start-loc]]\n      (if-let [next-loc (f loc)]\n        (recur next-loc (conj out next-loc))\n        out))))\n\n(defn child-locs [loc]\n  (iteratev-while z/right (z/down loc)))\n\n(defn right-locs [loc]\n  (iteratev-while z/right (include-prefix-parents (z/right loc))))\n\n(defn left-locs [loc]\n  (iteratev-while z/left (include-prefix-parents (z/left loc))))\n\n(defn right-up [loc]\n  (or (z/right loc)\n      (some-> (z/up loc)\n              (include-prefix-parents))))\n\n(defn left-up [loc]\n  (or (z/left loc)\n      (some-> (z/up loc)\n              (include-prefix-parents))))\n\n(defn before? [pos1 pos2]\n  (and (<= (get pos1 :line) (get pos2 :line))\n       (< (get pos1 :column) (get pos2 :column))))\n\n(defn after? [pos1 pos2]\n  (and (>= (get pos1 :line) (get pos2 :line))\n       (> (get pos1 :column) (get pos2 :column))))\n\n(defn navigate\n  \"Navigate to a position within a zipper (returns loc) or ast (returns node).\"\n  [ast pos]\n  (assert pos)\n  (if (= (type ast) z/ZipperLocation)\n    (let [loc ast\n          node (.-node loc)\n          children (.-children node)\n          found (when (range/within? node pos)\n                  (if\n                   (or (n/terminal-node? node)\n                       (empty? children))\n                    loc\n                    (or\n                     (some-> (filter #(range/within? % pos) (child-locs loc))\n                             first\n                             (navigate pos))\n                     loc)))]\n      (if (let [found-node (some-> found (.-node))]\n            (and (= (get pos :line) (get found-node :end-line))\n                 (= (get pos :column) (get found-node :end-column))))\n        (or (z/right found) found)\n        found))\n    (when (range/within? ast pos)\n      (if\n       (or (n/terminal-node? ast)\n           (empty? (get ast :children)))\n        ast\n        (or (some-> (filter #(range/within? % pos) (get ast :children))\n                    first\n                    (navigate pos))\n            (when-not (= :base (get ast :tag))\n              ast))))))\n\n(defn mouse-eval-region\n  \"Select sexp under the mouse. Whitespace defers to parent.\"\n  [loc]\n  (or (and (n/sexp? (.-node loc)) loc)\n      (z/up loc)))\n\n(defn top-loc [loc]\n  (loop [loc loc]\n    (if-not loc\n      loc\n      (if (or (= :base (:tag (.-node loc)))\n              (= :base (some-> (z/up loc) .-node :tag)))\n        loc\n        (recur (z/up loc))))))\n\n(defn closest [pred loc]\n  (if-not loc\n    nil\n    (if (pred loc)\n      loc\n      (recur pred (z/up loc)))))\n\n(defn cursor-space-loc [zipper pos]\n  (when-let [loc (navigate zipper pos)]\n    (->> [loc (z/left loc)]\n         (keep identity)\n         (filter #(-> %\n                      (.-node)\n                      (.-tag)\n                      (= :space)))\n         (first))))\n\n(defn path-node-pred [{:keys [tag]}]\n  (or (= tag :newline)\n      (not (rd/whitespace-tag? tag))))\n\n(defn get-loc [zipper path]\n  (loop [segments path\n         loc zipper]\n    (if (or (not loc)\n            (empty? segments))\n      loc\n      (recur (rest segments)\n             (->> (iterate z/right (z/down loc))\n                  (take-while identity)\n                  (filter (comp path-node-pred z/node))\n                  (drop (first segments))\n                  (first))))))\n\n(defn get-path [loc]\n  (loop [loc loc\n         out ()]\n    (if-not loc\n      (drop 1 out)\n      (recur (z/up loc)\n             (cons (->> (z/lefts loc)\n                        (filter path-node-pred)\n                        (count)) out)))))\n\n(defn find-next [ast pred]\n  (->> (iterate z/next ast)\n       (take-while #(and % (not (z/end? %))))\n       (filter (comp pred z/node))\n       (first)))"]}