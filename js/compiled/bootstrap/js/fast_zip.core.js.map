{"version":3,"sources":["fast_zip/core.cljc"],"mappings":";;AAiBA,AAAA;;;;;;;;;AAAA;AAAA,AAAA,AAAA,AAASI;AAAT,AAAA,AAAA;;;AAAA,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAAAJ,AAAAC,AAAAC,AAASE;AAAT,AAAA,AAAAD,AAAAF,AAAA;;;AAAA;;;AAAA,AAASI,AAAWC,AAAQC,AAASC;AAArC,AAAA,AAAAJ,AAAoBE,AAAQC,AAASC;;;AAA5BJ,AAET,AAAA;;;;;;;;;;;AAAA;AAAA,AAAA,AAAA,AAASK;AAAT,AAAA,AAAA;;;AAAA,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAAAT,AAAAC,AAAAC,AAASO;AAAT,AAAA,AAAAN,AAAAF,AAAA;;;AAAA;;;AAAA,AAASS,AAAYC,AAAEC,AAAEC,AAAMC,AAAOC;AAAtC,AAAA,AAAAN,AAAqBE,AAAEC,AAAEC,AAAMC,AAAOC;;;AAA7BN,AAET,AAAA;;;;;;;;;AAAA;AAAA,AAAA,AAAA,AAASO;AAAT,AAAA,AAAA;;;AAAA,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAASA;;AAAT,AAAA,AAAA,AAAAhB,AAAAC,AAAAC,AAASc;AAAT,AAAA,AAAAb,AAAAF,AAAA;;;AAAA;;;AAAA,AAASgB,AAA2BC,AAAIC,AAAiBC;AAAzD,AAAA,AAAAJ,AAAoCE,AAAIC,AAAiBC;;;AAAhDJ,AAET;;;;;;;;;;;;;AAAA,AAAMK,AAaHf,AAAQC,AAASC,AAAUc;AAb9B,AAcE,AAAAN,AAAA,AAAiB,AAAAZ,AAAYE,AAAQC,AAASC,AAAWc;;AAE3D;;;AAAA,AAAMC,AAGHD;AAHH,AAIE,AAACD,AACAG,AACAC,AACA,AAAKN,AAAKZ;AAAV,AAAoB,AAACmB,AAAUnB,AAAS,AAACoB,AAAKR;AAC9CG;;AAEH;;;AAAA,AAAMM,AAGHN;AAHH,AAIE,AAACD,AACAQ,AACAC,AACA,AAAKX,AAAKZ;AAAV,AAAoB,AAACmB,AAAU,AAACK,AAAIxB,AAAU,AAACoB,AAAKR;AACpDG;;AAEH;;;;AAAA,AAAMU,AAIHV;AAJH,AAKE,AAACD,AACA,AAACY,AAAWC,AACZ,AAAA,AAACC,AAAKL,AACN,AAAKX,AAAKZ;AAAV,AACE,AAAA,AAAC6B,AAAMjB,AAAc,AAAAkB,AAAK9B;AAAL,AAAA,AAAA8B;AAAc,AAACC,AAAMC,AAAOhC;;AAA5B8B;;;AACvBf;;AAEH;;;AAAA,AAAMkB,AAEaC;AAFnB,AAGE,AAAQA;;AAEV;;;AAAA,AAAMC,AAEaD;AAFnB,AAGE,AAAAE,AAAoC,AAAQF;AAA5CG,AAAC,AAAW,AAAkBH;AAA9B,AAAA,AAAAG,AAAAA,AAAAD,AAAAC,AAAAD;;AAEF;;;AAAA,AAAME,AAEaJ;AAFnB,AAGE,AAAAK,AAAqC,AAAQL;AAA7CM,AAAC,AAAY,AAAkBN;AAA/B,AAAA,AAAAM,AAAAA,AAAAD,AAAAC,AAAAD;;AAEF;;;;AAAA,AAAME,AAGaP,AAAItB,AAAKZ;AAH5B,AAIE,AAAA0C,AAAC,AAAa,AAAkBR;AAAhC,AAAA,AAAAQ,AAAAA,AAAAA,AAAsC9B,AAAAA,AAAKZ,AAAAA;;AAE7C;;;AAAA,AAAM2C,AAEaT;AAFnB,AAGE,AAAAU,AAAuB,AAAQV;AAA/B,AAAA,AAAAU;AAAA,AAAAA,AAAqBC;AAArB,AAAqC,AAAUA;;AAA/C;;;AAEF;;;AAAA,AAAMC,AAEaZ;AAFnB,AAGE,AAAAU,AAAuB,AAAQV;AAA/B,AAAA,AAAAU;AAAA,AAAAA,AAAqBC;AAArB,AAAqC,AAACtB,AAAI,AAACwB,AAAQ,AAAKF;;AAAxD;;;AAEF;;;AAAA,AAAMG,AAEad;AAFnB,AAGE,AAAAU,AAAuB,AAAQV;AAA/B,AAAA,AAAAU;AAAA,AAAAA,AAAqBC;AAArB,AAAqC,AAAKA;;AAA1C;;;AAEF;;;;AAAA,AAAMI,AAGaf;AAHnB,AAIE,AAAM,AAACC,AAAQD;AAAf,AACE,AAAAgB,AAAc,AAACZ,AAASJ;AAAxB,AAAA,AAAAgB;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAAMvC,AAAK,AAAQsB;AAAkBrB,AAAK,AAAQqB;AAAlD,AACE,AAAAzB,AACC,AAAOyB,AACP,AAACkB,AAAMD,AACP,AAAAjD,AAAA,AAAA,AAAA,AAE6C,AAACmD,AAAeF,AAC5DtC,AACA,AAAA,AAAIA,AAAK,AAACyC,AAAK,AAAUzC,AAAMD,AAAOA;;AAT5C;;;AADF;;;AAaF;;;AAAA,AAAM2C,AAEarB;AAFnB,AAGE,AAAkBrB,AAAK,AAAQqB;AAA/B,AACE,AAAAgB,AAAkB,AAAApB,AAAKjB;AAAL,AAAA,AAAAiB;AAAU,AAAUjB;;AAApBiB;;;AAAlB,AAAA,AAAAoB;AAAA,AAAA,AAAAA,AAAW3C;AAAX,AACE,AAAMiD,AAAM,AAACC,AAAKlD;AAAlB,AACE,AAAI,AAAYM;AACd,AAAAJ,AACC,AAAOyB,AACP,AAACO,AAAUP,AAAIsB,AAAM,AAACE,AAAO,AAACX,AAAQ,AAAKlC,AAAO,AAAC8C,AAAK,AAAQzB,AAAK,AAAKrB,AAC1E,AAAA+B,AAA2B,AAAS/B;AAApC,AAAA,AAAA+B;AAAA,AAAAA,AAAqBtC;AAArB,AACE,AAAAJ,AAAA,AAAa,AAAKI,AAAO,AAAKA,AAAO,AAASA,AAAO,AAAUA;;AADjE;;;;AAED,AAAAG,AACC,AAAOyB,AACPsB,AACA,AAAS3C;;;AAXhB;;;AAaJ;;;AAAA,AAAM+C,AAEa1B;;AAFnB,AAGE,AAAI,AAAA,AAA0B2B,AAAQ,AAAQ3B;AAC5C,AAAQA;;AACR,AAAMW,AAAE,AAACU,AAAGrB;AAAZ,AACE,AAAIW;AACF,AAAOA;;;;AACP,AAAQX;;;;;;AAEhB;;;AAAA,AAAM4B,AAEa5B;AAFnB,AAGE,AAAkBrB,AAAK,AAAQqB;AAA/B,AACE,AAAAgB,AAAa,AAAApB,AAAKjB;AAAL,AAAA,AAAAiB;AAAU,AAAKjB;;AAAfiB;;;AAAb,AAAA,AAAAoB;AAAA,AAAA,AAAAA,AAAW7C;AAAX,AACE,AAAAI,AACC,AAAOyB,AACP,AAACkB,AAAM/C,AACP,AAAAH,AACC,AAACoD,AAAK,AAAKzC,AAAM,AAAQqB,AACkB,AAACmB,AAAehD,AAC3D,AAASQ,AACT,AAAUA,AACV,AAAYA;;AAThB;;;AAWJ;;;AAAA,AAAMkD,AAEa7B;AAFnB,AAGE,AAAkBrB,AAAK,AAAQqB;AAA/B,AACE,AAAAU,AAAW,AAAAd,AAAKjB;AAAL,AAAA,AAAAiB;AAAU,AAAKjB;;AAAfiB;;;AAAX,AAAA,AAAAc;AAAA,AAAAA,AAASvC;AAAT,AACE,AAAAI,AACC,AAAOyB,AACP,AAAC8B,AAAK3D,AACN,AAAAH,AAAA,AACC,AAAC+D,AAAMC,AAAK,AAAKrD,AAAM,AAAQqB,AAAK,AAACiC,AAAQ9D,AAE7C,AAASQ,AACT,AAAUA,AACV,AAAYA;;AACdqB;;;AAEN;;;AAAA,AAAMkC,AAEalC;AAFnB,AAGE,AAAkBrB,AAAK,AAAQqB;AAA/B,AACE,AAAM,AAAAJ,AAAKjB;AAAL,AAAA,AAAAiB;AAAU,AAACP,AAAI,AAAKV;;AAApBiB;;;AAAN,AACE,AAAArB,AACC,AAAOyB,AACP,AAACuB,AAAK,AAAK5C,AACX,AAAAX,AACC,AAACmE,AAAI,AAAKxD,AACV,AAAC8C,AAAK,AAAQzB,AAAK,AAAKrB,AACxB,AAASA,AACT,AAAUA,AACV,AAAYA;;AAThB;;;AAWJ;;;AAAA,AAAMyD,AAEapC;AAFnB,AAGE,AAAkBrB,AAAK,AAAQqB;AAA/B,AACE,AAAI,AAAAJ,AAAKjB;AAAL,AAAA,AAAAiB;AAAU,AAACP,AAAI,AAAKV;;AAApBiB;;;AACF,AAAArB,AACC,AAAOyB,AACP,AAAC8B,AAAK,AAAKnD,AACX,AAAAX,AAAA,AAAA,AAEC,AAAA,AAACqE,AAES,AAAClB,AAAe,AAACN,AAAQ,AAAKlC,AACtC,AAAQqB,AAAM,AAAKrB,AACrB,AAASA,AACT,AAAUA,AACV,AAAYA;;AACdqB;;;AAEN;;;AAAA,AAAMsC,AAEatC,AAAIuC;AAFvB,AAGE,AAAA7B,AAA0B,AAAQV;AAAlC,AAAA,AAAAU;AAAA,AAAAA,AAAqB/B;AAArB,AACE,AAAAJ,AACC,AAAOyB,AACP,AAAQA,AACR,AAAAhC,AAAA,AAAa,AAACoD,AAAK,AAAKzC,AAAM4D,AAAM,AAAK5D,AAAM,AAASA,AAAM,AAAUA;;AACzE,AAAO,AAAA,AAA6B6D;;;AAExC;;;AAAA,AAAMC,AAEazC,AAAIuC;AAFvB,AAGE,AAAA7B,AAA0B,AAAQV;AAAlC,AAAA,AAAAU;AAAA,AAAAA,AAAqB/B;AAArB,AACE,AAAAJ,AACC,AAAOyB,AACP,AAAQA,AACR,AAAAhC,AAAA,AAAa,AAAKW,AAAM,AAAC8C,AAAKc,AAAK,AAAK5D,AAAO,AAASA,AAAM,AAAUA;;AACzE,AAAO,AAAA,AAA6B6D;;;AAExC;;;AAAA,AAAME,AAEa1C,AAAItB;AAFvB,AAGE,AAAAH,AACC,AAAOyB,AACPtB,AACA,AAAAgC,AAA0B,AAAQV;AAAlC,AAAA,AAAAU;AAAA,AAAAA,AAAqB/B;AAArB,AACE,AAAAX,AAAA,AAAa,AAAKW,AAAM,AAAKA,AAAM,AAASA,AAAM,AAAUA;;AAD9D;;;;AAGH;;;AAAA,AAAMgE,AAEa3C,AAAIuC;AAFvB,AAGE,AAACG,AAAQ1C,AAAI,AAACO,AAAUP,AAAI,AAAQA,AAAK,AAACyB,AAAKc,AAAK,AAACnC,AAASJ;;AAEhE;;;AAAA,AAAM4C,AAEa5C,AAAIuC;AAFvB,AAGE,AAACG,AAAQ1C,AAAI,AAACO,AAAUP,AAAI,AAAQA,AAAK,AAAA,AAACwB,AAAO,AAACpB,AAASJ,AAAMuC;;AAEnE;;;;;AAAA,AAAMM,AAIa7C;AAJnB,AAKE,AAAMrB,AAAK,AAAQqB;AAAnB,AACE,AAAI,AAAA,AAA0B2B,AAAQhD;AACpCqB;;AACA,AAAA8C,AACC,AAAA,AAAI,AAAC7C,AAAQD,AAAK,AAACe,AAAKf;AADzB,AAAA,AAAA8C;AAAAA;;AAAA,AAAAA,AAEC,AAAClB,AAAM5B;AAFR,AAAA,AAAA8C;AAAAA;;AAGC,AAAOnC,AAAEX;;AAAT,AACE,AAAAU,AAAW,AAACW,AAAGV;AAAf,AAAA,AAAAD;AAAA,AAAAA,AAASqC;AAAT,AACE,AAAAD,AAAI,AAAClB,AAAMmB;AAAX,AAAA,AAAAD;AAAAA;;AAAc,AAAOC;;;;;AACrB,AAAAxE,AAAA,AAAiB,AAAOyB,AAAK,AAAQW;;;;;;;;AAEhD;;;AAAA,AAAMqC,AAEHhD;AAFH,AAGE,AAAAU,AAAc,AAACwB,AAAKlC;AAApB,AAAA,AAAAU;AAAA,AAAAA,AAASuC;AAAT,AACE,AAAOjD,AAAIiD;;AAAX,AACE,AAAAvC,AAAe,AAAAd,AAAK,AAACK,AAAQD;AAAd,AAAA,AAAAJ;AAAmB,AAACmB,AAAKf;;AAAzBJ;;;AAAf,AAAA,AAAAc;AAAA,AAAAA,AAASwC;AAAT,AACE,AAAO,AAACrB,AAAUqB;;;;AAClBlD;;;;;AACJ,AAACqB,AAAGrB;;;AAER;;;AAAA,AAAMmD,AAEanD;AAFnB,AAGE,AAAA,AAA0B2B,AAAQ,AAAQ3B;;AAE5C;;;AAAA,AAAMoD,AAEapD;AAFnB,AAGE,AAAAU,AAA0B,AAAQV;AAAlC,AAAA,AAAAU;AAAA,AAAAA,AAAqB/B;AAArB,AACE,AAAI,AAAA,AAAM,AAAC0E,AAAM,AAAK1E;AACpB,AAAOqB,AAAI,AAAAzB,AACC,AAAOyB,AACP,AAACuB,AAAK,AAAK5C,AACX,AAAAX,AAAA,AAAa,AAACmE,AAAI,AAAKxD,AAAO,AAAKA,AAAM,AAASA,AAAM,AAAUA;;AAH9E,AAIE,AAAA+B,AAAe,AAAAd,AAAK,AAACK,AAAQD;AAAd,AAAA,AAAAJ;AAAmB,AAACmB,AAAKf;;AAAzBJ;;;AAAf,AAAA,AAAAc;AAAA,AAAAA,AAASwC;AAAT,AACE,AAAO,AAACrB,AAAUqB;;;;AAClBlD;;;;;AACJ,AAAAzB,AACC,AAAOyB,AACP,AAACO,AAAUP,AAAI,AAACuB,AAAK,AAAU5C,AAAO,AAAKA,AAC3C,AAAA+B,AAA2B,AAAS/B;AAApC,AAAA,AAAA+B;AAAA,AAAAA,AAAqBtC;AAArB,AACE,AAAIA;AAAM,AAAAJ,AAAA,AAAa,AAAKI,AAAO,AAAKA,AAAO,AAASA,AAAO,AAAUA;;AAAzE;;;AADF;;;;;AAEH,AAAO,AAAA,AAA6BoE;;;AAExC,AAAA;;;AAAA,AAAAc,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAEa5D,AAAIiE,AAAIC;AAF3B,AAGE,AAACxB,AAAQ1C,AAAI,AAACmE,AAAMF,AAAE,AAAQjE,AAAKkE;;;AAHrC,AAAA,AAAA,AAAMN;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAA5C,AAAA2C;AAAAA,AAAA,AAAA1C,AAAA0C;AAAAE,AAAA,AAAA7C,AAAA2C;AAAAA,AAAA,AAAA1C,AAAA0C;AAAA,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAAA,AAAAF,AAAAC,AAAAF;;;AAAA","names":["this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cljs.core/-write","fast-zip.core/ZipperOps","fast-zip.core/->ZipperOps","branch?","children","make-node","fast-zip.core/ZipperPath","fast-zip.core/->ZipperPath","l","r","ppath","pnodes","changed?","fast-zip.core/ZipperLocation","fast-zip.core/->ZipperLocation","ops","node","path","fast-zip.core/zipper","root","fast-zip.core/seq-zip","cljs.core/seq?","cljs.core/identity","cljs.core/with-meta","cljs.core/meta","fast-zip.core/vector-zip","cljs.core/vector?","cljs.core/seq","cljs.core/vec","fast-zip.core/xml-zip","cljs.core/complement","cljs.core/string?","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","and__4120__auto__","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/vector","fast-zip.core/node","loc","fast-zip.core/branch?","G__63667","fexpr__63666","fast-zip.core/children","G__63672","fexpr__63671","fast-zip.core/make-node","fexpr__63678","fast-zip.core/path","temp__5718__auto__","p","fast-zip.core/lefts","cljs.core/reverse","fast-zip.core/rights","fast-zip.core/down","temp__5720__auto__","cs","cljs.core/first","cljs.core/next","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","fast-zip.core/up","pnode","cljs.core/peek","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/cons","fast-zip.core/root","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","fast-zip.core/right","fast-zip.core/rightmost","cljs.core/last","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","cljs.core/butlast","fast-zip.core/left","cljs.core/pop","fast-zip.core/leftmost","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","fast-zip.core/insert-left","item","js/Error","fast-zip.core/insert-right","fast-zip.core/replace","fast-zip.core/insert-child","fast-zip.core/append-child","fast-zip.core/next","or__4131__auto__","u","fast-zip.core/prev","lloc","child","fast-zip.core/end?","fast-zip.core/remove","cljs.core/count","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","fast-zip.core/edit","seq63778","G__63779","G__63780","self__4717__auto__","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$3"],"sourcesContent":[";;   Copyright (c) Rich Hickey. All rights reserved.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n;;   functional hierarchical zipper, with navigation, editing and enumeration\n;;   see Huet\n\n(ns ^{:doc \"Functional hierarchical zipper, with navigation, editing,\n  and enumeration.  See Huet\"\n      :author \"Rich Hickey, modified by Alexander K. Hudek\"}\n  fast-zip.core\n  (:refer-clojure :exclude [replace remove next]))\n\n(deftype ZipperOps [branch? children make-node])\n\n(deftype ZipperPath [l r ppath pnodes changed?])\n\n(deftype ZipperLocation [^ZipperOps ops node ^ZipperPath path])\n\n(defn zipper\n  \"Creates a new zipper structure.\n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node.\"\n  {:added \"1.0\"}\n  [branch? children make-node root]\n  (ZipperLocation. (ZipperOps. branch? children make-node) root nil))\n\n(defn seq-zip\n  \"Returns a zipper for nested sequences, given a root sequence\"\n  {:added \"1.0\"}\n  [root]\n  (zipper\n   seq?\n   identity\n   (fn [node children] (with-meta children (meta node)))\n   root))\n\n(defn vector-zip\n  \"Returns a zipper for nested vectors, given a root vector\"\n  {:added \"1.0\"}\n  [root]\n  (zipper\n   vector?\n   seq\n   (fn [node children] (with-meta (vec children) (meta node)))\n   root))\n\n(defn xml-zip\n  \"Returns a zipper for xml elements (as from xml/parse),\n  given a root element\"\n  {:added \"1.0\"}\n  [root]\n  (zipper\n   (complement string?)\n   (comp seq :content)\n   (fn [node children]\n     (assoc node :content (and children (apply vector children))))\n   root))\n\n(defn node\n  \"Returns the node at loc\"\n  [^ZipperLocation loc]\n  (.-node loc))\n\n(defn branch?\n  \"Returns true if the node at loc is a branch\"\n  [^ZipperLocation loc]\n  ((.-branch? ^ZipperOps (.-ops loc)) (.-node loc)))\n\n(defn children\n  \"Returns a seq of the children of node at loc, which must be a branch\"\n  [^ZipperLocation loc]\n  ((.-children ^ZipperOps (.-ops loc)) (.-node loc)))\n\n(defn make-node\n  \"Returns a new branch node, given an existing node and new children.\n  The loc is only used to supply the constructor.\"\n  [^ZipperLocation loc node children]\n  ((.-make-node ^ZipperOps (.-ops loc)) node children))\n\n(defn path\n  \"Returns a seq of nodes leading to this loc\"\n  [^ZipperLocation loc]\n  (if-let [^ZipperPath p (.-path loc)] (.-pnodes p)))\n\n(defn lefts\n  \"Returns a seq of the left siblings of this loc\"\n  [^ZipperLocation loc]\n  (if-let [^ZipperPath p (.-path loc)] (seq (reverse (.-l p)))))\n\n(defn rights\n  \"Returns a seq of the right siblings of this loc\"\n  [^ZipperLocation loc]\n  (if-let [^ZipperPath p (.-path loc)] (.-r p)))\n\n(defn down\n  \"Returns the loc of the leftmost child of the node at this loc,\n  or nil if no children\"\n  [^ZipperLocation loc]\n  (when (branch? loc)\n    (when-let [cs (children loc)]\n      (let [node (.-node loc), ^ZipperPath path (.-path loc)]\n        (ZipperLocation.\n         (.-ops loc)\n         (first cs)\n         (ZipperPath.\n          '()\n          #?(:clj (.next ^clojure.lang.ISeq cs) :cljs (cljs.core/next cs))\n          path\n          (if path (conj (.-pnodes path) node) [node])\n          nil))))))\n\n(defn up\n  \"Returns the loc of the parent of the node at this loc, or nil if at the top\"\n  [^ZipperLocation loc]\n  (let [^ZipperPath path (.-path loc)]\n    (when-let [pnodes (and path (.-pnodes path))]\n      (let [pnode (peek pnodes)]\n        (if (.-changed? path)\n          (ZipperLocation.\n           (.-ops loc)\n           (make-node loc pnode (concat (reverse (.-l path)) (cons (.-node loc) (.-r path))))\n           (if-let [^ZipperPath ppath (.-ppath path)]\n             (ZipperPath. (.-l ppath) (.-r ppath) (.-ppath ppath) (.-pnodes ppath) true)))\n          (ZipperLocation.\n           (.-ops loc)\n           pnode\n           (.-ppath path)))))))\n\n(defn root\n  \"zips all the way up and returns the root node, reflecting any changes.\"\n  [^ZipperLocation loc]\n  (if (#?(:clj identical? :cljs =) :end (.-path loc))\n    (.-node loc)\n    (let [p (up loc)]\n      (if p\n        (recur p)\n        (.-node loc)))))\n\n(defn right\n  \"Returns the loc of the right sibling of the node at this loc, or nil\"\n  [^ZipperLocation loc]\n  (let [^ZipperPath path (.-path loc)]\n    (when-let [r (and path (.-r path))]\n      (ZipperLocation.\n       (.-ops loc)\n       (first r)\n       (ZipperPath.\n        (conj (.-l path) (.-node loc))\n        #?(:clj (.next ^clojure.lang.ISeq r) :cljs (cljs.core/next r))\n        (.-ppath path)\n        (.-pnodes path)\n        (.-changed? path))))))\n\n(defn rightmost\n  \"Returns the loc of the rightmost sibling of the node at this loc, or self\"\n  [^ZipperLocation loc]\n  (let [^ZipperPath path (.-path loc)]\n    (if-let [r (and path (.-r path))]\n      (ZipperLocation.\n       (.-ops loc)\n       (last r)\n       (ZipperPath.\n        (apply conj (.-l path) (.-node loc) (butlast r))\n        nil\n        (.-ppath path)\n        (.-pnodes path)\n        (.-changed? path)))\n      loc)))\n\n(defn left\n  \"Returns the loc of the left sibling of the node at this loc, or nil\"\n  [^ZipperLocation loc]\n  (let [^ZipperPath path (.-path loc)]\n    (when (and path (seq (.-l path)))\n      (ZipperLocation.\n       (.-ops loc)\n       (peek (.-l path))\n       (ZipperPath.\n        (pop (.-l path))\n        (cons (.-node loc) (.-r path))\n        (.-ppath path)\n        (.-pnodes path)\n        (.-changed? path))))))\n\n(defn leftmost\n  \"Returns the loc of the leftmost sibling of the node at this loc, or self\"\n  [^ZipperLocation loc]\n  (let [^ZipperPath path (.-path loc)]\n    (if (and path (seq (.-l path)))\n      (ZipperLocation.\n       (.-ops loc)\n       (last (.-l path))\n       (ZipperPath.\n        '()\n        (concat\n         #?(:clj (.next ^clojure.lang.ISeq (reverse (.-l path)))\n            :cljs (cljs.core/next (reverse (.-l path))))\n         [(.-node loc)] (.-r path))\n        (.-ppath path)\n        (.-pnodes path)\n        (.-changed? path)))\n      loc)))\n\n(defn insert-left\n  \"Inserts the item as the left sibling of the node at this loc, without moving\"\n  [^ZipperLocation loc item]\n  (if-let [^ZipperPath path (.-path loc)]\n    (ZipperLocation.\n     (.-ops loc)\n     (.-node loc)\n     (ZipperPath. (conj (.-l path) item) (.-r path) (.-ppath path) (.-pnodes path) true))\n    (throw (new #?(:clj Exception :cljs js/Error) \"Insert at top\"))))\n\n(defn insert-right\n  \"Inserts the item as the right sibling of the node at this loc, without moving\"\n  [^ZipperLocation loc item]\n  (if-let [^ZipperPath path (.-path loc)]\n    (ZipperLocation.\n     (.-ops loc)\n     (.-node loc)\n     (ZipperPath. (.-l path) (cons item (.-r path)) (.-ppath path) (.-pnodes path) true))\n    (throw (new #?(:clj Exception :cljs js/Error) \"Insert at top\"))))\n\n(defn replace\n  \"Replaces the node at this loc, without moving\"\n  [^ZipperLocation loc node]\n  (ZipperLocation.\n   (.-ops loc)\n   node\n   (if-let [^ZipperPath path (.-path loc)]\n     (ZipperPath. (.-l path) (.-r path) (.-ppath path) (.-pnodes path) true))))\n\n(defn insert-child\n  \"Inserts the item as the leftmost child of the node at this loc, without moving\"\n  [^ZipperLocation loc item]\n  (replace loc (make-node loc (.-node loc) (cons item (children loc)))))\n\n(defn append-child\n  \"Inserts the item as the rightmost child of the node at this loc, without moving\"\n  [^ZipperLocation loc item]\n  (replace loc (make-node loc (.-node loc) (concat (children loc) [item]))))\n\n(defn next\n  \"Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there.\"\n  [^ZipperLocation loc]\n  (let [path (.-path loc)]\n    (if (#?(:clj identical? :cljs =) :end path)\n      loc\n      (or\n       (if (branch? loc) (down loc))\n       (right loc)\n       (loop [p loc]\n         (if-let [u (up p)]\n           (or (right u) (recur u))\n           (ZipperLocation. (.-ops loc) (.-node p) :end)))))))\n\n(defn prev\n  \"Moves to the previous loc in the hierarchy, depth-first. If already at the root, returns nil.\"\n  [loc]\n  (if-let [lloc (left loc)]\n    (loop [loc lloc]\n      (if-let [child (and (branch? loc) (down loc))]\n        (recur (rightmost child))\n        loc))\n    (up loc)))\n\n(defn end?\n  \"Returns true if loc represents the end of a depth-first walk\"\n  [^ZipperLocation loc]\n  (#?(:clj identical? :cljs =) :end (.-path loc)))\n\n(defn remove\n  \"Removes the node at loc, returning the loc that would have preceded it in a depth-first walk.\"\n  [^ZipperLocation loc]\n  (if-let [^ZipperPath path (.-path loc)]\n    (if (pos? (count (.-l path)))\n      (loop [loc (ZipperLocation.\n                  (.-ops loc)\n                  (peek (.-l path))\n                  (ZipperPath. (pop (.-l path)) (.-r path) (.-ppath path) (.-pnodes path) true))]\n        (if-let [child (and (branch? loc) (down loc))]\n          (recur (rightmost child))\n          loc))\n      (ZipperLocation.\n       (.-ops loc)\n       (make-node loc (peek (.-pnodes path)) (.-r path))\n       (if-let [^ZipperPath ppath (.-ppath path)]\n         (if ppath (ZipperPath. (.-l ppath) (.-r ppath) (.-ppath ppath) (.-pnodes ppath) true)))))\n    (throw (new #?(:clj Exception :cljs js/Error) \"Remove at top\"))))\n\n(defn edit\n  \"Replaces the node at this loc with the value of (f node args)\"\n  [^ZipperLocation loc f & args]\n  (replace loc (apply f (.-node loc) args)))\n"]}