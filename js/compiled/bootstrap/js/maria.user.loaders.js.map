{"version":3,"sources":["maria/user/loaders.cljs"],"mappings":"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","names":["chia.view.class/view*","p__42256","map__42257","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","chia.view.props/to-element","props42255","G__42253","chia.view.class/Component","obj42270","obj42271","maria.user.loaders/gist-loader-status","status","url","error","source","state","maria.views.cards/card-classes","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/not","cljs.core/deref","maria.views.icons/ArrowPointingUp","maria.views.icons/ArrowPointingDown","and__4120__auto__","maria.editors.code/viewer","maria.user.loaders/load-gist","id","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","maria.persistence.github/get-gist","p__42276","map__42277","value","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","vec__42287","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__42290","map__42291","project","_","cljs.core/first","c-env","maria.eval/c-env","maria.eval/eval-str*","cljs.core/reset!","maria.views.hoc/bind-atom","maria.user.loaders/load-js","start-globals","cljs.core/set","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","js/Object","js/window","goog.html.legacyconversions/trustedResourceUrlFromString","goog.net.jsloader/safeLoad","temp__5720__auto__","new-globals","cljs.core/seq","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","chia.view.hiccup.element.cljs$core$IFn$_invoke$arity$1","p1__42303#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/List","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","maria.user.loaders/load-npm","package"],"sourcesContent":["(ns maria.user.loaders\n  (:require [chia.view :as v]\n            [maria.views.hoc :as hoc]\n            [maria.views.icons :as icons]\n\n            [chia.view.hiccup :as hiccup]\n\n            [maria.eval :as eval]\n            [maria.views.cards :as repl-ui]\n            [maria.editors.code :as code]\n\n            [goog.net.jsloader :as jsl]\n            [goog.html.legacyconversions :refer [trustedResourceUrlFromString]]\n\n            [clojure.set :as set]\n            [maria.persistence.github :as github]))\n\n(v/defclass gist-loader-status\n  [{:keys [status\n           url\n           error\n           source\n           view/state]}]\n  [:.ph3\n   {:class repl-ui/card-classes}\n\n   [:.b.mv2.flex.items-center\n    (when source {:class    \"pointer\"\n                  :on-click #(swap! state not)})\n    status\n    [:.flex-auto]\n    (when source (if @state icons/ArrowPointingUp icons/ArrowPointingDown))]\n\n   (when (and @state source)\n     [:.overflow-scroll.ph3.nl3.nr3.bt.bb.b--darken.pv2\n      {:style {:max-height 200}} (code/viewer source)])\n\n   [:.gray.pv2.overflow-auto.w-100.pv2 {:style {:font-size 13}} url]\n\n   (when error [:.bg-near-white.pa2.mv2 error])])\n\n\n(defn load-gist\n  \"Loads gist content, evaluating as ClojureScript code.\"\n  [id]\n  (let [status (atom {:url    id\n                      :status \"Loading gist...\"})]\n    (github/get-gist id (fn [{:keys [value error]}]\n                          (if error\n                            (swap! status assoc\n                                   :status [:.dark-red \"Error:\"]\n                                   :error error)\n                            (let [project (:persisted value)\n                                  [_ {source :content}] (first (:files project))\n                                  c-env @eval/c-env\n                                  {:keys [value\n                                          error]} (eval/eval-str* source)]\n                              ;; TOOD\n                              ;; handle error\n                              (reset! eval/c-env c-env)\n                              (swap! status assoc\n                                     :status \"Gist loaded.\"\n                                     :source source)))))\n    (-> gist-loader-status\n        (hoc/bind-atom status))))\n\n(defn load-js\n  \"Load javascript file from url. Return message indicating added global variables.\"\n  [url]\n  (let [start-globals (set (js->clj (.keys js/Object js/window)))\n        url (trustedResourceUrlFromString url)]\n    (-> (jsl/safeLoad url)\n        (.addCallback (fn []\n                        (when-let [new-globals (seq (set/difference (set (js->clj (.keys js/Object js/window)))\n                                                                    start-globals))]\n                          (hiccup/element [:div \"Added: \" (->> new-globals\n                                                               (map #(do (list \"window.\" [:span.b %])))\n                                                               (interpose \", \"))])))))))\n\n(defn load-npm\n  \"Load package from NPM, packaged with browserify (see https://wzrd.in/).\n   Usage: `(load-npm \\\"my-package@0.2.0\\\")` or `(load-npm \\\"my-package@latest\\\")`\"\n  [package]\n  (load-js (str \"https://wzrd.in/standalone/\" package)))\n\n"]}