{"version":3,"sources":["lark/structure/edit.cljs"],"mappings":"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","names":["var_args","G__67340","lark.structure.edit/format!","js/Error","p__67349","map__67350","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","editor","lark.structure.edit.format_BANG_.cljs$core$IFn$_invoke$arity$2","preserve-cursor-space?","pre-val","pre-zipper","lark.tree.core/string-zip","pre-pos","lark.editors.codemirror.pos__GT_boundary.cljs$core$IFn$_invoke$arity$1","lark.editors.codemirror/get-cursor","cursor-loc","lark.tree.nav/cursor-space-loc","post-val","*active-cursor-node*-orig-val__67354","*active-cursor-node*-temp-val__67355","lark.tree.reader/*active-cursor-node*","G__67358","fast-zip.core/node","lark.tree.core/format","post-zipper","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","lark.tree.cursor.path.cljs$core$IFn$_invoke$arity$3","lark.tree.cursor/position","lark.editors.codemirror/range->Pos","lark.editors.codemirror/set-zipper!","lark.structure.edit/other-bracket","lark.structure.edit/spaces","n","cljs.core/str","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","lark.structure.edit/clipboard-helper-element","cljs.core/memoize","textarea","G__67365","G__67366","G__67367","goog.dom/createElement","goog.dom/setProperties","goog.dom/appendChild","js/document.body","lark.structure.edit/copy","text","hadFocus","js/document","clojure.string/replace","_","G__67368","G__67369","goog.dom.Range/createFromNodeContents","e67370","e","js/console","lark.structure.edit/copy-range!","cm","range","lark.editors.codemirror/range-text","lark.structure.edit/cut-range!","lark.editors.codemirror.replace_range_BANG_.cljs$core$IFn$_invoke$arity$3","p__67380","map__67381","map__67382","lark.structure.edit/cursor-skip-pos","pos","loc","side","move","G__67385","cljs.core/Keyword","lark.tree.nav/left-up","lark.tree.nav/right-up","nodes","cljs.core/iterate","lark.tree.nav/include-prefix-parents","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","node","lark.tree.node/whitespace?","lark.tree.range/pos=","lark.tree.range.bounds.cljs$core$IFn$_invoke$arity$2","G__67389","cljs.core/first","lark.structure.edit/cursor-skip!","G__67392","lark.editors.codemirror/set-cursor!","lark.structure.edit/move-char","amount","lark.structure.edit/char-at","x__4433__auto__","m__4434__auto__","lark.structure.edit/get-range","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","lark.structure.edit/move","lark.structure.edit/move-while!","lark.structure.edit/move-while","G__67410","lark.structure.edit/insert!","lark.structure.edit/set-editor-cursor!","lark.structure.edit/adjust-for-changes!","lark.structure.edit/IPointer","this","i","pred","s","replace-i","changes","lark.structure.edit/*changes*","lark.structure.edit/log-editor-changes","lark.structure.edit/adjust-for-change","change","cljs.core/compare","lark.editors.codemirror/changeEnd","line","ch","G__67417","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","lark.editors.codemirror/Pos","lark.structure.edit/adjust-for-changes","lark.structure.edit/move-while-pos","the-pos","next-pos","char","and__4120__auto__","cljs.core/not","this__4385__auto__","k__4386__auto__","this__4387__auto__","k67428","else__4388__auto__","G__67439","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__67440","vec__67441","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__67427","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__67459","coll__4382__auto__","cljs.core/hash-unordered-coll","this67430","other67431","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__67491","cljs.core/keyword-identical?","expr__67492","G__67494","G__67495","G__67497","G__67498","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","lark.structure.edit/Pointer","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__67433","extmap__4424__auto__","G__67513","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","lark.structure.edit/->Pointer","lark.structure.edit/map->Pointer","G__67519","lark.structure.edit/pointer","lark.structure.edit.pointer.cljs$core$IFn$_invoke$arity$2","lark.structure.edit/chars-around","the-pointer","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","lark.tree.util/some-str","p__67533","map__67534","map__67535","lark.structure.edit/uneval!","temp__5720__auto__","cljs.core/cons","lark.tree.nav/left-locs","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","a-pointer","lark.structure.edit.pointer.cljs$core$IFn$_invoke$arity$1","*changes*-orig-val__67550","*changes*-temp-val__67551","or__4131__auto__","uneval-loc","cljs.core.comp.cljs$core$IFn$_invoke$arity$3","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/=","fast-zip.core/up","G__67565","G__67566","lark.tree.range/within?","lark.structure.edit/kill!","p__67572","map__67574","map__67575","zipper","res__67305__auto__","editor__67306__auto__","lark.tree.nav/navigate","G__67581","lark.tree.range/within-inner?","in-edge?","lark.tree.node/has-edges?","inner","lark.tree.range/inner-range","end-node","lark.tree.node/may-contain-children?","fast-zip.core/children","p1__67570#","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","lark.tree.range/lt","p1__67571#","cljs.core/last","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/select-keys","lark.structure.edit/boundary?","G__67586","p__67588","map__67591","map__67592","lark.structure.edit/unwrap!","bracket-node","lark.editors.codemirror/selection?","edge-node","G__67604","vec__67605","vec__67608","l","r","lark.tree.node/edges","left-r","right-r","lark.tree.range/edge-ranges","seq__67611","chunk__67612","count__67613","i__67614","vec__67621","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__67624","cljs.core/next","lark.tree.format/spaces","p__67627","map__67628","map__67629","lark.structure.edit/raise!","bracket-loc","outer-node","lark.editors.codemirror.replace_range_BANG_.cljs$core$IFn$_invoke$arity$4","lark.tree.range/end","lark.structure.edit/copy-form","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","lark.structure.edit/cut-form","lark.structure.edit/delete-form","lark.structure.edit/pop-stack!","stack","G__67637","lark.editors.codemirror/current-selection-bounds","cljs.core/rest","item","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update-in","lark.tree.range/empty-range?","cljs.core/empty","lark.structure.edit/push-stack!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/conj","lark.tree.range.bounds.cljs$core$IFn$_invoke$arity$1","lark.structure.edit/tracked-select","lark.editors.codemirror/select-range","lark.structure.edit/push-cursor!","lark.editors.codemirror/Pos->range","lark.editors.codemirror/unset-temp-marker!","lark.structure.edit/expand-selection","p__67639","map__67640","sel","select!","cursor-root","lark.editors.codemirror/temp-marker-cursor-pos","selection?","inner-range","lark.tree.range/range=","G__67645","lark.structure.edit/shrink-selection","G__67646","p__67647","map__67648","lark.structure.edit/expand-selection-x","direction","selection-bounds","selection-loc","selection-node","temp__5718__auto__","adjacent-loc","cljs.core/complement","fexpr__67651","G__67652","lark.tree.nav/right-locs","G__67653","lark.tree.range/->end","p1__67654#","lark.structure.edit/backspace!","G__67656","lark.structure.edit/comment-line","*changes*-orig-val__67657","*changes*-temp-val__67658","vec__67659","start","end","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","seq__67662","chunk__67663","count__67664","i__67665","line-n","cljs.core.range.cljs$core$IFn$_invoke$arity$2","lark.structure.edit.comment_line.cljs$core$IFn$_invoke$arity$2","vec__67666","vec__67669","spaces","semicolons","cljs.core/re-find","space-n","semicolon-n","lark.structure.edit/slurp-parent?","lark.structure.edit/slurp-parent","lark.structure.edit/slurp-forward","p__67672","map__67673","map__67674","map__67677","end-edge-loc","start-edge-loc","tag","right-bracket","cljs.core/second","last-child","G__67679","next-form","G__67680","fast-zip.core/rights","form-content","lark.tree.emit.string.cljs$core$IFn$_invoke$arity$1","replace-start","replace-end","pad-start","cur","lark.structure.edit/unslurp-forward","p__67681","map__67682","map__67683","end-edge-node","G__67686","lark.structure.edit/cursor-selection-edge","lark.structure.edit/cursor-line-edge","cursor","line-i","padding","G__67687","G__67688","G__67689","G__67690","lark.structure.edit/node-symbol","lark.tree.emit/sexp","lark.tree.util/guard->","cljs.core/symbol?","G__67693","lark.structure.edit/eldoc-symbol","lark.structure.edit.eldoc_symbol.cljs$core$IFn$_invoke$arity$1","G__67694","G__67695","G__67696","p1__67691#","lark.tree.nav/closest","G__67698","fexpr__67697"],"sourcesContent":["(ns lark.structure.edit\n  (:refer-clojure :exclude [char])\n  (:require [lark.tree.core :as tree]\n            [lark.tree.range :as range]\n            [lark.tree.util :as util]\n            [lark.tree.cursor :as cursor]\n            [lark.editors.codemirror :as cm]\n            [fast-zip.core :as z]\n            [goog.dom :as dom]\n            [goog.dom.Range :as Range]\n            [clojure.string :as string]\n            [lark.tree.nav :as nav]\n            [lark.tree.parse :as parse]\n            [lark.tree.node :as node]\n            [clojure.string :as str]\n            [lark.tree.format :as format]\n            [lark.tree.node :as n]\n            [lark.tree.emit :as emit]\n            [lark.tree.reader :as r])\n  (:require-macros [lark.structure.edit :as edit :refer [operation]]))\n\n(defn format!\n  ([editor] (format! editor {}))\n  ([editor {:keys [preserve-cursor-space?]}]\n   (let [pre-val (.getValue editor)\n         pre-zipper (tree/string-zip pre-val)\n         pre-pos (cm/pos->boundary (cm/get-cursor editor))\n         cursor-loc (when preserve-cursor-space?\n                      (nav/cursor-space-loc pre-zipper pre-pos))\n         post-val (binding [r/*active-cursor-node* (some-> cursor-loc\n                                                           (z/node))]\n                    (tree/format pre-zipper))\n         post-zipper (tree/string-zip post-val)]\n\n     (when (not= pre-val post-val)                          ;; only mutate editor if value has changed\n       (.setValue editor post-val))\n\n     (->> (cursor/path pre-zipper pre-pos cursor-loc)       ;; cursor path from pre-format zipper, ignoring whitespace\n          (cursor/position post-zipper)                     ;; returns position in post-format zipper for path\n          (cm/range->Pos)\n          (.setCursor editor))\n\n     (cm/set-zipper! editor post-zipper))))\n\n(def other-bracket {\\( \\) \\[ \\] \\{ \\} \\\" \\\"})\n(defn spaces [n] (apply str (take n (repeat \" \"))))\n\n(def clipboard-helper-element\n  (memoize (fn []\n             (let [textarea (doto (dom/createElement \"pre\")\n                              (dom/setProperties #js {:id \"lark-tree-pasteHelper\"\n                                                      :contentEditable true\n                                                      :className \"fixed o-0 z-0 bottom-0 right-0\"}))]\n               (dom/appendChild js/document.body textarea)\n               textarea))))\n\n(defn copy\n  \"Copy text to clipboard using a hidden input element.\"\n  [text]\n  (let [hadFocus (.-activeElement js/document)\n        text (string/replace text #\"[\\n\\r]\" \"<br/>\")\n        _ (aset (clipboard-helper-element) \"innerHTML\" text)]\n    (doto (Range/createFromNodeContents (clipboard-helper-element))\n      (.select))\n    (try (.execCommand js/document \"copy\")\n         (catch js/Error e (.error js/console \"Copy command didn't work. Maybe a browser incompatibility?\")))\n    (.focus hadFocus)))\n\n(defn copy-range!\n  \"Copy a {:line .. :column ..} range from a CodeMirror instance.\"\n  [cm range]\n  (copy (cm/range-text cm range))\n  true)\n\n(defn cut-range!\n  \"Cut a {:line .. :column ..} range from a CodeMirror instance.\"\n  [cm range]\n  (copy (cm/range-text cm range))\n  (cm/replace-range! cm \"\" range)\n  true)\n\n(defn cursor-skip-pos\n  [{{:keys [pos loc]} :magic/cursor} side]\n  (let [move (case side :left nav/left-up\n                        :right nav/right-up)\n        nodes (->> (iterate move (nav/include-prefix-parents loc))\n                   (take-while identity)\n                   (map z/node)\n                   (filter (fn [node]\n                             (and (not (node/whitespace? node))\n                                  (not (range/pos= pos (range/bounds node side)))))))]\n    (some-> (first nodes)\n            (range/bounds side))))\n\n(defn cursor-skip!\n  \"Returns function for moving cursor left or right, touching only node boundaries.\"\n  [cm side]\n  (some->> (cursor-skip-pos cm side)\n           (cm/set-cursor! cm)))\n\n(defn move-char [cm pos amount]\n  (.findPosH cm pos amount \"char\" false))\n\n(defn char-at [cm pos]\n  (.getRange cm pos (move-char cm pos 1)))\n\n(defprotocol IPointer\n  (get-range [this i])\n  (move [this amount])\n  (move-while! [this i pred])\n  (move-while [this i pred])\n  (insert! [this s] [this replace-i s])\n  (set-editor-cursor! [this])\n  (adjust-for-changes! [this changes]))\n\n(def ^:dynamic *changes* nil)\n\n(defn log-editor-changes [cm changes]\n  (when *changes*\n    (.apply (.-push *changes*) *changes* changes)))\n\n(defn adjust-for-change [pos change]\n  (cond (<= (compare pos (.-from change)) 0) pos\n        (<= (compare pos (.-to change)) 0) (cm/changeEnd change)\n        :else\n        (let [line (-> (.-line pos)\n                       (+ (-> change .-text .-length))\n                       (- (-> (.. change -to -line)\n                              (- (.. change -from -line))))\n                       (- 1))\n              ch (cond-> (.-ch pos)\n                         (= (.-line pos) (.. change -to -line)) (+ (-> (.-ch (cm/changeEnd change))\n                                                                       (- (.. change -to -ch)))))]\n          (cm/Pos line ch))))\n\n(defn adjust-for-changes [pos changes]\n  (loop [pos pos\n         i 0]\n    (if (= i (.-length changes))\n      pos\n      (recur (adjust-for-change pos (aget changes i))\n             (inc i)))))\n\n(defn move-while-pos [pos editor i pred]\n  (loop [the-pos pos]\n    (let [next-pos (move-char editor the-pos i)\n          char (if (pos? i) (.getRange editor the-pos (move-char editor the-pos i))\n                            (char-at editor next-pos))]\n      (if (and (pred char) (not (.-hitSide next-pos)))\n        (recur next-pos)\n        the-pos))))\n\n(defrecord Pointer [editor ^:mutable pos]\n  IPointer\n  (get-range [this i]\n    (if (neg? i)\n      (.getRange editor (:pos (move this i)) pos)\n      (.getRange editor pos (:pos (move this i)))))\n  (move [this amount]\n    (assoc this :pos (move-char editor pos amount)))\n  (insert! [this text]\n    (.replaceRange editor text pos pos)\n    this)\n  (insert! [this amount text]\n    (.replaceRange editor text pos (move-char editor pos amount))\n    this)\n  (set-editor-cursor! [this]\n    (.setCursor editor pos nil #js {:scroll false})\n    this)\n  (adjust-for-changes! [this changes]\n    (set! pos (adjust-for-changes pos changes))\n    this)\n  (move-while! [this i pred]\n    (set! pos (move-while-pos pos editor i pred))\n    this)\n  (move-while [this i pred]\n    (assoc this :pos (move-while-pos pos editor i pred))))\n\n(defn pointer\n  ([editor] (pointer editor (cm/get-cursor editor)))\n  ([editor pos] (->Pointer editor pos)))\n\n(defn chars-around [the-pointer]\n  (mapv (fn [i]\n          (util/some-str (get-range the-pointer i))) [-1 1]))\n\n(defn uneval! [{{:keys [loc]} :magic/cursor\n                :as cm}]\n  (when-let [loc (->> (cons (nav/include-prefix-parents loc) (nav/left-locs loc))\n                      (remove (comp node/whitespace? z/node))\n                      (first))]\n    (let [node (z/node loc)]\n      (let [a-pointer (pointer cm)\n            changes (operation cm\n                               (or (when-let [uneval-loc (first (filter (comp (partial = :uneval) :tag z/node)\n                                                                        [loc (z/up loc)]))]\n                                     (-> (pointer cm (cm/range->Pos (range/bounds (z/node uneval-loc) :left)))\n                                         (insert! 2 \"\")))\n                                   (-> (pointer cm (cm/range->Pos (range/bounds node :left)))\n                                       (insert! \"#_\"))))]\n        (adjust-for-changes! a-pointer changes)\n        (set-editor-cursor! a-pointer))))\n  true)\n\n(range/within? {:line 0, :column 1, :end-line 0, :end-column 22}\n              {:line 0, :column 13})\n\n(def kill!\n  (fn [{{pos :pos} :magic/cursor\n        zipper :zipper :as editor}]\n    (edit/with-formatting editor\n      (let [loc (nav/navigate zipper pos)\n            node (z/node loc)\n            loc (cond-> loc\n                        (or (not (range/within-inner? node pos))\n                            (node/whitespace? node)) (z/up))\n            node (z/node loc)\n            in-edge? (when (node/has-edges? node)\n                       (let [inner (range/inner-range node)]\n                         (not (range/within? inner pos))))\n            end-node (cond in-edge? nil                     ;; ignore kill when cursor is inside an edge structure, eg. #|\"\"\n                           (not (node/may-contain-children? node)) (range/inner-range node)\n\n                           :else (->> (z/children loc)\n                                      (drop-while #(range/lt (range/bounds % :right) pos))\n                                      (take-while #(<= (:line %) (:line pos)))\n                                      (last)))]\n        (when end-node\n          (->> (merge pos (select-keys end-node [:end-line :end-column]))\n               (cut-range! editor)))))\n    true))\n\n(defn boundary? [s]\n  (some->> (last s)\n           (.indexOf \"\\\"()[]{} \")\n           (pos?)))\n\n(defn unwrap! [{{:keys [pos loc bracket-node]} :magic/cursor :as editor}]\n  (when (and loc (not (cm/selection? editor)))\n    (when-let [edge-node (loop [loc (cond-> loc\n                                            (not (range/within-inner? bracket-node pos)) (z/up))]\n                           (cond (not loc) nil\n                                 (node/has-edges? (z/node loc)) (z/node loc)\n                                 :else (recur (z/up loc))))]\n      (edit/with-formatting editor\n        (let [[l r] (node/edges edge-node)\n              [left-r right-r] (range/edge-ranges edge-node)]\n          (doseq [[n range] [[(count l) left-r]\n                             [(count r) right-r]]]\n            (cm/replace-range! editor (format/spaces n) range))))))\n  true)\n\n(defn raise! [{{:keys [pos bracket-loc bracket-node]} :magic/cursor :as editor}]\n  (when (and bracket-loc (z/up bracket-loc))\n    (let [outer-node (z/node (z/up bracket-loc))]\n      (edit/with-formatting editor\n        (cm/replace-range! editor \"\" (range/end bracket-node) outer-node)\n\n        (cm/replace-range! editor \"\" outer-node bracket-node))))\n  true)\n\n(def copy-form\n  (fn [cm] (if (cm/selection? cm)\n             :lark.commands/Pass\n             (copy-range! cm (get-in cm [:magic/cursor :bracket-node])))))\n\n(def cut-form\n  (fn [cm] (if (cm/selection? cm)\n             :lark.commands/Pass\n             (cut-range! cm (get-in cm [:magic/cursor :bracket-node])))))\n\n(def delete-form\n  (fn [cm] (if (cm/selection? cm)\n             :lark.commands/Pass\n             (cm/replace-range! cm \"\" (get-in cm [:magic/cursor :bracket-node])))))\n\n(defn pop-stack! [cm]\n  (when-let [stack (get-in cm [:magic/cursor :stack])]\n    (let [stack (cond-> stack\n                        (or (:base (first stack))\n                            (= (cm/current-selection-bounds cm) (first stack))) rest)\n          item (first stack)]\n      (swap! cm update-in [:magic/cursor :stack] (if (range/empty-range? item)\n                                                   empty rest))\n      item)))\n\n(defn push-stack! [cm node]\n  (when (range/empty-range? node)\n    (swap! cm update-in [:magic/cursor :stack] empty))\n  (when-not (= node (first (get-in cm [:magic/cursor :stack])))\n    (swap! cm update-in [:magic/cursor :stack] conj (range/bounds node)))\n  true)\n\n(defn tracked-select [cm node]\n  (when node\n    (cm/select-range cm node)\n    (push-stack! cm (range/bounds node))))\n\n(defn push-cursor! [cm]\n  (push-stack! cm (cm/Pos->range (cm/get-cursor cm)))\n  (cm/unset-temp-marker! cm))\n\n(def expand-selection\n  (fn [{zipper :zipper\n        :as cm}]\n    (let [sel (cm/current-selection-bounds cm)\n          loc (nav/navigate zipper sel)\n          select! (partial tracked-select cm)\n          cursor-root (cm/temp-marker-cursor-pos cm)\n          selection? (cm/selection? cm)]\n      (when (or cursor-root (not selection?))\n        (push-cursor! cm)\n        (push-stack! cm (cm/current-selection-bounds cm)))\n\n      (loop [loc loc]\n        (if-not loc\n          sel\n          (let [node (z/node loc)\n                inner-range (when (node/has-edges? node)\n                              (let [range (range/inner-range node)]\n                                (when-not (range/empty-range? range)\n                                  range)))]\n            (cond (range/range= sel inner-range) (select! node)\n                  (some-> inner-range\n                          (range/within? sel)) (select! inner-range)\n                  (range/range= sel node) (recur (z/up loc))\n                  (range/within? node sel) (select! node)\n                  :else (recur (z/up loc)))))))\n    true))\n\n(def shrink-selection\n  (fn [cm]\n    (some->> (pop-stack! cm)\n             (cm/select-range cm))\n    true))\n\n(defn expand-selection-x [{zipper :zipper\n                           :as cm} direction]\n  (let [selection-bounds (cm/current-selection-bounds cm)\n        selection-loc (nav/navigate zipper (range/bounds selection-bounds direction))\n        selection-node (z/node selection-loc)\n        cursor-root (cm/temp-marker-cursor-pos cm)]\n    (when cursor-root\n      (push-cursor! cm)\n      (push-stack! cm selection-bounds))\n    (if (and (node/has-edges? selection-node)\n             (= (range/bounds selection-bounds direction)\n                (range/bounds (range/inner-range selection-node) direction)))\n      (expand-selection cm)\n\n      (if-let [adjacent-loc (first (filter (comp (complement node/whitespace?) z/node) ((case direction :right nav/right-locs\n                                                                                                        :left nav/left-locs) selection-loc)))]\n        (tracked-select cm (merge (range/bounds (z/node adjacent-loc))\n                                  (case direction :right (range/bounds selection-bounds :left)\n                                                  :left (range/->end (range/bounds selection-bounds :right)))))\n        (expand-selection cm))))\n  true)\n\n(def backspace! #(.execCommand % \"delCharBefore\"))\n\n(defn comment-line\n  ([cm]\n   (operation\n    cm\n    (if (cm/selection? cm)\n      (let [sel (aget (.listSelections cm) 0)\n            [start end] (sort [(.. sel -anchor -line)\n                               (.. sel -head -line)])]\n        (doseq [line-n (range start (inc end))]\n          (comment-line cm line-n)))\n      (comment-line cm (.-line (cm/get-cursor cm))))))\n  ([cm line-n]\n   (let [[spaces semicolons] (rest (re-find #\"^(\\s*)(;+)?\" (.getLine cm line-n)))\n         [space-n semicolon-n] (map count [spaces semicolons])]\n     (if (> semicolon-n 0)\n       (cm/replace-range! cm \"\" {:line line-n\n                                 :column space-n\n                                 :end-column (+ space-n semicolon-n)})\n       (cm/replace-range! cm \";;\" {:line line-n\n                                   :column space-n\n                                   :end-column space-n})))\n   true))\n\n;; TODO\n;; slurp/unslurp strings\n;; - pad with space\n;; - unslurp last spaced element\n\n(defn slurp-parent? [node pos]\n  (and (or #_(= :string (:tag node))\n        (node/may-contain-children? node))\n       (range/within-inner? node pos)))\n\n(defn slurp-parent [loc pos]\n  (loop [loc loc]\n    (when loc\n      (if (slurp-parent? (z/node loc) pos)\n        loc\n        (recur (z/up loc))))))\n\n(def slurp-forward\n  (fn [{{:keys [loc pos]} :magic/cursor\n        :as cm}]\n    (let [end-edge-loc (slurp-parent loc pos)\n          start-edge-loc (nav/include-prefix-parents end-edge-loc)\n          {:keys [tag] :as node} (z/node start-edge-loc)]\n      (when (and node (not= :base tag))\n        (let [right-bracket (second (node/edges (z/node end-edge-loc)))\n              last-child (some->> (z/children end-edge-loc)\n                                  (remove node/whitespace?)\n                                  (last))]\n          (when-let [next-form (some->> (z/rights start-edge-loc)\n                                        (remove node/whitespace?)\n                                        first)]\n            (let [form-content (emit/string next-form)\n                  replace-start (if last-child (range/bounds last-child :right)\n                                               (-> (z/node end-edge-loc)\n                                                   (range/inner-range)\n                                                   (range/bounds :right)))\n                  replace-end (select-keys next-form [:end-line :end-column])\n                  pad-start (and last-child\n                                 (or (not (boundary? (first form-content)))\n                                     (not (boundary? (last (emit/string last-child))))))\n                  cur (.getCursor cm)]\n              (cm/replace-range! cm (str\n                                     (when pad-start \" \")\n                                     form-content\n                                     right-bracket)\n                                 (merge replace-start replace-end))\n              (.setCursor cm cur))))))\n    true))\n\n(def unslurp-forward\n  (fn [{{:keys [loc pos]} :magic/cursor\n        :as editor}]\n    (let [end-edge-loc (slurp-parent loc pos)\n          end-edge-node (some-> end-edge-loc z/node)]\n      (when (and end-edge-node (not= :base (:tag end-edge-node)))\n        (when-let [last-child (->> (z/children end-edge-loc)\n                                   (remove node/whitespace?)\n                                   (last))]\n          (edit/with-formatting editor\n            (-> (pointer editor (cm/range->Pos (range/end end-edge-node)))\n                (insert! (str \" \" (emit/string last-child) \" \")))\n            (cm/replace-range! editor (-> (cm/range-text editor last-child)\n                                          (str/replace #\"[^\\n]\" \" \")) last-child)\n            (cm/set-cursor! editor (first (sort [(cm/range->Pos pos)\n                                                 (-> (range/inner-range end-edge-node)\n                                                     (range/end)\n                                                     (cm/range->Pos))])))))))\n    true))\n\n\n(defn cursor-selection-edge [editor side]\n  (cm/set-cursor! editor (-> (cm/current-selection-bounds editor)\n                             (range/bounds side)))\n  true)\n\n(defn cursor-line-edge [editor side]\n  (let [cursor (cm/get-cursor editor)\n        line-i (.-line cursor)\n        line (.getLine editor line-i)\n        padding (count (second (re-find (case side :left #\"^(\\s+).*\"\n                                                   :right #\".*?(\\s+)$\") line)))]\n    (cm/set-cursor! editor (cm/Pos line-i (case side :left padding\n                                                     :right (- (count line) padding)))))\n  true)\n\n(defn node-symbol [node]\n  (when (= :token (.-tag node))\n    (-> (emit/sexp node)\n        (util/guard-> symbol?))))\n\n(defn eldoc-symbol\n  ([loc pos]\n   (eldoc-symbol (cond-> loc\n                         (= (range/bounds pos :left)\n                            (some-> loc (z/node) (range/bounds :left))) (z/up))))\n  ([loc]\n   (some->> loc\n            (nav/closest #(#{:list :fn} (.-tag (z/node %))))\n            (z/children)\n            (first)\n            (node-symbol))))"]}