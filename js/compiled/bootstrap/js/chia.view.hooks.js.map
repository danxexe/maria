{"version":3,"sources":["chia/view/hooks.cljs"],"mappings":"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","names":["js/chia","js/chia.view","js/chia.view.hooks","js/chia.view.hooks.sentinel","chia.view.hooks/sentinel","chia.view.hooks/-use-effect","js/module$node_modules$react$index.useEffect","chia.view.hooks/-use-context","js/module$node_modules$react$index.useContext","chia.view.hooks/-use-memo","js/module$node_modules$react$index.useMemo","chia.view.hooks/-use-layout-effect","js/module$node_modules$react$index.useLayoutEffect","chia.view.hooks/use-state","js/module$node_modules$react$index.useState","chia.view.hooks/use-reducer","js/module$node_modules$react$index.useReducer","chia.view.hooks/use-callback","js/module$node_modules$react$index.useCallback","chia.view.hooks/use-ref","js/module$node_modules$react$index.useRef","chia.view.hooks/use-imperative-handle","js/module$node_modules$react$index.useImperativeHandle","chia.view.hooks/use-debug-value","js/module$node_modules$react$index.use-debug-value","chia.view.hooks/use-context","context-k","G__65793","chia.view.impl/lookup-context","chia.view.hooks/effect*","native-use-effect","f","G__65796","chia.view.impl/wrap-effect","key","chia$view$hooks$effect_STAR__$_use_effect_STAR_.cljs$core$IFn$_invoke$arity$3","cljs.core/=","equal?","key-ref","obj65797","k65798","obj65802","applied-science.js-interop.impl/in?*","js/undefined","G__65800","key-count","kcount","cljs.core/not","G__65808","G__65809","G__65810","G__65811","chia.view.hooks/use-effect","chia.view.hooks/use-layout-effect","chia.view.hooks/use-will-unmount","G__65812","G__65813","cljs.core/constantly","var_args","G__65815","chia.view.hooks/use-memo","js/Error","chia.view.hooks.use_memo.cljs$core$IFn$_invoke$arity$3","cljs.core/identical?","mem","G__65818","obj65816","k65817","obj65819","G__65820","G__65821","obj65822","obj65823","obj65824","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cljs.core/-write","chia.view.hooks/HookAtom","chia.view.hooks/->HookAtom","state","_","value","G__65832","fexpr__65831","fexpr__65838","a","G__65840","p1__65827#","fexpr__65839","b","G__65842","p1__65828#","fexpr__65841","xs","G__65845","p1__65829#","fexpr__65844","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","G__65851","chia.view.hooks/use-atom","chia.view.hooks.use_atom.cljs$core$IFn$_invoke$arity$1","initial-state","G__65861","obj65859","k65860","obj65862","obj65858","obj65863","chia.view.hooks/use-schedule-update","cljs.core/inc","p__65868","map__65869","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","chia.view.hooks/use-interval","interval","now?","G__65875","G__65876","i","js/setInterval","js/clearInterval","chia.view.hooks/use-dom-ref","dom-ref","G__65881","G__65882","G__65883","obj65884","k65885","obj65886","chia.view.hooks/use-listener","target","event","capture-phase","f-ref","G__65888","obj65890","k65891","obj65894","obj65896","k65897","obj65898","chia.view.hooks/use-forwarded-ref","forwarded-ref","obj65900","k65901","js/goog.reflect.objectProperty","obj65903","chia.reactive/*reader*","ref","obj65907","G__65909","G__65910","obj65911","k65912","obj65913"],"sourcesContent":["(ns chia.view.hooks\n  \"React hooks in ClojureScript\"\n  (:require [\"react\" :as react]\n            [chia.view.impl :as impl]\n            [chia.view.render-loop :as render-loop]\n            [chia.reactive :as r]\n            [applied-science.js-interop :as j]\n            [chia.view.registry :as registry]\n            [chia.view.hiccup :as hiccup]\n            [chia.view.props :as props]))\n\n(defonce ^:private sentinel #js{})\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;\n;; Why does this namespace exist? why not just use React hooks directly?\n;;\n;; * some hooks that rely on javascript-specific semantics like `undefined` and js equality,\n;;   these need to be adapted for cljs to work properly at all\n;; * figwheel/shadow-style reloading needs to be explicitly supported\n;; * built-in state handling is not consistent with how Clojure handles state (ie. use atoms)\n;;\n;; lastly, Chia has its own reactivity system which we want to support.\n\n\n\n\n;; React hooks that have alternative implementations/wrappers in this ns\n(def -use-effect react/useEffect)\n(def -use-context react/useContext)\n(def -use-memo react/useMemo)\n(def -use-layout-effect react/useLayoutEffect)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;\n;; Built-in hooks to be used directly\n\n(def use-state react/useState)\n(def use-reducer react/useReducer)\n(def use-callback react/useCallback)\n(def use-ref react/useRef)\n(def use-imperative-handle react/useImperativeHandle)\n(def use-debug-value react/use-debug-value)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;\n;;\n;; Modified versions of built-in hooks\n\n(defn use-context\n  \"Returns binding for context `context-k` (context can be a React context or a globally distinct keyword)\"\n  [context-k]\n  (-use-context\n   (impl/lookup-context context-k)))\n\n(defn- effect*\n  \"`f` is called on every render, or each time `key` is not= to the previous `key`.\n\n   If a function is returned from `f`, it will be called when the view unmounts.\"\n  [native-use-effect]\n\n  (fn use-effect*\n    ([f] (native-use-effect (impl/wrap-effect f)))\n    ([f key] (use-effect* f = key))\n    ([f equal? key]\n     (let [key-ref (j/get (use-ref #js[key 0]) :current)\n           key-count (let [kcount (aget key-ref 1)]\n                       (if (not (equal? key (aget key-ref 0)))\n                         (aset key-ref 1 (inc kcount))\n                         kcount))]\n       (aset key-ref 0 key)\n       (native-use-effect (impl/wrap-effect f) #js [key-count])))))\n\n(def use-effect\n  \"`f` is called on every render, or each time `key` is not= to the previous `key`.\n\n   If a function is returned from `f`, it will be called when the view unmounts.\"\n  ^{:arglists '([f] [f key] [f equal? key])}\n  (effect* -use-effect))\n\n(def use-layout-effect\n  \"Like `use-effect` but called synchronously, after DOM operations are complete.\"\n  ^{:arglists '([f] [f key] [f equal? key])}\n  (effect* -use-layout-effect))\n\n;;;;;;;;;;;;;;;;;;;;;\n;;\n;; Custom hooks\n;;\n\n(defn use-will-unmount\n  \"Evaluates `f` when component unmounts.\"\n  [f]\n  (use-effect (constantly f) nil))\n\n(defn use-memo\n  \"Evaluates `f` once, caches and returns result. Re-evaluates when `key` changes.\n\n   Guaranteed to only evaluate once per lifecycle.\"\n  ([f] (use-memo f identical? sentinel))\n  ([f key] (use-memo f = key))\n  ([f equal? key]\n   (let [mem (-> (use-ref #js[nil nil])\n                 (j/get :current))]\n     (when-not (equal? (aget mem 0) key)\n       (j/assoc! mem 0 key 1 (f)))\n     (aget mem 1))))\n\n(deftype HookAtom [^:mutable state]\n  IDeref\n  (-deref [_] (aget state 0))\n  IReset\n  (-reset! [_ value] ((aget state 1) (constantly value)))\n  ISwap\n  (-swap! [_ f] ((aget state 1) f))\n  (-swap! [_ f a] ((aget state 1) #(f % a)))\n  (-swap! [_ f a b] ((aget state 1) #(f % a b)))\n  (-swap! [_ f a b xs] ((aget state 1) #(apply f % a b xs))))\n\n(defn use-atom\n  \"Returns an atom with `initial-state`. Current view will re-render when value of atom changes.\"\n  ([] (use-atom nil))\n  ([initial-state]\n   (-> (use-ref (HookAtom. nil))\n       (j/get :current)\n       (j/assoc! .-state (use-state initial-state)))))\n\n(defn use-schedule-update\n  \"Returns a `forceUpdate`-like function for the current view (not synchronous).\"\n  []\n  (-> (use-reducer inc 0)\n      (aget 1)))\n\n(defn use-interval\n  [{:keys [interval\n           now?\n           key]} f]\n  (use-effect (fn []\n                (when now? (f))\n                (let [i (js/setInterval f interval)]\n                  #(js/clearInterval i)))\n              [key interval]))\n\n(defn use-dom-ref\n  \"Returns a ref to be passed as the `:key` to a react view.\n  When mounted, `f` is called once with the referenced DOM element.\"\n  [f]\n  (let [dom-ref (use-ref)]\n    (use-layout-effect\n     (fn []\n       (f (j/get dom-ref :current)))\n     nil)\n    dom-ref))\n\n(defn use-listener [target event f capture-phase]\n  (let [f-ref (use-ref f)]\n    (use-effect (fn []\n                  (.addEventListener target event (j/get f-ref :current) capture-phase)\n                  #(.removeEventListener target event (j/get f-ref :current) capture-phase)))))\n\n;;;;;;;;;;;;;;;;;;;;;\n;;\n;; Chia-specific\n;;\n\n(defn use-forwarded-ref\n  \"Returns a `ref` which will be forwarded to parent.\n  Requires `:view/forward-ref?` option on this view to be true.\"\n  []\n  (let [forwarded-ref (j/get r/*reader* .-chia$forwardRef)\n        ref (use-ref)]\n    (assert (j/contains? r/*reader* .-chia$forwardRef) \"use-forwarded-ref requires :view/forward-ref? to be true\")\n    (use-imperative-handle forwarded-ref\n                           (fn [] (j/get ref :current)))\n    ref))"]}