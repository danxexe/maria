{"version":3,"sources":["lark/tree/core.cljc"],"mappings":";;;;;;AAQA;;;AAAKA,AAEHC;AAEF,AAAKC,AAAQC;AAEb;;;AAAKC,AAEH,AAACC,AAAKH,AAAQD;AAGhB,AAAA,AAAMK,AAAQC;AAAd,AACE,AAAMA,AAAE,AAAAC,AAAQD;AAAR,AAAA,AACQ,AAASA;AAAG,AAAAC,AAACP;;AADrBO;;;AAAR,AAEE,AAAAC,AAAUE;AAAVD,AAAA;AAAA,AAAA,AAAAA,AAAUC;;AAAV,AAAA,AACE,AAACC,AAAYL;AADf,AAAA,AAAAE,AAAUE;;AAGd","names":["lark.tree.core/ast","lark.tree.parse/ast","lark.tree.core/ast-zip","lark.tree.node/ast-zip","lark.tree.core/string-zip","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","lark.tree.core/format","x","G__65627","*pretty*-orig-val__65630","*pretty*-temp-val__65631","lark.tree.format/*pretty*","lark.tree.emit.string.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns lark.tree.core\n  (:require [lark.tree.parse :as parse]\n            [lark.tree.emit :as emit]\n            [lark.tree.node :as n]\n            [lark.tree.format :as format]))\n\n;; Parse\n\n(def ast\n  \"Given ClojureScript source, returns AST\"\n  parse/ast)\n\n(def ast-zip n/ast-zip)\n\n(def string-zip\n  \"Given ClojureScript source, returns zipper\"\n  (comp ast-zip parse/ast))\n\n;; Navigation\n(defn format [x]\n  (let [x (cond-> x\n                  (string? x) (parse/ast))]\n    (binding [format/*pretty* true]\n      (emit/string x))))\n\n(comment\n\n (let [sample-code-string \"\"]\n   (let [_ (.profile js/console \"parse-ast\")\n         ast (do (dotimes [n 4]\n                   (parse/ast sample-code-string))\n                 (time (parse/ast sample-code-string)))\n         _ (.profileEnd js/console)\n\n         _ (.profile js/console \"emit-string\")\n         str (do (dotimes [n 4]\n                   (emit/string ast))\n                 (time (emit/string ast)))\n         _ (.profileEnd js/console)\n\n         _ (.profile js/console \"emit-formatted-string\")\n         formatted-str (do (dotimes [n 4]\n                             (format ast))\n                           (time (format ast)))\n         _ (.profileEnd js/console)]\n     (println :cljs-core-string-verify (= str sample-code-string)))))\n\n"]}