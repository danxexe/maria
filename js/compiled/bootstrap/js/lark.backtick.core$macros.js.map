{"version":3,"sources":["lark/backtick/core$macros.cljc"],"mappings":"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","names":["lark.backtick.core$macros/resolve-sym","sym","n","cljs.core/name","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/last","temp__5718__auto__","gs","fexpr__70790","cljs.core/deref","lark.backtick.core$macros/*gensyms*","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/count","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","lark.backtick.core$macros/unquote?","form","cljs.core/seq?","cljs.core/first","lark.backtick.core$macros/unquote-splicing?","lark.backtick.core$macros/quote-fn*","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/List","cljs.core/Symbol","cljs.core/second","cljs.core/record?","cljs.core/coll?","xs","cljs.core/map?","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/concat","parts","iter__4523__auto__","s__70810","cljs.core/LazySeq","temp__5720__auto__","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__70812","cljs.core/chunk-buffer","i__70811","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__70809","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","x","cat","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/vector?","cljs.core/set?","ret__4776__auto__","&form","&env","lark.backtick.core$macros/template","*gensyms*-orig-val__70824","*gensyms*-temp-val__70825","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/chunk-first"],"sourcesContent":["(ns lark.backtick.core)\n\n;template quoting: from https://github.com/brandonbloom/backtick\n;Copyright \u00a9 2012 Brandon Bloom\n;Distributed under the Eclipse Public License, the same as Clojure.\n;Modified 2016, 2017 Matthew Huebert\n\n(def ^:dynamic ^:private *gensyms*)\n\n(defn resolve-sym [sym]\n  (let [n (name sym)]\n    (if (= (last n) \\#)\n      (if-let [gs (@*gensyms* sym)]\n        gs\n        (let [gs (gensym (str (subs n 0 (dec (count n))) \"__auto__\"))]\n          (swap! *gensyms* assoc sym gs)\n          gs))\n      sym)))\n\n(defn unquote? [form]\n  (and (seq? form) (= (first form) 'clojure.core/unquote)))\n\n(defn unquote-splicing? [form]\n  (and (seq? form) (= (first form) 'clojure.core/unquote-splicing)))\n\n(defn quote-fn* [form]\n  (cond\n    (symbol? form) `'~(resolve-sym form)\n    (unquote? form) (second form)\n    (unquote-splicing? form) (throw \"splice not in list\")\n    (record? form) `'~form\n    (coll? form)\n    (let [xs (if (map? form) (apply concat form) form)\n          parts (for [x xs]\n                  (if (unquote-splicing? x)\n                    (second x)\n                    [(quote-fn* x)]))\n          cat (doall `(concat ~@parts))]\n      (cond\n        (vector? form) `(vec ~cat)\n        (map? form) `(apply hash-map ~cat)\n        (set? form) `(set ~cat)\n        (seq? form) `(apply list ~cat)\n        :else (throw \"Unknown collection type\")))\n    :else `'~form))\n\n(defmacro template [form]\n  (binding [*gensyms* (atom {})]\n    (quote-fn* form)))\n"]}