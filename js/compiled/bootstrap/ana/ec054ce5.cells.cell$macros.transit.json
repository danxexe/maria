["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","cells/cell$macros.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",15],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",["~$bound-fn","~$get"]],"~:name","~$cells.cell$macros","~:imports",null,"~:requires",["^ ","^;","^<","~$core","^<","~$cells.util","^I","~$util","^I","~$applied-science.js-interop","^K","~$j","^K","^<","^<","~$goog","^L"],"~:seen",["^A",["~:require"]],"~:shadow/js-access-global",["^A",["Error"]],"~:uses",null,"~:defs",["^ ","~$defcell",["^ ","~:protocol-inline",null,"^2",["^ ","^3","cells/cell$macros.cljc","^7",18,"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",["~#list",[["^Y",["~$the-name","~$body"]]]],"~:arglists",["^Y",[["^Z","~$&","^["]]],"~:arglists-meta",["^Y",[null]]],"^5",11,"^4",7,"~:macro",true,"^6",7,"^10",["^Y",["~$quote",["^Y",[["^Z","~$&","^["]]]]],"~:doc","Defines a named cell."],"^D","~$cells.cell$macros/defcell","^3","cells/cell$macros.cljc","^7",18,"^T",["^ ","^U",true,"^V",1,"^W",1,"^X",["^Y",[["^Y",["^Z","^["]]]],"^10",["^Y",[["^Z","~$&","^["]]],"^11",["^Y",[null]]],"^X",["^Y",[["^Y",["^Z","^["]]]],"~:protocol-impl",null,"^V",1,"^11",["^Y",[null]],"^5",1,"^U",true,"~:methods",[["^ ","^V",1,"^U",true,"~:tag",["^A",["~$seq","~$cljs.core/IList"]]]],"^4",7,"^12",true,"~:ret-tag","~$any","^6",7,"^W",1,"~:fn-var",false,"^10",["^Y",[["^Z","~$&","^["]]],"^14","Defines a named cell."],"~$cell",["^ ","^S",null,"^2",["^ ","^3","cells/cell$macros.cljc","^7",15,"^T",["^ ","^U",false,"^V",2,"^W",2,"^X",["^Y",[["~$expr"],["~$key","^1?"]]],"^10",["^Y",[["^1?"],["^1@","^1?"]]],"^11",["^Y",[null,null]]],"^5",11,"^4",27,"^12",true,"^6",27,"^10",["^Y",["^13",["^Y",[["^1?"],["^1@","^1?"]]]]],"^14","Returns an anonymous cell. Only one cell will be returned per lexical instance of `cell`,\n  unless a unique `key` is provided. `self` is brought into scope, referring to the current cell."],"^D","~$cells.cell$macros/cell","^3","cells/cell$macros.cljc","^7",15,"^T",["^ ","^U",false,"^V",2,"^W",2,"^X",["^Y",[["^1?"],["^1@","^1?"]]],"^10",["^Y",[["^1?"],["^1@","^1?"]]],"^11",["^Y",[null,null]]],"^X",["^Y",[["^1?"],["^1@","^1?"]]],"^16",null,"^V",2,"^11",["^Y",[null,null]],"^5",1,"^U",false,"^17",[["^ ","^V",3,"^U",false,"^18",["^A",["^19","^1:"]]],["^ ","^V",4,"^U",false,"^18",["^A",["^19","^1:"]]]],"^4",27,"^12",true,"^6",27,"^W",2,"^1=",false,"^10",["^Y",[["^1?"],["^1@","^1?"]]],"^14","Returns an anonymous cell. Only one cell will be returned per lexical instance of `cell`,\n  unless a unique `key` is provided. `self` is brought into scope, referring to the current cell."],"^B",["^ ","^S",null,"^2",["^ ","^3","cells/cell$macros.cljc","^7",19,"^T",["^ ","^U",true,"^V",0,"^W",0,"^X",["^Y",[["^Y",["^["]]]],"^10",["^Y",[["~$&","^["]]],"^11",["^Y",[null]]],"^5",11,"^4",38,"^12",true,"^6",38,"^10",["^Y",["^13",["^Y",[["~$&","^["]]]]],"^14","Returns an anonymous function which will evaluate in the context of the current cell\n   (useful for handling async-state)"],"^D","~$cells.cell$macros/bound-fn","^3","cells/cell$macros.cljc","^7",19,"^T",["^ ","^U",true,"^V",0,"^W",0,"^X",["^Y",[["^Y",["^["]]]],"^10",["^Y",[["~$&","^["]]],"^11",["^Y",[null]]],"^X",["^Y",[["^Y",["^["]]]],"^16",null,"^V",0,"^11",["^Y",[null]],"^5",1,"^U",true,"^17",[["^ ","^V",0,"^U",true,"^18",["^A",["^19","^1:"]]]],"^4",38,"^12",true,"^1;","^1<","^6",38,"^W",0,"^1=",false,"^10",["^Y",[["~$&","^["]]],"^14","Returns an anonymous function which will evaluate in the context of the current cell\n   (useful for handling async-state)"]],"~:require-macros",["^ ","^<","^<","^;","^<","^H","^<","^K","^K","~$j","^K"],"~:cljs.analyzer/constants",["^ ","^M",["^A",["~$&","~$cljs.core/some?","~$cells.cell/cell*","~$cljs.core/str","~$try","~$cljs.core/binding","~$cells.cell/cell","~$self","~$cell__55583__auto__","~$prev-cell__55560__auto__","~$cljs.core/hash","~$cljs.core/apply","~$e__55586__auto__","~$do","~$if","~$cells.cell/error!","~$cljs.core/let","~$error-handler__55584__auto__","~$cells.cell/*error-handler*","~$cljs.core/declare","~$cljs.core/fn","~$cells.cell/*self*","~$args__55585__auto__","~$catch","~$js/Error","~$def","~$cells.cell/update-cell*"]],"~:order",["^1X","^1K","^1Q","^1W","^1T","^1M","^21","^1R","^1E","^22","^1F","^1J","^1G","^1N","^1L","^1Y","^1U","^1V","~$&","^1Z","^1I","^1H","^1O","^1[","^20","^1P","^1S"]],"~:flags",["^ ","^N",["^A",[]]],"~:js-deps",["^ "],"~:deps",["^L","^<","^<","^I","^K"]]