["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","fast_zip/core.cljc","~:line",15,"~:column",3,"~:end-line",15,"~:end-column",16,"~:doc","Functional hierarchical zipper, with navigation, editing,\n  and enumeration.  See Huet","~:author","Rich Hickey, modified by Alexander K. Hudek"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",["~$remove","~$replace","~$next"]],"~:name","~$fast-zip.core","~:imports",null,"~:requires",["^ ","^>","^>","~$goog","^K"],"~:seen",["^C",[]],"~:shadow/js-access-global",["^C",["Error"]],"~:uses",null,"~:defs",["^ ","~$rightmost",["^ ","~:protocol-inline",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",167,"^5",7,"^6",167,"^7",16,"~:arglists",["~#list",["~$quote",["^S",[["~$loc"]]]]],"^8","Returns the loc of the rightmost sibling of the node at this loc, or self"],"^G","~$fast-zip.core/rightmost","^3","fast_zip/core.cljc","^7",16,"~:method-params",["^S",[["^U"]]],"~:protocol-impl",null,"~:arglists-meta",["^S",[null,null]],"^5",1,"~:variadic?",false,"^4",167,"~:ret-tag","~$clj","^6",167,"~:max-fixed-arity",1,"~:fn-var",true,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns the loc of the rightmost sibling of the node at this loc, or self"],"~$insert-child",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",246,"^5",7,"^6",246,"^7",19,"^R",["^S",["^T",["^S",[["^U","~$item"]]]]],"^8","Inserts the item as the leftmost child of the node at this loc, without moving"],"^G","~$fast-zip.core/insert-child","^3","fast_zip/core.cljc","^7",19,"^W",["^S",[["^U","^14"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",246,"^[","~$fast-zip.core/ZipperLocation","^6",246,"^11",2,"^12",true,"^R",["^S",["^T",["^S",[["^U","^14"]]]]],"^8","Inserts the item as the leftmost child of the node at this loc, without moving"],"~$left",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",183,"^5",7,"^6",183,"^7",11,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns the loc of the left sibling of the node at this loc, or nil"],"^G","~$fast-zip.core/left","^3","fast_zip/core.cljc","^7",11,"^W",["^S",[["^U"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",183,"^[",["^C",["^16","~$clj-nil"]],"^6",183,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns the loc of the left sibling of the node at this loc, or nil"],"~$path",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",93,"^5",7,"^6",93,"^7",11,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns a seq of nodes leading to this loc"],"^G","~$fast-zip.core/path","^3","fast_zip/core.cljc","^7",11,"^W",["^S",[["^U"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",93,"^[",["^C",["~$any","^19"]],"^6",93,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns a seq of nodes leading to this loc"],"~$leftmost",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",198,"^5",7,"^6",198,"^7",15,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns the loc of the leftmost sibling of the node at this loc, or self"],"^G","~$fast-zip.core/leftmost","^3","fast_zip/core.cljc","^7",15,"^W",["^S",[["^U"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",198,"^[","^10","^6",198,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns the loc of the leftmost sibling of the node at this loc, or self"],"~$append-child",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",251,"^5",7,"^6",251,"^7",19,"^R",["^S",["^T",["^S",[["^U","^14"]]]]],"^8","Inserts the item as the rightmost child of the node at this loc, without moving"],"^G","~$fast-zip.core/append-child","^3","fast_zip/core.cljc","^7",19,"^W",["^S",[["^U","^14"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",251,"^[","^16","^6",251,"^11",2,"^12",true,"^R",["^S",["^T",["^S",[["^U","^14"]]]]],"^8","Inserts the item as the rightmost child of the node at this loc, without moving"],"~$->ZipperOps",["^ ","^Q",null,"^2",["^ ","~:protocols",["^C",[]],"^3","fast_zip/core.cljc","^7",19,"^5",10,"~:factory","~:positional","^4",18,"^6",18,"^R",["^S",["^T",["^S",[["~$branch?","~$children","~$make-node"]]]]],"~:skip-protocol-flag",null,"^8","Positional factory function for fast-zip.core/ZipperOps."],"^1B",["^C",[]],"^G","~$fast-zip.core/->ZipperOps","^3","fast_zip/core.cljc","^7",19,"^W",["^S",[["^1E","^1F","^1G"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^1C","^1D","^4",18,"^[","~$fast-zip.core/ZipperOps","^6",18,"^11",3,"^12",true,"^R",["^S",["^T",["^S",[["^1E","^1F","^1G"]]]]],"^1H",null,"^8","Positional factory function for fast-zip.core/ZipperOps."],"^1E",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",77,"^5",7,"^6",77,"^7",14,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns true if the node at loc is a branch"],"^G","~$fast-zip.core/branch?","^3","fast_zip/core.cljc","^7",14,"^W",["^S",[["^U"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",77,"^[","^1<","^6",77,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns true if the node at loc is a branch"],"^1F",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",82,"^5",7,"^6",82,"^7",15,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns a seq of the children of node at loc, which must be a branch"],"^G","~$fast-zip.core/children","^3","fast_zip/core.cljc","^7",15,"^W",["^S",[["^U"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",82,"^[","^1<","^6",82,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns a seq of the children of node at loc, which must be a branch"],"^D",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",287,"^5",7,"^6",287,"^7",13,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Removes the node at loc, returning the loc that would have preceded it in a depth-first walk."],"^G","~$fast-zip.core/remove","^3","fast_zip/core.cljc","^7",13,"^W",["^S",[["^U"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",287,"^[",["^C",["^10","^16"]],"^6",287,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Removes the node at loc, returning the loc that would have preceded it in a depth-first walk."],"~$down",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",108,"^5",7,"^6",108,"^7",11,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns the loc of the leftmost child of the node at this loc,\n  or nil if no children"],"^G","~$fast-zip.core/down","^3","fast_zip/core.cljc","^7",11,"^W",["^S",[["^U"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",108,"^[",["^C",["^16","^19"]],"^6",108,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns the loc of the leftmost child of the node at this loc,\n  or nil if no children"],"~$->ZipperLocation",["^ ","^Q",null,"^2",["^ ","^1B",["^C",[]],"^3","fast_zip/core.cljc","^7",24,"^5",10,"^1C","^1D","^4",22,"^6",22,"^R",["^S",["^T",["^S",[["~$ops","~$node","^1:"]]]]],"^1H",null,"^8","Positional factory function for fast-zip.core/ZipperLocation."],"^1B",["^C",[]],"^G","~$fast-zip.core/->ZipperLocation","^3","fast_zip/core.cljc","^7",24,"^W",["^S",[["^1Q","^1R","^1:"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^1C","^1D","^4",22,"^[","^16","^6",22,"^11",3,"^12",true,"^R",["^S",["^T",["^S",[["^1Q","^1R","^1:"]]]]],"^1H",null,"^8","Positional factory function for fast-zip.core/ZipperLocation."],"^E",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",237,"^5",7,"^6",237,"^7",14,"^R",["^S",["^T",["^S",[["^U","^1R"]]]]],"^8","Replaces the node at this loc, without moving"],"^G","~$fast-zip.core/replace","^3","fast_zip/core.cljc","^7",14,"^W",["^S",[["^U","^1R"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",237,"^[","^16","^6",237,"^11",2,"^12",true,"^R",["^S",["^T",["^S",[["^U","^1R"]]]]],"^8","Replaces the node at this loc, without moving"],"~$zipper",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",24,"^5",7,"^6",24,"^7",13,"^R",["^S",["^T",["^S",[["^1E","^1F","^1G","~$root"]]]]],"^8","Creates a new zipper structure.\n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node.","~:added","1.0"],"^1W","1.0","^G","~$fast-zip.core/zipper","^3","fast_zip/core.cljc","^7",13,"^W",["^S",[["^1E","^1F","^1G","^1V"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",24,"^[","^16","^6",24,"^11",4,"^12",true,"^R",["^S",["^T",["^S",[["^1E","^1F","^1G","^1V"]]]]],"^8","Creates a new zipper structure.\n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node."],"~$end?",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",282,"^5",7,"^6",282,"^7",11,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns true if loc represents the end of a depth-first walk"],"^G","~$fast-zip.core/end?","^3","fast_zip/core.cljc","^7",11,"^W",["^S",[["^U"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",282,"^[","~$boolean","^6",282,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns true if loc represents the end of a depth-first walk"],"~$edit",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",306,"^5",7,"^6",306,"^7",11,"^R",["^S",["^T",["^S",[["^U","~$f","~$&","~$args"]]]]],"^8","Replaces the node at this loc with the value of (f node args)","~:top-fn",["^ ","^Z",true,"~:fixed-arity",2,"^11",2,"^W",[["^S",["^U","~$f","^21"]]],"^R",["^S",[["^U","~$f","~$&","^21"]]],"^Y",["^S",[null]]]],"^G","~$fast-zip.core/edit","^3","fast_zip/core.cljc","^7",11,"^22",["^ ","^Z",true,"^23",2,"^11",2,"^W",[["^S",["^U","~$f","^21"]]],"^R",["^S",[["^U","~$f","~$&","^21"]]],"^Y",["^S",[null]]],"^W",[["^S",["^U","~$f","^21"]]],"^X",null,"^23",2,"^Y",["^S",[null]],"^5",1,"^Z",true,"~:methods",[["^ ","^23",2,"^Z",true,"~:tag","^16"]],"^4",306,"^[","^1<","^6",306,"^11",2,"^12",true,"^R",["^S",[["^U","~$f","~$&","^21"]]],"^8","Replaces the node at this loc with the value of (f node args)"],"~$->ZipperPath",["^ ","^Q",null,"^2",["^ ","^1B",["^C",[]],"^3","fast_zip/core.cljc","^7",20,"^5",10,"^1C","^1D","^4",20,"^6",20,"^R",["^S",["^T",["^S",[["~$l","~$r","~$ppath","~$pnodes","~$changed?"]]]]],"^1H",null,"^8","Positional factory function for fast-zip.core/ZipperPath."],"^1B",["^C",[]],"^G","~$fast-zip.core/->ZipperPath","^3","fast_zip/core.cljc","^7",20,"^W",["^S",[["~$l","~$r","^28","^29","^2:"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^1C","^1D","^4",20,"^[","~$fast-zip.core/ZipperPath","^6",20,"^11",5,"^12",true,"^R",["^S",["^T",["^S",[["~$l","~$r","^28","^29","^2:"]]]]],"^1H",null,"^8","Positional factory function for fast-zip.core/ZipperPath."],"^1G",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",87,"^5",7,"^6",87,"^7",16,"^R",["^S",["^T",["^S",[["^U","^1R","^1F"]]]]],"^8","Returns a new branch node, given an existing node and new children.\n  The loc is only used to supply the constructor."],"^G","~$fast-zip.core/make-node","^3","fast_zip/core.cljc","^7",16,"^W",["^S",[["^U","^1R","^1F"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",87,"^[","^1<","^6",87,"^11",3,"^12",true,"^R",["^S",["^T",["^S",[["^U","^1R","^1F"]]]]],"^8","Returns a new branch node, given an existing node and new children.\n  The loc is only used to supply the constructor."],"~$vector-zip",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",50,"^5",7,"^6",50,"^7",17,"^R",["^S",["^T",["^S",[["^1V"]]]]],"^8","Returns a zipper for nested vectors, given a root vector","^1W","1.0"],"^1W","1.0","^G","~$fast-zip.core/vector-zip","^3","fast_zip/core.cljc","^7",17,"^W",["^S",[["^1V"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",50,"^[","^16","^6",50,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^1V"]]]]],"^8","Returns a zipper for nested vectors, given a root vector"],"^1R",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",72,"^5",7,"^6",72,"^7",11,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns the node at loc"],"^G","~$fast-zip.core/node","^3","fast_zip/core.cljc","^7",11,"^W",["^S",[["^U"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",72,"^[","^1<","^6",72,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns the node at loc"],"~$up",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",125,"^5",7,"^6",125,"^7",9,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns the loc of the parent of the node at this loc, or nil if at the top"],"^G","~$fast-zip.core/up","^3","fast_zip/core.cljc","^7",9,"^W",["^S",[["^U"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",125,"^[",["^C",["^16","^19"]],"^6",125,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns the loc of the parent of the node at this loc, or nil if at the top"],"~$insert-right",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",227,"^5",7,"^6",227,"^7",19,"^R",["^S",["^T",["^S",[["^U","^14"]]]]],"^8","Inserts the item as the right sibling of the node at this loc, without moving"],"^G","~$fast-zip.core/insert-right","^3","fast_zip/core.cljc","^7",19,"^W",["^S",[["^U","^14"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",227,"^[","^16","^6",227,"^11",2,"^12",true,"^R",["^S",["^T",["^S",[["^U","^14"]]]]],"^8","Inserts the item as the right sibling of the node at this loc, without moving"],"~$ZipperLocation",["^ ","~:num-fields",3,"^1B",["^C",[]],"^G","^16","^3","fast_zip/core.cljc","^7",24,"~:type",true,"^5",10,"^4",22,"~:record",false,"^6",22,"^26","~$function","^1H",null],"~$rights",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",103,"^5",7,"^6",103,"^7",13,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns a seq of the right siblings of this loc"],"^G","~$fast-zip.core/rights","^3","fast_zip/core.cljc","^7",13,"^W",["^S",[["^U"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",103,"^[",["^C",["^1<","^19"]],"^6",103,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns a seq of the right siblings of this loc"],"^1V",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",142,"^5",7,"^6",142,"^7",11,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","zips all the way up and returns the root node, reflecting any changes."],"^G","~$fast-zip.core/root","^3","fast_zip/core.cljc","^7",11,"^W",["^S",[["^U"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",142,"^[","^1<","^6",142,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","zips all the way up and returns the root node, reflecting any changes."],"^F",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",256,"^5",7,"^6",256,"^7",11,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there."],"^G","~$fast-zip.core/next","^3","fast_zip/core.cljc","^7",11,"^W",["^S",[["^U"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",256,"^[","^10","^6",256,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there."],"~$ZipperOps",["^ ","^2F",3,"^1B",["^C",[]],"^G","^1J","^3","fast_zip/core.cljc","^7",19,"^2G",true,"^5",10,"^4",18,"^2H",false,"^6",18,"^26","^2I","^1H",null],"~$seq-zip",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",40,"^5",7,"^6",40,"^7",14,"^R",["^S",["^T",["^S",[["^1V"]]]]],"^8","Returns a zipper for nested sequences, given a root sequence","^1W","1.0"],"^1W","1.0","^G","~$fast-zip.core/seq-zip","^3","fast_zip/core.cljc","^7",14,"^W",["^S",[["^1V"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",40,"^[","^16","^6",40,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^1V"]]]]],"^8","Returns a zipper for nested sequences, given a root sequence"],"~$insert-left",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",217,"^5",7,"^6",217,"^7",18,"^R",["^S",["^T",["^S",[["^U","^14"]]]]],"^8","Inserts the item as the left sibling of the node at this loc, without moving"],"^G","~$fast-zip.core/insert-left","^3","fast_zip/core.cljc","^7",18,"^W",["^S",[["^U","^14"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",217,"^[","^16","^6",217,"^11",2,"^12",true,"^R",["^S",["^T",["^S",[["^U","^14"]]]]],"^8","Inserts the item as the left sibling of the node at this loc, without moving"],"~$prev",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",272,"^5",7,"^6",272,"^7",11,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Moves to the previous loc in the hierarchy, depth-first. If already at the root, returns nil."],"^G","~$fast-zip.core/prev","^3","fast_zip/core.cljc","^7",11,"^W",["^S",[["^U"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",272,"^[",["^C",["^10","^16","^19"]],"^6",272,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Moves to the previous loc in the hierarchy, depth-first. If already at the root, returns nil."],"~$right",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",152,"^5",7,"^6",152,"^7",12,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns the loc of the right sibling of the node at this loc, or nil"],"^G","~$fast-zip.core/right","^3","fast_zip/core.cljc","^7",12,"^W",["^S",[["^U"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",152,"^[",["^C",["^16","^19"]],"^6",152,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns the loc of the right sibling of the node at this loc, or nil"],"~$lefts",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",98,"^5",7,"^6",98,"^7",12,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns a seq of the left siblings of this loc"],"^G","~$fast-zip.core/lefts","^3","fast_zip/core.cljc","^7",12,"^W",["^S",[["^U"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",98,"^[",["^C",["~$seq","^19"]],"^6",98,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^U"]]]]],"^8","Returns a seq of the left siblings of this loc"],"~$ZipperPath",["^ ","^2F",5,"^1B",["^C",[]],"^G","^2<","^3","fast_zip/core.cljc","^7",20,"^2G",true,"^5",10,"^4",20,"^2H",false,"^6",20,"^26","^2I","^1H",null],"~$xml-zip",["^ ","^Q",null,"^2",["^ ","^3","fast_zip/core.cljc","^4",60,"^5",7,"^6",60,"^7",14,"^R",["^S",["^T",["^S",[["^1V"]]]]],"^8","Returns a zipper for xml elements (as from xml/parse),\n  given a root element","^1W","1.0"],"^1W","1.0","^G","~$fast-zip.core/xml-zip","^3","fast_zip/core.cljc","^7",14,"^W",["^S",[["^1V"]]],"^X",null,"^Y",["^S",[null,null]],"^5",1,"^Z",false,"^4",60,"^[","^16","^6",60,"^11",1,"^12",true,"^R",["^S",["^T",["^S",[["^1V"]]]]],"^8","Returns a zipper for xml elements (as from xml/parse),\n  given a root element"]],"~:require-macros",["^ ","^>","^>"],"~:cljs.analyzer/constants",["^ ","^L",["^C",["^1:","^28","~:content","^1E","^1F","~$r","^1G","^1R","^1Q","~$l","^26","~:end","^2N","^29","^2:","^2Z"]],"~:order",["^1E","^1F","^1G","~$l","~$r","^28","^29","^2:","^1Q","^26","^2N","^1R","^1:","^2Z","^33","^34"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^K","^>"]]