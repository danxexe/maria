["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","maria/util$macros.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",15],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$maria.util$macros","~:imports",null,"~:requires",["^ ","^<","^<","~$goog","^F"],"~:seen",["^A",[]],"~:shadow/js-access-global",["^A",["Error"]],"~:uses",null,"~:defs",["^ ","~$for-map",["^ ","~:protocol-inline",null,"^2",["^ ","^3","maria/util$macros.cljc","^7",18,"~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",4,"~:max-fixed-arity",4,"~:method-params",["~#list",[["~$seq-exprs","~$key-expr","~$val-expr"],["~$m-sym","^S","^T","^U"]]],"~:arglists",["^R",[["^S","^T","^U"],["^V","^S","^T","^U"]]],"~:arglists-meta",["^R",[null,null]]],"^5",11,"^4",3,"~:macro",true,"^6",3,"^W",["^R",["~$quote",["^R",[["^S","^T","^U"],["^V","^S","^T","^U"]]]]],"~:doc","Like 'for' for building maps. Same bindings except the body should have a\n  key-expression and value-expression. If a key is repeated, the last\n  value (according to \"for\" semantics) will be retained.\n  (= (for-map [i (range 2) j (range 2)] [i j] (even? (+ i j)))\n     {[0 0] true, [0 1] false, [1 0] false, [1 1] true})\n  An optional symbol can be passed as a first argument, which will be\n  bound to the transient map containing the entries produced so far."],"^B","~$maria.util$macros/for-map","^3","maria/util$macros.cljc","^7",18,"^M",["^ ","^N",false,"^O",4,"^P",4,"^Q",["^R",[["^S","^T","^U"],["^V","^S","^T","^U"]]],"^W",["^R",[["^S","^T","^U"],["^V","^S","^T","^U"]]],"^X",["^R",[null,null]]],"^Q",["^R",[["^S","^T","^U"],["^V","^S","^T","^U"]]],"~:protocol-impl",null,"^O",4,"^X",["^R",[null,null]],"^5",1,"^N",false,"~:methods",[["^ ","^O",5,"^N",false,"~:tag",["^A",["~$seq","~$cljs.core/IList"]]],["^ ","^O",6,"^N",false,"^13",["^A",["^14","^15"]]]],"^4",3,"^Y",true,"^6",3,"^P",4,"~:fn-var",false,"^W",["^R",[["^S","^T","^U"],["^V","^S","^T","^U"]]],"^[","Like 'for' for building maps. Same bindings except the body should have a\n  key-expression and value-expression. If a key is repeated, the last\n  value (according to \"for\" semantics) will be retained.\n  (= (for-map [i (range 2) j (range 2)] [i j] (even? (+ i j)))\n     {[0 0] true, [0 1] false, [1 0] false, [1 1] true})\n  An optional symbol can be passed as a first argument, which will be\n  bound to the transient map containing the entries produced so far."]],"~:require-macros",["^ ","^<","^<"],"~:cljs.analyzer/constants",["^ ","^G",["^A",["~$cljs.core/doseq","~$cljs.core/deref","~$cljs.core/atom","~$maria.util/for-map","~$cljs.core/reset!","~$m-atom__55284__auto__","~$cljs.core/let","~$cljs.core/persistent!","~$cljs.core/transient","~$cljs.core/assoc!"]],"~:order",["^1<","^1?","^1>","^1;","^1A","^19","^1:","^1=","^1B","^1@"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^F","^<"]]