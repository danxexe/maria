["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","lark/tree/fn.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",17],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$lark.tree.fn","~:imports",null,"~:requires",["^ ","~$clojure.walk","^F","~$w","^F","^<","^<","~$goog","^G"],"~:seen",["^A",["~:require"]],"~:shadow/js-access-global",["^A",["Error","parseInt"]],"~:uses",null,"~:defs",["^ ","~$construct-fn",["^ ","~:protocol-inline",null,"^2",["^ ","^3","lark/tree/fn.cljc","^4",5,"^5",7,"^6",5,"^7",19,"~:arglists",["~#list",["~$quote",["^P",[["~$syms","~$vararg","~$body"]]]]],"~:doc","Construct function form."],"^B","~$lark.tree.fn/construct-fn","^3","lark/tree/fn.cljc","^7",19,"~:method-params",["^P",[["^R","^S","^T"]]],"~:protocol-impl",null,"~:arglists-meta",["^P",[null,null]],"^5",1,"~:variadic?",false,"^4",5,"~:ret-tag","~$cljs.core/List","^6",5,"~:max-fixed-arity",3,"~:fn-var",true,"^O",["^P",["^Q",["^P",[["^R","^S","^T"]]]]],"^U","Construct function form."],"~$sym-index",["^ ","^N",null,"^2",["^ ","^3","lark/tree/fn.cljc","^4",17,"^5",7,"^6",17,"^7",16,"^O",["^P",["^Q",["^P",[["~$n"]]]]],"^U","Get index based on the substring following the parameter's `%`.\n   Zero means vararg."],"^B","~$lark.tree.fn/sym-index","^3","lark/tree/fn.cljc","^7",16,"^W",["^P",[["~$n"]]],"^X",null,"^Y",["^P",[null,null]],"^5",1,"^Z",false,"^4",17,"^[",["^A",["~$js","~$number"]],"^6",17,"^11",1,"^12",true,"^O",["^P",["^Q",["^P",[["~$n"]]]]],"^U","Get index based on the substring following the parameter's `%`.\n   Zero means vararg."],"~$symbol->gensym",["^ ","^N",null,"^2",["^ ","^3","lark/tree/fn.cljc","^4",29,"^5",7,"^6",29,"^7",21,"^O",["^P",["^Q",["^P",[["~$sym-seq","~$vararg?","~$max-n","~$sym"]]]]],"^U","If symbol starting with `%`, convert to respective gensym."],"^B","~$lark.tree.fn/symbol->gensym","^3","lark/tree/fn.cljc","^7",21,"^W",["^P",[["^18","^19","^1:","^1;"]]],"^X",null,"^Y",["^P",[null,null]],"^5",1,"^Z",false,"^4",29,"^[",["^A",["~$any","~$clj-nil"]],"^6",29,"^11",4,"^12",true,"^O",["^P",["^Q",["^P",[["^18","^19","^1:","^1;"]]]]],"^U","If symbol starting with `%`, convert to respective gensym."],"~$fn-walk",["^ ","^N",null,"^2",["^ ","^3","lark/tree/fn.cljc","^4",42,"^5",7,"^6",42,"^7",14,"^O",["^P",["^Q",["^P",[["~$form"]]]]],"^U","Walk the form and create an expand function form."],"^B","~$lark.tree.fn/fn-walk","^3","lark/tree/fn.cljc","^7",14,"^W",["^P",[["^1@"]]],"^X",null,"^Y",["^P",[null,null]],"^5",1,"^Z",false,"^4",42,"^[","^10","^6",42,"^11",1,"^12",true,"^O",["^P",["^Q",["^P",[["^1@"]]]]],"^U","Walk the form and create an expand function form."]],"~:require-macros",["^ ","^<","^<"],"~:cljs.analyzer/constants",["^ ","^H",["^A",["~$&","~:else","~$fn*"]],"~:order",["^1E","~$&","^1D"]],"~:flags",["^ ","^I",["^A",[]]],"~:js-deps",["^ "],"~:deps",["^G","^<","^F"]]