["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","chia/view/hiccup.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:shadow/protocol-prefixes",["~#set",["chia$view$hiccup$IElement$"]],"~:use-macros",null,"~:excludes",["^@",[]],"~:shadow/js-access-properties",["^@",["createElement","Fragment","isValidElement"]],"~:name","~$chia.view.hiccup","~:js-aliases",["^ ","react","~$module$node_modules$react$index"],"~:imports",null,"~:requires",["^ ","~$chia.view.hiccup.impl","^K","~$chia.util","^L","~$u","^L","~$react","^H","^<","^<","^H","^H","~$goog","^N","~$perf","~$chia.util.perf","~$hiccup","^K","~$j","~$applied-science.js-interop","^R","^R","^P","^P"],"~:seen",["^@",["~:require"]],"~:shadow/js-access-global",["^@",["Symbol","Error"]],"~:uses",null,"~:defs",["^ ","~$get-props",["^ ","~:protocol-inline",null,"^2",["^ ","^3","chia/view/hiccup.cljs","^4",44,"^5",7,"^6",44,"^7",16,"~:arglists",["~#list",["~$quote",["^[",[["~$form","~$i"]]]]],"~:doc","Returns props at index `i` in `form`, or a sentinel value if props were not found.\n   Props can be `nil` or a Clojure map.\n   Call `props?` on the result to determine if props were found.\n   Props can be nil or a Clojure map."],"^D","~$chia.view.hiccup/get-props","^3","chia/view/hiccup.cljs","^7",16,"~:method-params",["^[",[["^11","~$i"]]],"~:protocol-impl",null,"~:arglists-meta",["^[",[null,null]],"^5",1,"~:variadic?",false,"^4",44,"~:ret-tag",["^@",[null,"~$object","~$any","~$clj-nil"]],"^6",44,"~:max-fixed-arity",2,"~:fn-var",true,"^Z",["^[",["^10",["^[",[["^11","~$i"]]]]],"^12","Returns props at index `i` in `form`, or a sentinel value if props were not found.\n   Props can be `nil` or a Clojure map.\n   Call `props?` on the result to determine if props were found.\n   Props can be nil or a Clojure map."],"~$to-element",["^ ","^Y",null,"^2",["^ ","^3","chia/view/hiccup.cljs","^4",59,"^5",7,"^6",59,"^7",17,"^Z",["^[",["^10",["^[",[["^11"]]]]]],"^D","~$chia.view.hiccup/to-element","^3","chia/view/hiccup.cljs","^7",17,"^14",["^[",[["^11"]]],"^15",null,"^16",["^[",[null,null]],"^5",1,"^17",false,"^4",59,"^6",59,"^1<",1,"^1=",true,"^Z",["^[",["^10",["^[",[["^11"]]]]]],"~$sentinel",["^ ","^D","~$chia.view.hiccup/sentinel","^3","chia/view/hiccup.cljs","^4",39,"^5",1,"^6",39,"^7",18,"^2",["^ ","^3","chia/view/hiccup.cljs","^4",39,"^5",10,"^6",39,"^7",18],"~:tag","^19"],"~$update-props",["^ ","^Y",null,"^2",["^ ","^3","chia/view/hiccup.cljs","^4",94,"^5",7,"^6",94,"^7",19,"^Z",["^[",["^10",["^[",[["~$el","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","^17",true,"~:fixed-arity",2,"^1<",2,"^14",[["^[",["^1D","~$f","^1E"]]],"^Z",["^[",[["^1D","~$f","~$&","^1E"]]],"^16",["^[",[null]]]],"^D","~$chia.view.hiccup/update-props","^3","chia/view/hiccup.cljs","^7",19,"^1F",["^ ","^17",true,"^1G",2,"^1<",2,"^14",[["^[",["^1D","~$f","^1E"]]],"^Z",["^[",[["^1D","~$f","~$&","^1E"]]],"^16",["^[",[null]]],"^14",[["^[",["^1D","~$f","^1E"]]],"^15",null,"^1G",2,"^16",["^[",[null]],"^5",1,"^17",true,"~:methods",[["^ ","^1G",2,"^17",true,"^1B",["^@",[null,"~$clj","^1:"]]]],"^4",94,"^18","^1:","^6",94,"^1<",2,"^1=",true,"^Z",["^[",[["^1D","~$f","~$&","^1E"]]]],"~$element",["^ ","^Y",null,"^2",["^ ","^3","chia/view/hiccup.cljs","^4",102,"^5",7,"^6",102,"^7",14,"^Z",["^[",["^10",["^[",[["^11"],[["^ ","~:keys",["~$wrap-props"]],"^11"]]]]],"^12","Converts Hiccup form into a React element. If a non-vector form\n   is supplied, it is returned untouched. Attribute and style keys\n   are converted from `dashed-names` to `camelCase` as spec'd by React.\n\n   - optional -\n   :wrap-props (fn) is applied to all props maps during parsing.\n   :create-element (fn) overrides React.createElement.","^1F",["^ ","^17",false,"^1G",2,"^1<",2,"^14",["^[",[["^11"],[["^ ","^1L",["^1M"]],"^11"]]],"^Z",["^[",[["^11"],[["^ ","^1L",["^1M"]],"^11"]]],"^16",["^[",[null,null]]]],"^D","~$chia.view.hiccup/element","^3","chia/view/hiccup.cljs","^7",14,"^1F",["^ ","^17",false,"^1G",2,"^1<",2,"^14",["^[",[["^11"],[["^ ","^1L",["^1M"]],"^11"]]],"^Z",["^[",[["^11"],[["^ ","^1L",["^1M"]],"^11"]]],"^16",["^[",[null,null]]],"^14",["^[",[["^11"],[["^ ","^1L",["^1M"]],"^11"]]],"^15",null,"^1G",2,"^16",["^[",[null,null]],"^5",1,"^17",false,"^1I",[["^ ","^1G",1,"^17",false,"^1B","^1:"],["^ ","^1G",2,"^17",false]],"^4",102,"^6",102,"^1<",2,"^1=",true,"^Z",["^[",[["^11"],[["^ ","^1L",["^1M"]],"^11"]]],"^12","Converts Hiccup form into a React element. If a non-vector form\n   is supplied, it is returned untouched. Attribute and style keys\n   are converted from `dashed-names` to `camelCase` as spec'd by React.\n\n   - optional -\n   :wrap-props (fn) is applied to all props maps during parsing.\n   :create-element (fn) overrides React.createElement."],"~$IElement",["^ ","^2",["^ ","^3","chia/view/hiccup.cljs","^4",12,"^5",14,"^6",12,"^7",22,"~:protocol-symbol",true,"~:jsdoc",["^[",["@interface"]],"~:protocol-info",["^ ","^1I",["^ ","~$-to-element",[["~$this"]]]]],"^1P",true,"^D","~$chia.view.hiccup/IElement","^3","chia/view/hiccup.cljs","^7",22,"^5",1,"^4",12,"^1R",["^ ","^1I",["^ ","^1S",[["^1T"]]]],"~:info",null,"^6",12,"^1B","^1:","~:impls",["^@",[]],"^1Q",["^[",["@interface"]]],"~$-react-element?",["^ ","^D","~$chia.view.hiccup/-react-element?","^3","chia/view/hiccup.cljs","^4",10,"^5",1,"^6",10,"^7",21,"^2",["^ ","^3","chia/view/hiccup.cljs","^4",10,"^5",6,"^6",10,"^7",21],"^1B","~$js"],"~$-react-element",["^ ","^D","~$chia.view.hiccup/-react-element","^3","chia/view/hiccup.cljs","^4",8,"^5",1,"^6",8,"^7",20,"^2",["^ ","^3","chia/view/hiccup.cljs","^4",8,"^5",6,"^6",8,"^7",20],"^1B","^1Z"],"~$-react-fragment",["^ ","^D","~$chia.view.hiccup/-react-fragment","^3","chia/view/hiccup.cljs","^4",9,"^5",1,"^6",9,"^7",21,"^2",["^ ","^3","chia/view/hiccup.cljs","^4",9,"^5",6,"^6",9,"^7",21],"^1B","^1Z"],"~$make-element",["^ ","^Y",null,"^2",["^ ","^3","chia/view/hiccup.cljs","^4",19,"^5",7,"^6",19,"^7",19,"^Z",["^[",["^10",["^[",[["~$tag","~$js-props","^11","~$start"]]]]],"^12","Returns a React element. `tag` may be a string or a React component (a class or a function).\n   Children will be read from `form` beginning at index `start`."],"^D","~$chia.view.hiccup/make-element","^3","chia/view/hiccup.cljs","^7",19,"^14",["^[",[["^24","^25","^11","^26"]]],"^15",null,"^16",["^[",[null,null]],"^5",1,"^17",false,"^4",19,"^6",19,"^1<",4,"^1=",true,"^Z",["^[",["^10",["^[",[["^24","^25","^11","^26"]]]]],"^12","Returns a React element. `tag` may be a string or a React component (a class or a function).\n   Children will be read from `form` beginning at index `start`."],"^1S",["^ ","^Y",null,"^2",["^ ","^3","chia/view/hiccup.cljs","^4",13,"^5",4,"^6",13,"^7",15,"~:protocol","^1U","^12","Returns a React element representing `this`","^Z",["^[",["^10",["^[",[["^1T"]]]]]],"^28","^1U","^D","~$chia.view.hiccup/-to-element","^3","chia/view/hiccup.cljs","^7",15,"^14",["^[",[["^1T"]]],"^15",null,"^16",["^[",[null,null]],"^5",1,"^17",false,"^4",12,"^18","^1:","^6",13,"^1<",1,"^1=",true,"^Z",["^[",["^10",["^[",[["^1T"]]]]],"^12","Returns a React element representing `this`"],"~$props?",["^ ","^Y",null,"^2",["^ ","^3","chia/view/hiccup.cljs","^4",41,"^5",7,"^6",41,"^7",13,"^Z",["^[",["^10",["^[",[["~$props"]]]]]],"^D","~$chia.view.hiccup/props?","^3","chia/view/hiccup.cljs","^7",13,"^14",["^[",[["^2;"]]],"^15",null,"^16",["^[",[null,null]],"^5",1,"^17",false,"^4",41,"^18","~$boolean","^6",41,"^1<",1,"^1=",true,"^Z",["^[",["^10",["^[",[["^2;"]]]]]]],"~:require-macros",["^ ","^<","^<","^L","^L","~$u","^L","^O","^P","~$j","^R","^R","^R","^P","^P"],"~:cljs.analyzer/constants",["^ ","^S",["^@",["~:else","~:wrap-props","~:<>","~:form"]],"~:order",["^2B","^2@","^2C","^2A"]],"~:flags",["^ ","^T",["^@",[]]],"~:js-deps",["^ ","^G",["^ ","~:as","^M"]],"~:deps",["^N","^<","^H","^R","^K","^P","^L"]]